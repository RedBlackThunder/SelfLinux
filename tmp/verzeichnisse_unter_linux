<!--
 * Verzeichnisse unter Linux
 * Copyright: Frank Boerner
 * 
 * $Revision: 1.6 $
 * $Source: /selflinux/tutorial/verzeichnisse_unter_linux/verzeichnisse_unter_linux,v $
 * Autor: Frank Boerner <frank@frank-boerner.de>
 * 
 * Lizenz: GPL
 *
 * Diese Datei ist Teil von SelfLinux  http://www.selflinux.de
 *
 *** $Id: verzeichnisse_unter_linux,v 1.6 2004/01/16 15:36:23 florian Exp $
-->





Die Linux-Verzeichnisstruktur und das Arbeiten mit Verzeichnissen





1   Linux-Verzeichnisstruktur

<!-- KEYWORDS: Linux-Verzeichnisstruktur; Verzeichnisbaum; Wurzelverzeichnis; /;
               Arbeiten mit Verzeichnissen; Spezialdateien; Gerätedateien;
               Schnittstellen zur Hardware;  Benennung von Festplatten; 
               Benennung von Partitionen; tmp Verzeichnis; temporäre Ablage; 
	       Wichtige Verzeichnisse; Verzeichnisorganisation; -->

Linux speichert Dateien 
- <!-- LINK chapter="win_vs_linux" iref="Das Dateisystem"-->im Gegensatz zu MS-DOS und Windows<!-- ENDLINK --> -
in - einem - großen Verzeichnisbaum, der mit dem Wurzelverzeichnis /
beginnt und sich schnell weit verzweigt. 

Die nachfolgende Grafik stellt nur einen Ausschnitt eines Systems
dar und muss nicht in allen Einzelheiten auf jedes System zutreffen.

<!Hier Bild baum.png einfügen>

Die wichtigsten Verzeichnisse sind:

/         Das Wurzelverzeichnis steht ganz oben in der Hierarchie.


/bin      Hier befinden sich wichtige Programme für Anwender, die immer
    	  verfügbar sein müssen, z. B. die <!-- LINK chapter="was_ist_shell" -->Shells<!-- ENDLINK -->.


/boot     Hier befinden sich die zum Hochfahren des Systems unbedingt
	      erforderlichen Dateien. In der Hauptsache ist das der  
          <!-- LINK chapter="kernel" -->Kernel<!-- ENDLINK -->,
          im Normalfall eine Datei mit dem Namen 
          <!-- LINK chapter="kernel" iref="Installation des Kernels" -->"vmlinuz"<!-- ENDLINK -->. Aber auch
	  andere Namen für diese Datei sind möglich.


/dev      Dieses Verzeichnis enthält nur Spezialdateien, sogenannte
	      Gerätedateien. Diese stellen eine einfach zu nutzende 
          Schnittstelle zur Hardware dar. Hier finden sich auch 
          Einträge für alle Festplatten und ihre Partitionen:
	      /dev/hda ist die erste <!-- LINK url="http://de.wikipedia.org/wiki/EIDE" -->EIDE<!-- ENDLINK -->-, /dev/sda die erste 
          <!-- LINK url="http://de.wikipedia.org/wiki/SCSI" -->SCSI<!-- ENDLINK -->-Festplatte im System.
          Höhere Buchstaben (hdb, hdc) 
          stellen weitere Festplatten dar, Zahlen am Ende (sda1, sda2)
          sind die Nummern der einzelnen
<!-- LINK url="http://de.wikipedia.org/wiki/Partition_(Festplatte)" -->Partitionen der Festplatten<!-- ENDLINK -->.

          Da auf einer Festplatte nur vier primäre Partitionen
          möglich sind, wird häufig eine erweiterte Partition
          angelegt, die den größten Teil der Festplatte umfasst. In
          der erweiterten Partition können dann "logische Laufwerke"
          angelegt werden. Diese erhalten grundsätzlich die
          Partitionsnummern ab 5. Enthält eine Festplatte also eine
          primäre und eine erweiterte Partition, in der sich
          wiederum zwei logische Laufwerke befinden, gibt es auf
          dieser Platte die Partitionen 1, 2, 5 und 6. Die primäre
          Partition ist 1, die erweiterte ist 2, und die beiden
          logischen Laufwerke sind 5 und 6.


/etc      Hier sind viele der Konfigurationsdateien untergebracht,
          welche die Einstellungen verschiedener Programme oder auch
          grundlegende Systeminformationen enthalten. Zu Aufbau und Zweck vieler dieser
          speziellen Dateien findet man eine erklärende 
          <!-- LINK chapter="linux_hilfe" iref="man" -->Manpage<!-- ENDLINK --> 
           in der Sektion 5 "Dateiformate".


/home     In diesem Verzeichnis liegen traditionell die 
          <!-- LINK chapter="nutzer_unter_linux" iref="Das Heimatverzeichnis "-->Heimatverzeichnisse<!-- ENDLINK -->
          der Benutzer des Systems.


/lib      Hier befinden sich die wichtigsten
          <!-- LINK chapter="bibliotheken" -->Funktionsbibliotheken<!-- ENDLINK -->
          des Systems. Eigentlich gibt es nur eine Grundregel im
          Umgang mit diesem Verzeichnis: Finger weg!


/proc     /proc ist eigentlich kein normales Verzeichnis, sondern 
          stellt eine Schnittstelle zum <!-- LINK chapter="kernel" -->Kernel<!-- ENDLINK -->
          dar. Jedes laufende
          Programm wird hier in einem Unterverzeichnis geführt, 
          dessen Dateien viele Informationen z.B. über den aktuellen 
          Programmstatus enthalten. Zudem gibt es eine umfangreiche
	      Verzeichnisstruktur mit Daten über den Kernel und die 
          Hardware des Systems.


/root     Dies ist das Heimatverzeichnis des Systemverwalters root.
          Es liegt traditionell im Wurzelverzeichnis, damit root auch
          dann auf seine Dateien (beispielsweise Diagnoseprogramme)
          zugreifen kann, wenn durch einen Fehler der Zugriff auf
          andere Partitionen nicht mehr möglich ist.


/sbin     Ähnlich wie /bin enthält auch /sbin wichtige Programme. 
          Diese sind jedoch hauptsächlich für den Systemverwalter
          gedacht, da sie Funktionen erfüllen, auf die ein normaler
          Benutzer keinen Zugriff hat.


/tmp      Dieses Verzeichnis kann von jedem Benutzer und jedem 
          Programm als temporäre Ablage für Dateien verwendet werden.
          Damit sich Benutzer nicht gegenseitig ihre Dateien löschen,
          ist das sogenannte
          <!-- LINK chapter="grundlagen_sicherheit" iref="t-Bit (sticky Bit), SGID, SUID" -->"Sticky-Bit"<!-- ENDLINK --> dieses Verzeichnisses gesetzt.


/usr      Die umfangreichste Verzeichnisstruktur des Systems. Hier
          liegt der größte Teil der installierten Software. Auf vielen
          Systemen befinden sich in und unterhalb von  /usr mehr Daten
          als in allen anderen Dateien zusammen. Die Programmdateien
          sind meist in /usr/bin, die Spiele in /usr/games. In
          Netzwerken, an die viele gleichartige Systeme
          angeschlossen sind, wird dieses Verzeichnis häufig auf
          einem zentralen Server gespeichert, und alle anderen
          Computer greifen über das Netzwerk darauf zu.


/var      Unter diesem Verzeichnis werden hauptsächlich Dateien
          gespeichert, die sich ständig verändern. Der Name /var
          steht für "variabel", also "veränderlich". Hier befinden
          sich beispielsweise die Verzeichnisse für ausgehende
          E-Mails und noch ungelesene eingehende, wenn der jeweilige
          Benutzer nicht dafür gesorgt hat, dass neue E-Mails
          automatisch in sein Heimatverzeichnis übertragen werden.


/opt	  (optionale Software)
	      Kommerzielle Software oder sehr große Programme, die nicht
          unmittelbar zum System gehören, wie etwa KDE, Netscape, 
          Mozilla usw. finden hier ihren Platz.


1.1 Das lost & found Verzeichnis

<!-- KEYWORDS: lost+found Verzeichnis; ext-Dateisysteme; -->

Wenn Sie ein 
<!-- FUTURELINK chapter="dateisysteme_ueberblick" -->ext2- oder ext3-Dateisystem<!-- ENDLINK -->
verwenden, kann es vorkommen, 
dass ein Verzeichnis /lost+found in Ihrem Wurzelverzeichnis existiert. In
dieses Verzeichnis werden Dateien abgelegt, die keinem anderen
Verzeichnis mehr zugeordnet werden können. Solche Dateien, die in
sehr seltenen Fällen, z.B. bei Programmabstürzen oder Hardwarefehlern 
entstehen können, werden von einem Prüfwerkzeug des Dateisystems gefunden
und dann in /lost+found abgelegt. Es handelt sich hier um eine
besondere Eigenschaft der ext-Dateisysteme.


1.1 Standardisierung von Verzeichnisinhalten

<!-- KEYWORDS: Filesystem Hierarchy Standard; FHS; Standards; -->

Um den Wildwuchs der Verzeichnisorganisation bei den einzelnen Linux-Distributionen
einzudämmen, wurde schon vor einigen Jahren ein Standard dafür festgelegt, an den 
sich die Distributionen heute weitgehend halten.
Die engl. Originalbeschreibung der Verzeichnisinhalte nach dem 
"Filesystem Hierarchy Standard - FHS" ist nachzulesen unter 
http://www.pathname.com/fhs/.




1 Arbeiten mit Verzeichnissen



1.1 das Kommando pwd

<!-- KEYWORDS: Aktuelles Verzeichnis ermitteln; pwd Kommando; -->

Das Kommando gibt den vollständigen Pfadnamen des im Moment aktuellen
Arbeitsverzeichnisses an.

$user@linux:~/cvs/tutorial/userbasics/konzepte_basic> pwd
$/home/user/cvs/tutorial/userbasics/konzepte_basic





1.1 das Kommando cd

<!-- KEYWORDS: Relative Pfade; Absolute Pfade; cd Kommando; Verzeichniswechsel; 
               -->

Ohne Aufruf von Argumenten wechselt das Kommando 
cd (fuer engl. change directory) von jedem
beliebigen Punkt des Dateisystems in das Homeverzeichnis des
Benutzers.

$user@linux:~/cvs/tutorial/userbasics/konzepte_basic> cd
$user@linux:~>


Wenn man ein Verzeichnis wechseln möchte, unterscheidet man zwischen
relativer und absoluter Pfadangabe.

Beispiel für einen relativen Pfad:

$user@linux:~> cd cvs/tutorial
$user@linux:~/cvs/tutorial>

In diesem Beispiel wechselt der Benutzer ausgehend von seinem Heimatverzeichnis 
in das Verzeichnis cvs/tutorial.


Beispiel für einen absoluten Pfad:

$user@linux:~> cd /home/user/cvs/tutorial
$user@linux:~/cvs/tutorial>

Bei absoluter Pfadangabe wird ausgehend vom Wurzelverzeichnis jedes weitere 
Verzeichnis bis zum Zielverzeichnis angegeben.

Mit dem Kommando cd .. wechseln Sie -analog zum Befehl der DOS-Shell-
immer in das Elternverzeichnis Ihres aktuellen Verzeichnisses:

$user@linux:~/cvs/tutorial> cd ..
$user@linux:~/cvs>

Befinden Sie sich bereits im 
Wurzelverzeichnis, bleibt dieses Kommando wirkungslos.




1.1 das Kommando ls

<!-- KEYWORDS: ls Kommando; dir Kommando; Direcory Listing; 
	       Verzeichnisinhalt anzeigen; Versteckte Dateien anzeigen; 
	       . zu Beginn des Dateinamens; Datum der letzten Dateiänderung; -->

Das Kommando ls ist das wahrscheinlich wichtigste und am häufigsten
aufgerufene <!-- LINK chapter="allgemeine_kommandosyntax" -->Kommando<!-- ENDLINK --> 
unter Linux überhaupt: Es zeigt den Inhalt
eines Verzeichnisses an und ist damit die Entsprechung von DIR unter
DOS. 

Anmerkung:
In einigen Distributionen ist ein
 <!-- LINK chapter="bash_basic" iref="Der Alias-Mechanismus" -->Alias<!-- ENDLINK -->
 auf das ls Kommando
mit dem Namen dir vorhanden. Gibt man dir ein erhält man die 
Ausgabe des ls Kommandos aufgerufen mit dem  Parameter -l.

Ruft man ls ohne Optionen auf, so gibt es den Inhalt in der kürzesten
möglichen Form aus:

$user@linux:~> ls
Desktop    OpenOffice.org641  playlists public_html         wrg
Documents  cvs                nsmail    plugin131.trace     selflinux
Mail       evolution          office52  plugin131_02.trace  selflinux-texte
user@linux:~>


Die verschiedenen Optionen zu ls erlauben die Anzeige einer Vielzahl
von Information in verschiedenen Formaten. Wir möchten hier nur auf
die wichtigsten Optionen eingehen. Für weitere Möglichkeiten geben Sie
einfach ls --help ein.


ls -a

Diese Option listet auch die sogenannten versteckten Dateien auf, die
mit einem Punkt beginnen. Diese Dateien sind in erster Linie im 
Heimatverzeichnis eines Benutzers zu finden und sind, zum Schutz vor
Konfigurationsfehlern und um dieses Verzeichnis übersichtlich zu halten, versteckt.

$user@linux:~> ls -a
.                     .fullcircle          .nautilus               .xsession
..                    .gconf               .nautilus-metafile.xml
.xsession-errors
.DCOPserver_linux_:0  .gconfd              .netscape               .xtalkrc
.DCOPserver_linux__0  .gimp-1.2            .netscape6              .y2log
.G-Force              .gnome               .ntrc                   .yast2
.ICEauthority         .gnome-desktop       .opera                  Desktop
.SuSENautilusPage     .gnome-help-browser  .pinerc                 Documents
.Xauthority           .gnome_private       .profile                Mail


ls -l

Diese Option liefert eine ausführlichere Ausgabe.  Sie bedeutet von
links nach rechts: Dateityp, Zugriffsrechte, Zahl der Hardlinks, Besitzer,
Gruppe, Größe, Datum der letzten Änderung, Dateiname



$user@linux:~> ls -l
insgesamt 18
drwxr-xr-x    3 user     users         520 Mai 28 20:10 Desktop
drwxr-xr-x    3 user     users        1072 Mai 28 21:41 Documents
drwx------   29 user     users        4800 Mai 28 21:59 Mail
drwxr-xr-x    3 user     users         320 Apr 13 00:58 OpenOffice.org641
drwxr-xr-x    7 user     users         168 Mai 26 21:47 cvs
drwx------    4 user     users         232 Apr 14 08:04 evolution
drwxr-xr-x    2 root     root          208 Feb 24  2000 kuer_chm
drwx------    2 user     users          48 Apr 13 01:09 nsmail
drwxr-xr-x    3 user     users         232 Apr 14 08:07 office52
drwxr-xr-x    2 user     users          80 Mai  4 07:39 playlists
drwxr-xr-x    2 user     users          80 Apr 11 20:04 public_html
drwxr-xr-x    5 user     users         208 Mai  8 20:42 selflinux
drwxr-xr-x    2 user     users         352 Mär 16 13:48 selflinux-texte
drwxr-xr-x    2 user     users         448 Mär 16 13:47 wrg


Ausführlichere Erklärungen der angezeigten Informationen zu den Zugriffsrechen 
findet  man im Kapitel 
<!-- LINK chapter="nutzer_unter_linux" iref="Berechtigungsklassen: Lesen, Schreiben und Ausführen " -->Benutzer- und Berechtigungskonzepte<!-- ENDLINK -->



ls -R

Diese Option gibt auch den Inhalt der Unterverzeichnisse aus.

$user@linux:~/selflinux> ls -R
.:
Basisrelease  README  output  saxon  slcompile  styles

./output:
html  images

./output/html:
Basisrelease.html  Basisrelease01.html

./output/images:
10baset-netz.gif  img_transparent.gif  openfolder.gif
shell_funktionsweise01.gif
fddi.gif          kdm.gif              repeater_bridge.gif  thickethernet.gif
img_document.gif  koaxialnetz.gif      selflinux.gif        tokenring.gif

./saxon:
README  doc  saxon.jar

./saxon/doc:
api-guide.html   conformance.html    extensions.html  patterns.html
xsl-elements.html
changes.html     dtdgen.html         history.html     samples.html
changes5.html    expressions.html    index.html       suggestions.html
conditions.html  extensibility.html  instant.html     using-xsl.html

./styles:
html

./styles/html:
files.xsl  format.xsl  lib.xsl  main.xsl  section.xsl  selflinux.xsd  toc.xsl


Sie können auch mehrere Optionen miteinander verbinden, zum Beispiel
ls -lR oder ls -la.





1.1 das Kommando mkdir

<!-- KEYWORDS: mkdir Kommando; Verzeichnis anlegen; Unterverzeichnisse anlegen; -->

Mit dem Kommando mkdir kann man Verzeichnisse anlegen.

$user@linux:~/test> ls
user@linux:~/test> mkdir a
user@linux:~/test> ls
a


Durch Verwendung der Option -p kann man gleichzeitig auch noch
Unterverzeichnisse anlegen.

$user@linux:~/test> ls
user@linux:~/test> mkdir -p a/b/c
user@linux:~/test> ls
a
user@linux:~/test> cd a
user@linux:~/test/a> ls
b
user@linux:~/test/a> cd b
user@linux:~/test/a/b> ls
c
user@linux:~/test/a/b>





1.1 das Kommando rmdir

<!-- KEYWORDS: Verzeichnis löschen; rmdir Kommando; Unterverzeichnisse löschen; -->

Mit dem Kommando rmdir kann man (leere) Verzeichnisse löschen.

$user@linux:~/test> ls
a
user@linux:~/test> rmdir a
user@linux:~/test> ls
user@linux:~/test>


Wenn Sie hier die Option -p verwenden, werden gleichzeitig auch die
untergeordneten Verzeichnisse gelöscht (vorausgesetzt, sie sind alle
leer).

$user@linux:~/test> ls
a
user@linux:~/test> rmdir -p a/b/c
user@linux:~/test> ls
user@linux:~/test>

