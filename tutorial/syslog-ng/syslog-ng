<?xml version="1.0" encoding="iso-8859-1"?>

<chapter>
 <title>syslog-ng</title>

 <author>
  <name>Winfried Müller</name>
  <mailto>wm@reintechnisch.de</mailto>
 </author>

 <layout>
  <name>Florian Frank</name>
  <mailto>florian.frank@pingos.org</mailto>
 </layout>

 <license>GFDL</license>

 <index>syslog-ng</index>

 <split>
  <section>
   <heading>
Einführung
   </heading>

   <textblock>
Logfiles werden gerne übersehen und sind doch so extrem wichtig und hilfreich.
Einer der großen Vorzüge von Linux ist, dass es fast alles im System
protokollieren kann. So kann man immer nachvollziehen, was wann wo passiert
oder eben schief läuft.
   </textblock>

   <textblock>
Logging wird gerade aus Sicherheitsgründen immer wichtiger. Hierüber lässt sich
früh erkennen, wann wo im System ein Einbruchsversuch läuft. Neben dem Logging
sind vor allem gute Logfile-Analyse-Werkzeuge notwendig.
   </textblock>

   <textblock>
Der Standard <ref chapter="syslog">syslog</ref> Daemon unter Linux und vielen
Unix Varianten ist in vielerlei Hinsicht sehr eingeschränkt. Er konnte mir
nicht das liefern, was ich brauchte, um Logfiles vernünftig und einfach
auszuwerten.
   </textblock>

   <textblock>
Ich bin nicht der einzige, dem der <ref chapter="syslog">syslog</ref> Daemon
ziemlich angestaubt und unzulänglich vorkam. Und so machte sich dann
<name>Balazs Scheidler</name> 1998 auf den Weg, einen neuen besseren
<ref chapter="syslog">syslog</ref> zu schreiben. Diesen nannte er
<command>syslog-ng</command>. Das <strong>ng</strong> steht für
<strong>New Generation</strong>.
   </textblock>

   <textblock>
<command>syslog-ng</command> ist mittlerweile ein fest etablierter und stabil
laufender Ersatz für den <ref chapter="syslog">syslog</ref>. Alle großen
Distributionen haben ihn mit an Board, jedoch muss er meist noch aktiviert
werden. Es spricht eigentlich alles dafür, auf <command>syslog-ng</command>
umzusteigen, sobald man Möglichkeiten braucht, die über den normalen
<ref chapter="syslog">syslog</ref> hinausreichen.
   </textblock>

   <textblock>
Diese Beschreibung bezieht sich auf die <command>syslog-ng</command> Version
1.5.15, wie sie in <ref lang="de" url="http://www.debian.org/">Debian Woody</ref>
enthalten ist.
   </textblock>
  </section>
 </split>

 <split>
  <section>
   <heading>
Ein Anwendungsfall
   </heading>

   <textblock>
Als ich anfing, mir ein Logfile-Analyse-Werkzeug zu bauen, merkte ich, dass der
Standard syslog Dämon von Linux und vielen Unix-Systemen doch erhebliche
Einschränkungen mit sich bringt. Ich wollte ein Logfile in einer ähnlichen
Form, wie es moderne Anwendungen wie cups, samba oder Apache machen. Das Datum
sollte mit Jahresangabe sein, Priorität, Facility und das Programm, was loggt,
sollten ebenfalls auftauchen. Eine Zeile sollte etwa so aussehen:
   </textblock>

   <file>
    <content>
[2003/10/13 12:00:42] info mail fetchmail fetchmail[30924]: No mail for ...
    </content>
   </file>

   <textblock>
Zuerst das Datum in einer samba-like Form, dann die Log-Priorität, die Facility
(also der Systembereich, der loggt), das Programm und die Message. Alle
erzeugten Logs des Systems, die über <ref chapter="syslog">syslog</ref> laufen,
sollten in einer Logdatei landen. Hierzu fügte ich in der
<path>syslog-ng.conf</path> folgende Zeilen hinzu:
   </textblock>

   <file>
    <content>
destination mysyslog {
  file("/var/log/mysyslog"
  owner("root")
  group("adm")
  perm(0640)
  template( "[$YEAR/$MONTH/$DAY $HOUR:$MIN:$SEC] $PRIORITY
             $FACILITY $PROGRAM $MESSAGE\n")); };

log { source(src);  destination(mysyslog); };
    </content>
   </file>

   <textblock>
Mit <strong>destination</strong> wird ein
<ref iref="Das destination Objekt">destination-Objekt</ref> festgelegt, welches
<strong>mysyslog</strong> heißt und mit der Datei
<path>/var/log/mysyslog</path> verbunden wird. Das Ausgabe-Format
beschreibt ein Template. Über die Zeile <strong>log</strong> wird dann ein
zuvor definiertes <ref iref="Das source Objekt">source-Objekt</ref> und mein
<ref iref="Das destination Objekt">destination-Objekt</ref> zu einer Log-Aktion zusammengefügt.
   </textblock>
  </section>
 </split>

 <split>
  <section>
   <heading>
Konfigurationsdetails
   </heading>

   <textblock>
Die Konfigurations-Syntax ist an C/Java/PHP angelehnt und sehr einfach
gehalten. Man sollte jedoch aufpassen, Semikolons immer richtig zu setzen.
   </textblock>

   <textblock>
Leider gehört es zum Charakter von Linux, dass fast jeder Autor eines Paketes
sich in einer eigenwilligen Konfigurations-Syntax verewigt. Wie schön wäre es,
wenn gerade bei der Konfigurations-Sprache sich ein Standard durchsetzt, an den
sich alle halten. Manche großen Pakete wie
<ref lang="en" url="http://www.samba.org/">samba</ref>,
<ref lang="en" url="http://www.cups.org/">cups</ref>,
<ref chapter="apache">apache</ref> machen schon gute Vorgaben, die
andere Paketentwickler übernehmen. Der Einstieg in neue Pakete wird so
wesentlich vereinfacht, weil man nur noch wissen muss, was man konfigurieren
will und nicht mehr, wie man überhaupt konfigurieren kann. Ein
vielversprechender Ansatz ist <ref lang="en" url="http://config4gnu.sourceforge.net/docs/article.html">http://config4gnu.sourceforge.net/docs/article.html</ref>.
   </textblock>

   <textblock>
Die gesamte Konfiguration erfolgt über die Datei <path>syslog-ng.conf</path>,
die bei Debian Linux unter <path>/etc/syslog-ng/syslog-ng.conf</path> liegt.
   </textblock>

   <textblock>
In dieser Konfigurations-Datei gibt es prinzipiell folgende Einträge:
   </textblock>

   <file>
    <content>
options { option; option; .. };
    </content>
   </file>

   <textblock>
Hiermit können globale Optionen festgelegt werden.
   </textblock>

   <file>
    <content>
source &lt;identifier&gt; { source-driver(params); ... };
    </content>
   </file>

   <textblock>
Mit jeder source Zeile wird eine syslog-Quelle festgelegt.
   </textblock>

   <file>
    <content>
filter &lt;identifier&gt; { expression; ... };
    </content>
   </file>

   <textblock>
Hiermit können beliebig viele <ref iref="Das filter Objekt">Filter-Objekte</ref>
angelegt werden, die später in der log-Zeile benutzt werden können. Expression
beschreibt die Filterregel.
   </textblock>

   <file>
    <content>
destination &lt;identifier&gt; {dest-driver(params); ... };
    </content>
   </file>

   <textblock>
Hiermit kann man Ziel-Objekte anlegen, wohin also geloggt werden soll und
mit welchen Einstellungen.
   </textblock>

   <file>
    <content>
log { source(s1); source(s2); ...; filter(f1); filter(f2); ...; destination (d1);
      destination(d2); ...; flags( flag1; ...) }
    </content>
   </file>

   <textblock>
Hiermit werden <ref iref="Das log Objekt">log-Objekte</ref> angelegt und
<ref iref="Das log Objekt">log-Objekte</ref> sind die einzigen,
die auch Aktionen ausführen, wenn sie definiert sind. In dem
<ref iref="Das log Objekt">Log-Objekt</ref>
werden zuvor definierte Objekte (<ref iref="Das source Objekt">source</ref>,
<ref iref="Das filter Objekt">filter</ref>, <ref iref="Das destination Objekt">destination</ref>)
zusammengefügt und das Logging somit aktiviert.
   </textblock>

   <textblock>
Nochmal zum Verständnis: Man kann beliebig viele source, filter und
destination-Objekte anlegen, die von sich aus gar nichts tun. Erst das
Einbinden in ein log-Objekt, aktiviert eine Logausgabe. Das log-Objekt ist das
einzige, was irgendwie aktiv wird.
   </textblock>

   <textblock>
Dieser objektorientierte Aufbau ist sehr leicht überschaubar und wartbar. Nach
ein wenig Praxis wird man spüren, wie angenehm diese Form zu handeln ist.
   </textblock>

   <section>
    <heading>
Das options Objekt
    </heading>

    <textblock>
Hier kann man globale Einstellungen vornehmen. Das meiste ist für erste
Gehversuche schon korrekt eingestellt, es geht hauptsächlich um Feintuning.
Einige wichtige Einstellungen sind:
    </textblock>

    <ul>
     <li>
<strong>sync(n-lines)</strong><br/>
Hiermit kann man festlegen, wieviele Log-Zeilen auflaufen sollen, bis
gesynct wird, bis also die Daten tatsächlich auf der Platte abgelegt
werden und nicht noch in irgendeinem Puffer im Ram stecken. Wer sicher
gehen will und auch keine Performance-Probleme hat, sollte hier 0
einstellen - es wird dann sofort jede Zeile geschrieben.
     </li>
     <li>
<strong>log_fifo_size(n-lines)</strong><br/>
Anzahl der Zeilen, die zwischengepuffert werden können. Ist wichtig, wenn
mehr Logs einlaufen, als syslog-ng wegschreiben kann. Das kann z. B.
passieren, wenn eine kurzzeitige Logzeilen-Flut hereinbricht. Ein
typischer Wert ist 1000.
     </li>
    </ul>
   </section>

   <section>
    <heading>
Das source Objekt
    </heading>

    <textblock>
Hier kann man die Quellen angeben, woher <command>syslog-ng</command> Meldungen
empfangen soll. Unter debian Linux reicht für das normale Logging folgende
Zeile:
    </textblock>

    <file>
     <content>
source src { unix-stream("/dev/log"); internal(); };
     </content>
    </file>

    <textblock>
Es wird hier ein neues <ref iref="Das source Objekt">Source-Objekt</ref> namens
<strong>src</strong> angelegt. Dieses Source-Objekt wird nun mit zwei Quellen
verbunden, zum einen mit <path>/dev/log</path>, zum anderen mit
<strong>internal</strong>. Der Typ <strong>internal</strong> steht für die
Messages, die <command>syslog-ng</command> selber erzeugt. Die sollte man
also immer mit aufnehmen. <path>/dev/log</path> ist vom Typ unix-stream, ein
Stream mit unix-style Übertragung, was man typischerweise unter Linux
nutzt. Ein ähnlicher Typ ist unix-dgram, der in BSD Systemen verwendet wird.
Unter Linux funktioniert generell auch unix-dgram, es ist aber nicht so sicher,
weil bei zu hoher Systemlast Logs verloren gehen können.
    </textblock>

    <textblock>
Weitere Möglichkeiten von Typen einer Datenquelle sind <strong>file</strong>,
<strong>pipe</strong>, <strong>udp</strong>, <strong>tcp</strong>.
Hiermit kann man verrückte Sachen anstellen. Im Normalfall dürfte lediglich
udp/tcp noch interessant sein, mit dem <command>syslog-ng</command> als Loghost
übers Netz fungieren kann. Er verhält sich dann genauso, wie ein
<ref chapter="syslog">syslog</ref>, der per
<ref chapter="tcpip" iref="UDP - User Datagram Protocol">udp</ref>
lauscht. Eine vollständige
<ref chapter="tcpip" iref="UDP - User Datagram Protocol">udp</ref>
Quelle sieht so aus:
    </textblock>

    <file>
     <content>
udp( ip(0.0.0.0) port(514) )
     </content>
    </file>

    <textblock>
Wobei <strong>ip</strong> und <strong>port</strong> auch weggelassen werden
können, wenn die hier angegebenen Defaultparameter genommen werden sollen. Ip
steht für die IP-Adresse, auf der gelauscht werden soll. Hat ein Rechner also
mehrere IP-Adressen, kann man hier Einschränkungen machen. Default ist 0.0.0.0,
was auf allen Adressen lauscht. Man kann nicht angeben, das z. B. nur Logs von
einem bestimmten Host angenommen werden. Port gibt den Port an, auf dem
gelauscht werden soll. Default ist lt. altem <ref chapter="syslog">syslog</ref>
der Port 514.
    </textblock>

    <textblock>
<ref chapter="tcpip" iref="UDP - User Datagram Protocol">UDP</ref> ist ein
verbindungsloses Protokoll, es kann also passieren, dass bei
verlorenen Paketen auch Logs verloren gehen, weil diese nicht erneut angefordert
werden. Besser ist es daher,
<ref chapter="tcpip" iref="TCP - Transmission Control Protocol">tcp</ref>
einzusetzen. Konfiguriert wird es genauso, man kann auch den gleichen Port
nutzen, insofern man auf das sonst dort sitzende rshell verzichten kann
(seit ssh sollte die eh überflüssig sein). Bei
<ref chapter="tcpip" iref="TCP - Transmission Control Protocol">tcp</ref> gibt
es zusätzlich noch den Parameter <strong>max-connections(n)</strong>, der die
Anzahl der Verbindungen limitiert.
    </textblock>

    <textblock>
Wer allerdings von alten <ref chapter="syslog">syslogs</ref> aus Logs
entgegennehmen muss, der ist auf
<ref chapter="tcpip" iref="UDP - User Datagram Protocol">udp</ref> angewiesen,
weil die nur <ref chapter="tcpip" iref="UDP - User Datagram Protocol">udp</ref>
können.
    </textblock>

    <textblock>
Es gibt noch eine weitere Quelle, die man evtl. nicht vergessen darf - die
<ref chapter="kernel">Kernel</ref>-Messages. Wenn man auf seinem Linux-System
einen <command>klogd</command> laufen hat, dann holt dieser sich alle
Kernelmessages aus <path>/proc/kmsg</path> und reicht sie an den Syslog-
Daemon (hier: <command>syslog-ng</command>) weiter. Somit hat man diese
Messages automatisch. Das dürfte bei den meisten Distributionen der
Standard-Fall sein. Der <command>klogd</command> hat auch den Vorteil, das er
manche Logs noch weiter aufbereitet, z. B. Funktionsnamen über die .map
Kernel Files dekodiert. Dadurch können Probleme leichter gefunden werden.
    </textblock>

    <textblock>
Läuft kein <command>klogd</command>, so muss man diese Kernel-Messages selber
abholen. Eine komplette Sourcezeile könnte dann so aussehen:
    </textblock>

    <file>
     <content>
source src { unix-stream("/dev/log"); internal(); file("/proc/kmsg");};
     </content>
    </file>

    <textblock>
Manche Distributionen benutzen hier auch <strong>pipe()</strong> statt
<strong>file()</strong> für <path>/proc/kmsg</path>.
    </textblock>
   </section>

   <section>
    <heading>
Das destination Objekt
    </heading>

    <textblock>
Mit dem Destination Objekt kann man Ziele festlegen, wohin ein Log-Stream
gehen soll. Normal ist dies eine Datei. Ein einfaches Ziel könnte so aussehen:
    </textblock>

    <file>
     <content>
destination syslog { file("/var/log/syslog" owner("root") group("adm") perm (0640)); };
     </content>
    </file>

    <textblock>
Hier wird das Ziel mit dem Namen <strong>syslog</strong> angelegt, wobei es
mit der Datei <path>/var/log/syslog</path> verbunden wird. Diese Datei soll
mit dem Benutzer root.adm angelegt werden und 0640er Rechte haben.
    </textblock>

    <textblock>
Neben den <strong>file()</strong>-Optionen <strong>owner()</strong>,
<strong>group()</strong>, <strong>perm()</strong> gibt es weitere, die man bei
speziellen Ansprüchen nutzen kann. Eine sehr interessante Option ist die
Möglichkeit, ein Ausgabeformat mit <strong>template()</strong> festzulegen.
Dies hatte ich weiter oben an einem Beispiel schon verdeutlicht. Hiermit kann
man sich nahezu beliebige Logfile-Formate erstellen. Das Template ist ein
String, in dem Makros mit einem $MakroName eingefügt werden können.
    </textblock>

    <textblock>
Eine typisches Template könnte so aussehen:
    </textblock>

    <file>
     <content>
template( "[$YEAR/$MONTH/$DAY $HOUR:$MIN:$SEC] $PRIORITY $FACILITY $MESSAGE\n")
     </content>
    </file>

    <textblock>
Hier wird zuerst das Datum in einer typischen Form zusammengefügt, dann die
Priorität, die Facility und die Message ausgegeben.
    </textblock>

    <textblock>
Folgende Makros sind verfügbar:
    </textblock>

    <table>
     <pdf-column width="150"/>
     <pdf-column/>
     <tr>
      <td>
FACILITY
      </td>
      <td>
Facility der Message. Das ist eine der vordefinierten
Gruppen des Subsystems, von der eine Message kommt.
Möglich sind hier auth, auth-priv, cron, daemon, ftp,
kern, lpr, mail, mark, news, syslog, user, uucp,
local0 - local7. Was welche bedeuten und welches
Programm welche Facility benutzt, ist nicht immer
einfach herauszufinden. Ein Beobachten der syslogs
hilft am besten. Viele Programme können vor dem
Kompilieren eingestellt werden, unter welcher
Facility sie loggen. Das Facility-System kann man als
starr und veraltet betrachten, weil es für die
meisten Filteraufgaben zu grob und unflexibel ist.
      </td>
     </tr>
     <tr>
      <td>
PRIORITY oder LEVEL
      </td>
      <td>
Die Priorität der Message. Hier gibt es: debug, info,
notice, warn, err, crit, alert, emerg.
      </td>
     </tr>
     <tr>
      <td>
TAG
      </td>
      <td>
Die Priorität und Facility als 2-Zeichen Hexzahl
codiert.
      </td>
     </tr>
     <tr>
      <td>
DATE, FULLDATE, ISODATE
      </td>
      <td>
Das Datum in verschiedenen standardisierten
Formaten.
      </td>
     </tr>
     <tr>
      <td>
YEAR
      </td>
      <td>
Das Jahr 4-stellig.
      </td>
     </tr>
     <tr>
      <td>
MONTH
      </td>
      <td>
Der Monat 2-stellig numerisch, ggf. führende 0.
      </td>
     </tr>
     <tr>
      <td>
DAY
      </td>
      <td>
Der Tag 2-stellig numerisch, ggf. führende 0.
      </td>
     </tr>
     <tr>
      <td>
WEEKDAY
      </td>
      <td>
Wochentag 3 Buchstaben, wie unter Unix gewohnt. (Mon, Tue...)
      </td>
     </tr>
     <tr>
      <td>
HOUR
      </td>
      <td>
Die Stunde 2-stellig, ggf. führende 0.
      </td>
     </tr>
     <tr>
      <td>
MIN
      </td>
      <td>
Die Minute 2-stellig, ggf. führende 0.
      </td>
     </tr>
     <tr>
      <td>
SEC
      </td>
      <td>
Die Sekunden 2-stellig, ggf. führende 0.
      </td>
     </tr>
     <tr>
      <td>
FULLHOST
      </td>
      <td>
Vollständig qualifizierter Host, also host.domain
      </td>
     </tr>
     <tr>
      <td>
HOST
      </td>
      <td>
Hostname ohne Domainzusatz.
      </td>
     </tr>
     <tr>
      <td>
PROGRAM
      </td>
      <td>
Das Programm, welches die Messages abgesetzt hat. Hierüber lässt
sich oft flexibler filtern, als über die Facilitys.
      </td>
     </tr>
     <tr>
      <td>
MSG oder MESSAGE
      </td>
      <td>
Die eigentliche Message. Da es im alten <ref chapter="syslog">syslog</ref> keine
Möglichkeit gab, das Programm oder den Prozess mitzuloggen, hat es sich als
Standard herausgebildet, in die Message als erstes das Programm mit
Prozessnummer anzugeben (Programm[ps-id]: ), welches die Message ausgab. Bei
Unterprozessen eines Programmes, wird normal Programm/Unterprozess[ps-id]:
verwendet. Erst hinter dem Doppelpunkt beginnt die eigentliche Message.
Verlassen kann man sich jedoch auf diese Regel nicht, Ausnahmen gibt es
immer wieder.
      </td>
     </tr>
    </table>

    <textblock>
Es gibt bei <strong>file()</strong> einen leistungsfähigen Mechanismus, die
Makro-Substitution für den Dateinamen. So kann man sich dynamische
Logfilenamen generieren. Hier kann man die gleichen Makros wie für
<strong>template()</strong> benutzen. Ein
    </textblock>

    <file>
     <content>
destination mylog { file("/var/log/syslog-$HOST" owner("root") group("adm") perm(0640)); };
     </content>
    </file>

    <textblock>
loggt z. B. jeden Host in in eine getrennte Datei in der Form syslog-MeinErsterHost,
syslog-NochEinHost. Natürlich muss man hier auch vorsichtig sein, um DoS-
Attacken nicht Tür und Tor zu öffnen. Wer jedoch spezielle Möglichkeiten des
Loggens braucht, kommt mit diesem Feature vielleicht weiter.
    </textblock>

    <textblock>
Neben file gibt es noch folgende Ziel-Typen bzw. Ziel-Treiber: tcp, udp, unix-
stream, unix-dgram, fifo, usertty, program.
    </textblock>

    <textblock>
Udp oder tcp nutzt man ähnlich, wie schon bei dem Source-Objekt beschrieben.
Als Ziel angegeben, schickt der <command>syslog-ng</command> nun diesen
Log-Stream zu einem anderen Rechner per tcp oder udp. Ein Beispiel:
    </textblock>

    <file>
     <content>
destination a_udp { udp( "192.168.0.12" port(514) ); };
     </content>
    </file>

    <textblock>
Hier sollen an den udp-Port 514 des Rechners mit der IP 192.168.0.12 Messages
verschickt werden. Port 514 ist sowieso Default, könnte hier also auch
weggelassen werden.
    </textblock>

    <textblock>
Hier gilt auch: Udp nimmt man aus Kompatibilitätsgründen, weil sich dann
<command>syslog-ng</command> wie ein altes <ref chapter="syslog">syslog</ref>
verhält. Tcp ist das sicherere Verfahren, weil bei diesem
verbindungsorientierten Protokoll Pakete nicht verloren gehen können.
    </textblock>

    <textblock>
Auch udp ist relativ sicher, es werden nicht regelmäßig Packete verloren gehen,
vor allem nicht im lokalen Netzwerk. Nur wenn Hardware oder Leitungen defekt
sind, kommt es zu Datenverlusten. Aber auch tcp kann durch einen kaputte
Leitung nichts mehr schicken, es kann lediglich bei einer kurzen Störung erneut
versenden. Man sollte sehen, dass udp Jahrzehnte erfolgreich für diese Aufgabe
eingesetzt wird.
    </textblock>

    <textblock>
Mit usertty kann man Meldungen auf dem Terminal eines Benutzers ausgeben, der
natürlich eingeloggt sein muss. Hier ein Beispiel:
    </textblock>

    <file>
     <content>
destination admin_tty { usertty(admin); };
     </content>
    </file>

    <textblock>
Sollen Meldungen an alle eingeloggten Benutzer gehen, nimmt man:
    </textblock>

    <file>
     <content>
destination warn_to_all { usertty(*); };
     </content>
    </file>
   </section>

   <section>
    <heading>
Das filter Objekt
    </heading>

    <textblock>
Filter Objekte legen fest, wie Meldungen von einem Source-Objekt gefiltert
werden sollen. Hiermit lassen sich also gewünschte Messages aus dem gesamten
Datenstrom eines Source-Objektes herauspicken. Und das ist gut, wenn man z.B.
in einem Ziel nur bestimmte Meldungen loggen möchte. Auch der alte
<ref chapter="syslog">syslog</ref> hat eine einfache Filtersprache, um
Logausgaben in verschiedene Logdateien zu schreiben.
    </textblock>

    <textblock>
Mit <command>syslog-ng</command> kann man wesentlich erweitert und verfeinert filtern.
    </textblock>

    <textblock>
Ein typisches Filterobjekt könnte so definiert werden:
    </textblock>

    <file>
     <content>
filter f_cnews { level(notice, err, crit) and facility(news); };
     </content>
    </file>

    <textblock>
Hier werden alle Meldungen durchgelassen, die vom Level oder der Priority auf
notice, err oder crit stehen und die die Facility news haben.
    </textblock>

    <textblock>
Filterfunktionen lassen sich mit and, or, not verknüpfen und auch klammern.
Somit kann man sehr leistungsfähige Filterkonstrukte erstellen.
    </textblock>

    <textblock>
Wer nicht genau weiß, wie and, or, not aufgelöst werden, sollte besser einmal
zuviel klammern, als sich später zu wundern, warum was merkwürdiges bei heraus
kommt. Das hilft auch anderen, die die Konfiguration verstehen wollen und auch
nicht so genau bescheid wissen. Kurz gesagt bindet and mehr als or mehr als
not. Ganz ähnlich wie Punktrechnung vor Strichrechnung kommt. a or b and c ist
was anderes wie (a or b) and c.
    </textblock>

    <textblock>
Folgende Filterfunktionen gibt es:
    </textblock>

    <ul>
     <li>
<strong>facility(facility1,facility2,...)</strong><br/>
Lass alle Messages durch, die dieser Facility entsprechen.
     </li>
     <li>
<strong>level(prio1, prio2,...) (oder synonym priority())</strong><br/>
Lass alle Messages durch, die der angegebenen Priorität/Level
entsprechen.
     </li>
     <li>
<strong>program(regexp)</strong><br/>
Alle Meldungen, die vom Programm kommen, worauf regexp passt, werden
durchgelassen. Hierbei ist regexp ein <ref chapter="regex">regulärer Ausdruck</ref>.
Hat man Whitespaces im Programmnamen, sollte man den Ausdruck zwischen doppelte
Anführungsstriche setzen.
     </li>
     <li>
<strong>host(regexp)</strong><br/>
Filterung nach Host, woher die Message kommt, ebenfalls regulärer
Ausdruck. Ein Tipp, wenn du nichts von regulären Ausdrücken verstehst:
Nimm einfach den Hostnamen, z. B. so: host(myhost). Genau genommen
müsstest du host("^myhost$") schreiben.
     </li>
     <li>
<strong>match(regexp)</strong><br/>
Dies lässt nur Meldungen durch, wo die eigentliche Message auf dieses
Muster passt. Dies ist ein sehr leistungsfähiger Mechanismus, lassen sich
doch so ganz gezielt Meldungen herausfischen. Es gibt fast nichts, was
man nicht mit regulären Ausdrücken erschlagen könnte.
     </li>
     <li>
<strong>filter(filter_name)</strong><br/>
Um kompliziertere Filterregeln zu erstellen, kann man mehrere Filter zu
einem neuen Filterkonstrukt zusammenfügen. Hiermit kann man also andere
Filter in einem neuen Filter aufrufen. Damit kann man verschachtelte
Filterkonstrukte erstellen. Es ist oft auch für die Lesbarkeit besser,
zuerst mehrere Teilfilter zu definieren, die man dann in einer weiteren
Filterregel zusammenfügt.
     </li>
    </ul>

    <textblock>
Mach keine Meisterschaft daraus, möglichst komplizierte Konfigurationen zu
produzieren. Durch komplizierte Filterregeln kann man das hier durchaus
schaffen. Das zeigt zwar deine intellektuellen Fähigkeiten, produziert aber
schwer wartbare Konfig-Dateien. Mach es so einfach wie möglich, andere werden
es dir danken.
    </textblock>
   </section>

   <section>
    <heading>
Das log Objekt
    </heading>

    <textblock>
Alle bisherigen Objekte waren Vorarbeiten, um jetzt Zeilen zu generieren, die
wirklich Aktionen auslösen. Denn ohne die log-Objekte würde gar nichts
passieren. Die anderen Objekte sind nur Daten-Definitionen. Die log-Objekte
führen das eigentliche Logging aus, in dem sie die zuvor definierte Source-,
Destination- und Filter-Objekte zu einer Log-Aktion verbinden. Eine typische
Zeile sieht so aus:
    </textblock>

    <file>
     <content>
log { source(src); filter(f_syslog); destination(syslog); };
     </content>
    </file>

    <textblock>
Es wird hier also vom Source src gelesen, diese Messages durch den filter
<strong>f_syslog</strong> geschickt und dann zum Ziel
<strong>syslog</strong> geschrieben.
    </textblock>

    <textblock>
Mehrere Sourcen bindet man mit mehreren <strong>source()</strong>-Statements ein.
    </textblock>

    <file>
     <content>
log { source(src); source(src1); filter(f_syslog); destination(syslog); };
     </content>
    </file>

    <textblock>
Mehrere Filter und sogar mehrere Ziele lassen sich nach gleichem Schema
einbinden.
    </textblock>

    <textblock>
Hinter <strong>destination()</strong> lässt sich auch noch
<strong>flags()</strong> angeben, mit dem man erweitere Funktionalitäten
festlegen kann.
    </textblock>
   </section>
  </section>
 </split>

 <split>
  <section>
   <heading>
Beispieldatei
   </heading>

   <textblock>
Hier ist ein Beispiel einer kompletten Konfig-Datei, wie ich sie unter
<ref lang="de" url="http://www.debian.org/">Debian Woody</ref> verwende.
Die Kernel-Messages hole ich hier direkt ohne den <command>klogd</command>.
Dieser darf also nicht gestartet sein. Es gibt unter
<ref lang="de" url="http://www.debian.org/">Debian Woody</ref> noch einige
Probleme im Zusammenspiel <command>klogd</command>/<command>syslog-ng</command>.
   </textblock>

   <file>
    <content>
#
# Syslog-ng configuration file, compatible with default Debian syslogd
# installation. Originally written by anonymous (I can't find his name)
# Revised, and rewrited by me (SZALAY Attila sasa@debian.org)

# First, set some global options.
options { long_hostnames(off); sync(0); stats(3600); };

#
# This is the default behavior of sysklogd package
# Logs may come from unix stream, but not from another machine.
#
source src { unix-stream("/dev/log"); internal(); file("/proc/kmsg"); };

#
# If you wish to get logs from remote machine you should uncomment
# this and comment the above source line.
#
# source src { unix-dgram("/dev/log"); internal(); udp(); };


# After that set destinations.

# First some standard logfile
#
destination authlog { file("/var/log/auth.log" owner("root")
                      group("adm") perm(0640)); };
destination syslog  { file("/var/log/syslog" owner("root")
                      group("adm") perm(0640)); };
destination cron    { file("/var/log/cron.log" owner("root")
                      group("adm") perm(0640)); };
destination daemon  { file("/var/log/daemon.log" owner("root")
                      group("adm") perm(0640)); };
destination kern    { file("/var/log/kern.log" owner("root")
                      group("adm") perm(0640)); };
destination lpr     { file("/var/log/lpr.log" owner("root")
                      group("adm") perm(0640)); };
destination mail    { file("/var/log/mail.log" owner("root")
                      group("adm") perm(0640)); };
destination user    { file("/var/log/user.log" owner("root")
                      group("adm") perm(0640)); };
destination uucp    { file("/var/log/uucp.log" owner("root")
                      group("adm") perm(0640)); };


# This files are the log come from the mail subsystem.
#
destination mailinfo { file("/var/log/mail.info" owner("root")
                       group("adm") perm(0640)); };
destination mailwarn { file("/var/log/mail.warn" owner("root")
                       group("adm") perm(0640)); };
destination mailerr  { file("/var/log/mail.err" owner("root")
                       group("adm") perm(0640)); };

# Logging for INN news system
#
destination newscrit   { file("/var/log/news/news.crit" owner("root")
                         group("adm") perm(0640)); };
destination newserr    { file("/var/log/news/news.err" owner("root")
                         group("adm") perm(0640)); };
destination newsnotice { file("/var/log/news/news.notice" owner("root")
                         group("adm") perm(0640)); };

# Some `catch-all' logfiles.
#
destination debug      { file("/var/log/debug" owner("root")
                         group("adm") perm(0640)); };
destination messages   { file("/var/log/messages" owner("root")
                         group("adm") perm(0640)); };


# The root's console.
#
destination console { usertty("root"); };

# Virtual console.
#
destination console_all { file("/dev/tty8"); };

# The named pipe /dev/xconsole is for the nsole' utility.  To use it,
# you must invoke nsole' with the -file' option:
#
#    # xconsole -file /dev/xconsole [...]
#
destination xconsole { pipe("/dev/xconsole"); };

destination ppp { file("/var/log/ppp.log" owner("root")
                  group("adm") perm(0640)); };

# Here's come the filter options. With this rules, we can set which
# message go where.

filter f_authpriv  { facility(auth, authpriv); };
filter f_syslog    { not facility(auth, authpriv); };
filter f_cron      { facility(cron); };
filter f_daemon    { facility(daemon); };
filter f_kern      { facility(kern); };
filter f_lpr       { facility(lpr); };
filter f_mail      { facility(mail); };
filter f_user      { facility(user); };
filter f_uucp      { facility(uucp); };

filter f_news      { facility(news); };

filter f_debug     { level(debug) and not
                     facility(auth, authpriv, mail, news); };
filter f_messages  { level(info .. warn) and not
                     facility(auth, authpriv, cron, daemon, mail, news); };
filter f_emergency { level(emerg); };

filter f_info      { level(info); };
filter f_notice    { level(notice); };
filter f_warn      { level(warn); };
filter f_crit      { level(crit); };
filter f_err       { level(err); };

filter f_cnews     { level(notice, err, crit) and facility(news); };
filter f_cother    { level(debug, info, notice, warn) or
                     facility(daemon, mail); };

filter ppp         { facility(local2); };


log { source(src); filter(f_authpriv); destination(authlog); };
log { source(src); filter(f_syslog); destination(syslog); };
#log { source(src); filter(f_cron); destination(cron); };
log { source(src); filter(f_daemon); destination(daemon); };
log { source(src); filter(f_kern); destination(kern); };
log { source(src); filter(f_lpr); destination(lpr); };
log { source(src); filter(f_mail); destination(mail); };
log { source(src); filter(f_user); destination(user); };
log { source(src); filter(f_uucp); destination(uucp); };
log { source(src); filter(f_mail); filter(f_info);
      destination(mailinfo); };
log { source(src); filter(f_mail); filter(f_warn);
      destination(mailwarn); };
log { source(src); filter(f_mail); filter(f_err);
      destination(mailerr); };
log { source(src); filter(f_news); filter(f_crit);
      destination(newscrit); };
log { source(src); filter(f_news); filter(f_err);
      destination(newserr); };
log { source(src); filter(f_news); filter(f_notice);
      destination(newsnotice); };
log { source(src); filter(f_debug); destination(debug); };
log { source(src); filter(f_messages); destination(messages); };
log { source(src); filter(f_emergency); destination(console); };

#log { source(src); filter(f_cnews); destination(console_all); };
#log { source(src); filter(f_cother); destination(console_all); };


log { source(src); filter(f_cnews); destination(xconsole); };
log { source(src); filter(f_cother); destination(xconsole); };

log { source(src); filter(ppp); destination(ppp); };
    </content>
   </file>
  </section>
 </split>

 <split>
  <section>
   <heading>
Probleme und Offenes
   </heading>

   <section>
    <heading>
Zusammenspiel klogd und syslog-ng
    </heading>

    <textblock>
Es gibt ein paar Probleme im Zusammenspiel des <command>klogd</command> mit
<command>syslog-ng</command>. Unter <ref lang="de"
url="http://www.debian.org/">Debian Woody</ref> reicht der
<command>klogd</command> nur Meldungen korrekt weiter, wenn unter
<command>syslog-ng</command> die Methode
<strong>unix-dgram("/dev/log")</strong> anstatt
<strong>unix-stream("/dev/log")</strong> im Source
Objekt verwendet wird. Auch gibt es Probleme, wenn
<command>syslog-ng</command> neu gestartet
wird, ohne gleichzeitig klogd neu zu starten. Der Datenaustausch von
<command>klogd</command> an <command>syslog-ng</command> funktioniert dann
nicht mehr korrekt.
    </textblock>

    <textblock>
Einige Distributionen sind deshalb dazu übergegangen, entweder
den <command>klogd</command> nicht zu verwenden oder aber im
<command>syslog-ng</command> Init-skript sowohl <command>syslog-ng</command>
wie auch <command>klogd</command> zu starten und zu stoppen. Dadurch werden
beide Daemons immer korrekt im Tandem hoch- und runtergefahren. Evtl. sollte
man 1 Sekunde nach Start des <command>syslog-ng</command> warten, bevor man
<command>klogd</command> startet.
    </textblock>

    <textblock>
Loggt man ohne <command>klogd</command>, fehlt der Prefix
<strong>kernel:</strong> im Logfile, den <command>klogd</command> normal
hinzufügt. Modernere Versionen von <command>syslog-ng</command> haben hierfür
einen zusätzlichen Befehl, um diesen Prefix selber zu generieren. In einer
Source-Zeile könnte dann z. B. stehen:
    </textblock>

    <file>
     <content>
 pipe("/proc/kmsg" log_prefix("kernel: ")).
     </content>
    </file>

    <textblock>
Unter <ref lang="de" url="http://www.debian.org/">Debian Woody</ref> sollte man
also einfach ohne <command>klogd</command> arbeiten oder aber die Init-Skripte
anpassen.
    </textblock>
   </section>

   <section>
    <heading>
Referenzen
    </heading>

    <ul>
     <li>
<ref lang="en" url="http://www.balabit.com/products/syslog_ng/">http://www.balabit.com/products/syslog_ng/</ref>
     </li>
     <li>
Referenz Manual im Source-tar (1.5.15) unter doc/sgml/syslog-ng.txt
     </li>
     <li>
<ref lang="de" url="http://home.datacomm.ch/prutishauser/texte/syslog-ng-de.txt">http://home.datacomm.ch/prutishauser/texte/syslog-ng-de.txt</ref>
     </li>
     <li>
Beispiele im Source-tar (1.5.15) unter contrib/syslog-ng.conf.*
     </li>
     <li>
Beispiele im Source-tar (1.5.15) unter doc/syslog-ng.conf.*
     </li>
     <li>
<ref lang="de" url="http://www.linux-magazin.de/Artikel/ausgabe/2003/11/tagebuch/tagebuch.html">http://www.linux-magazin.de/Artikel/ausgabe/2003/11/tagebuch/tagebuch.html</ref>
     </li>
     <li>
man syslog-ng
     </li>
     <li>
man syslog (lohnt sich, weil viele Standards und Definitionen von
<ref chapter="syslog">syslog</ref> auf <command>syslog-ng</command> übernommen
wurden.)
     </li>
     <li>
man grep (Beschreibung <ref chapter="regex">reguläre Ausdrücke</ref> (regexp))
     </li>
    </ul>
   </section>
  </section>
 </split>
</chapter>
