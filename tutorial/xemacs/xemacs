\documentclass[10pt,a4paper,DIV15,titlepage,headsepline,footsepline,bibtotoc,idxtotoc]{scrbook}

%% PLEASE NOTE, that the following lines to detect whether we are
%% running as pdflatex or latex are error prone!  I only use them
%% because my LaTeX-installation does not contain ifpdf.sty!
%% BITTE BEACHTET, das die folgenden Zeilen anfaellig fuer Fehler
%% sind.  Die aktuelle und richtige Loesung waere die Verwendung des
%% Pakets ifpdf.sty, das mir jedoch derzeit nicht zur Verfuegung
%% steht.
\newif\ifpdf \ifx\pdfoutput\undefined
\pdffalse % we are not running pdflatex
\else
\pdfoutput=1 % we are running pdflatex
\pdfcompresslevel=9 % compression level for text and image;
\pdftrue
\fi

\usepackage[latin1]{inputenc}
\usepackage[T1]{fontenc}
\usepackage{textcomp}
\usepackage{ngerman}
\usepackage{fancyhdr}
\usepackage{makeidx}
\usepackage{verbatim}
\makeindex
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%                       VERBATIM
\makeatletter
\def\verbatim@font{\normalfont\ttfamily\footnotesize
                   \hyphenchar\font\m@ne
                   \let\do\do@noligs
                   \verbatim@nolig@list}
\makeatother
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%                       TEX4HT
%% LaTeX to HTML
%% http://www.cis.ohio-state.edu/~gurari/TeX4ht/
%% einkommentieren und mit 'htlatex ...tex' TeXen
%% \usepackage[html,sections+,3,png]{tex4ht}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%                       FONTS
\font\fc=cmss10   scaled 800
\font\ft=phvr8r   scaled 800


%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%                     HEADER/FOOTER
\pagestyle{fancy}
\fancyhead[LO,RE]{\slshape \leftmark}
\fancyhead[LE,RO]{\slshape \rightmark}
\fancyhead[C]{}
\fancyfoot[LE,RO]{\bfseries \thepage}
\fancyfoot[LO,RE]{\small\slshape XEmacs auf Deutsch}
\fancyfoot[C]{}
\renewcommand{\headrulewidth}{0.4pt}
\renewcommand{\footrulewidth}{0.4pt}
% meine screenshots sind ziemlich gross, daher:
\renewcommand{\floatpagefraction}{.7}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%                 PDF or not to PDF
\ifpdf
%\makeatletter
%\@twosidefalse
%\makeatother
% die naechsten drei zeilen sind die empfohlene ersetzung fuer
% times.sty
\usepackage{mathptmx}
\usepackage[scaled=.90]{helvet}
\usepackage{courier}
\usepackage{thumbpdf}
\usepackage[pdftex,xdvi]{graphicx}
\usepackage[pdftex,colorlinks=true,backref]{hyperref}
\usepackage[pdftex]{color}
\else
\usepackage{graphicx}
\usepackage[colorlinks=false,backref]{hyperref}
\fi

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%                  META INFORMATION
\newcommand{\version}{2.04}
\author{Stefan Kamphausen}
\subject{
  \begin{center}
    \includegraphics[width=0.66\textwidth]{xemacs-plain}
  \end{center}
Version -- \version}
\title{XEmacs auf Deutsch}
\titlehead{%
  \begin{minipage}[b]{0.4\textwidth}
    Eine pragmaprogrammatische Einleitung mit vielen Beispielen und
    bunten Bildern in etwas mehr als nur einen Texteditor.
    \href{http://www.skamphausen.de/xemacs}
    {\nolinkurl{http://www.skamphausen.de/xemacs}}
  \end{minipage}
  }

\lowertitleback{%
  Copyright \copyright\ 2000-2004 Stefan Kamphausen\\[2ex]
    
  Gesetzt, getippt und gestaltet mit Freier Software (\LaTeX,
  XEmacs und Gimp).\\[2ex]

  Permission is granted to copy, distribute and or modify this
  document under the terms of the GNU Free Documentation
  License, Version 1.1 or any later version published by the
  Free Software Foundation; with no Invariant Sections,
  with no Front-Cover Texts, and with no Back-Cover
  Texts. A copy of the license can be obtained from \cite{fdl}.
}


%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\newbox\mybox%
\newcount\len%
\newcount\halflen%
\newcommand{\key}[1] {\texttt{%
\setbox\mybox=%
\hbox{\footnotesize #1}%
\len=\wd\mybox%
\advance\len by 370000%
\halflen=\len%
\divide \halflen by 2%
\unitlength1sp%
\begin{picture}(\len,600000)(0, 140000)%
\put(\halflen, 300000){\oval(\len, 600000)}%
\put(185000, 140000){\unhbox\mybox}%
\end{picture}}\index{Tastatureingabe!#1}}

\newcommand{\mx}[1]{\key{M-x} \texttt{#1}\index{M-x\ldots!#1}%
  \index{Tastatureingabe!M-x #1}}
\newcommand{\cx}[1]{\key{C-x} \key{#1}\index{C-x\ldots!#1}%
  \index{Tastatureingabe!C-x #1}}
\newcommand{\cc}[1]{\key{C-c} \key{#1}\index{C-c\ldots!#1}%
  \index{Tastatureingabe!C-c #1}}
\newcommand{\ch}[1]{\key{C-h} \key{#1}\index{C-h\ldots!#1}%
  \index{Tastatureingabe!C-h #1}}
\newcommand{\script}[1]{{\scshape#1}}
\newcommand{\file}[1]{{\ttfamily\small#1}}
\newcommand{\variable}[1]{{\ttfamily\small#1}\index{Variablen!#1}}
\newcommand{\package}[1]{{\sffamily#1}\index{Pakete!#1}}
\newcommand{\programm}[1]{{\ttfamily#1}\index{Programme!#1}}
\newcommand{\buffer}[1]{{\ttfamily#1}\index{Spezielle Buffer!#1}}
\newcommand{\command}[1]{{\ttfamily#1}\index{Funktionen!#1}}


\hyphenation{XEmacs}
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\begin{document}
\maketitle

\tableofcontents
%\listoffigures
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\chapter{Vorneweg}
\label{cha:vorneweg}
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\section{Er war's, er war's -- Ich war's, ich war's}
\label{sec:ich-wars}
Lasst mich ganz zu Beginn eine wichtige Sache loswerden.
Verantwortlich für den ganzen Kram hier bin \emph{ich}, Stefan, und
alles, was ich hier so wiedergebe, funktioniert für mich auf meinen
Systemen. 

Wenn es bei der Verwendung der hier dargebotenen Code-Kunststückchen
zu irgendwelchen Problemen kommt, stürmt bitte nicht gleich zu den
jeweiligen Newsgroups oder (noch schlimmer) direkt zu den
Entwicklern.  Ich muss zumindest so weit Verantwortung übernehmen,
dass ich eventuell überholten oder schlicht falschen Informationen und
Beispielen hier selber nachgehen muss.  Also: schickt erstmal eine
EMail an mich.

Dazu auch gleich noch: ich setze nur ein einziges Betriebssytem ein:
Linux (ich habe Erfahrungen mit SuSE, RedHat und Gentoo).  Fragen nach
der Anwendbarkeit und Konfiguration auf anderen Systemen kann ich
nicht beantworten.  Ich nehme aber gerne entsprechende Kapitel hier
mit auf, wenn sie jemand bereitstellt und dafür auch gerade steht.
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\section{Er war's, er war's -- Du warst's, du warst's}
\label{sec:du-warsts}
Nur für die Leser, die es nicht ohnehin als selbstverständlich ansehen
\ldots

Jeglicher Code und jegliche Anleitung hier wird ohne Verantwortung
oder Sicherheit für die Datenintegrität auf Seiten des Lesers
abgegeben.  Jeder Anweder und jede Anwenderin ist ganz alleine selber
dafür verantwortlich, dass seine/ihre Dateien keinen Schaden nehmen,
er/sie keine Mails verliert oder sonstwie inhaltlichen Schaden davon
trägt.  Wer das nicht einsieht oder versteht, sollte am Ende dieses
Satzes aufhören zu lesen und das Thema XEmacs einfach ganz schnell
vergessen.

So, und jetzt kann es losgehen.

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\chapter{\texttt{xemacs \&}}
\label{cha:intro}
Der Titel diese Kapitels zeigt eine folgenschwere Eingabezeile in
einer Shell.  Die Eingabe des Befehls \texttt{xemacs \&} startet (im
Hintergrund) einen XEmacs und damit eine Maschinerie, die
ihresgleichen sucht\footnote{OK, ihresgleichen ist leicht gefunden:
  der GNU Emacs, der Vater und Bruder des XEmcas zugleich ist. Im hier
  vorliegenden Schriftstück wenden wir uns jedoch dem XEmacs zu,
  wenngleich Vieles in gleicher oder ähnlicher Form auch auf den GNU
  Emacs angewandt werden kann.  Die Trennung der beiden Emacsen bildet
  in der Geschichte eine der unschönen und nicht positiven Trennungen
  im Bereich der freien Software.  Vielleicht sogar die bekannteste
  dieser blöden Trennungen, die vermutlich positivste und damit das
  Gegenstück dürfte die Zwischenzeitliche Trennung und spätere
  Wiedervereinigung mit deutlichen Vorteilen des GCC sein.  Aber das
  hier ist ja kein Buch über die Geschichte der Freien Software.}  Das
Ergebnis (sofern nicht bereits irgendwelche Konfigurationen
vorgenommen wurden) sieht so aus, wie auf dem Titelblatt dieser
Dokumentation.

Der XEmacs ist im Kern eigentlich ein LISP-Interpreter und eine
Anzeige-Maschine, die einige wenige grundlegende
Texteditor-Funktionalitäten liefert.  Es mag nicht weiter verwundern,
dass es eine solche grundlegende Funktion gibt, die bei Drücken der
\key{Q}-Taste den Buchstaben "`Q"' an aktueller Position einfügt,
dass jedoch die Funktion zum Springen in die nächste Zeile
\emph{nicht} zu diesen Grundfunktionen zählt sollte schon ein wenig
verwundern.  Die Erklärung ist einfach die, dass diese Funktion in
LISP, genauer in Emacs Lisp \emph{Elisp} (noch genauer in der
XEmacs-Version von Elisp) geschrieben ist.

Und eben das zeichnet den XEmacs aus.  Möglichst viele Funktion sollen
in ELisp realisiert werden.  Das ergibt eine Flexibilität, die sich
dem angehenden XEmacs-Adepten noch nicht erschließt, auf die der alte
Guru aber unter keinen Umständen jemals wieder verzichten mag.

Aus diesem Grunde an dieser Stelle ein ernstzunehmende Warnung:  Hat
man einmal den nicht ganz einfachen Einstieg genommen, wird sich so
ziemliche jede andere Komponente, die ein Editieren von Text zulässt
(Formulare in Browsern, spezialisierte IDEs für diverse
Programmiersprachen, EMail-Programme o.\,ä.) mickrig bis unterträglich
anfühlen. 

In der vorliegenden Dokumentation wollen wir uns den XEmacs einmal
genauer anschauen und im Vorbeigehen noch einiges über Lisp lernen. 

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\section{Die Maschine läuft an}
\label{sec:xemacs-start}\index{Startablauf}
%
Zu Beginn nehmen wir jedoch den Start des XEmacs mal etwas genauer
unter die Lupe.  Der Kern des XEmacs ist in C geschrieben und somit
für den unbedarften Anwender eher uninteressant.  Das macht aber auch
nichts weiter, denn wir werden damit nicht großartig in Berührung
kommen.  Es soll reichen, zu wissen, dass dieser Kern am Anfang, also
direkt nach dem Abfeuern obiger Kommandozeile gestartet wird und sich
ganz viele Systembibliotheken einliest.  Dieser Kern ist es auch, der
auf verschiedene Architekturen, wie Linux, BSD oder auch Microsoft
Windows, portiert werden muss -- ein weiterer Grund dafür, ihn
möglichst schmal zu halten.

Nachdem sich der XEmacs in unserem Betriebssystem häuslich
eingerichtet und einen scharfen Blick auf seine Umgebung und einige
dort vorkommende Programme, Bibliotheken und andere Resourcen geworfen
hat, startet als nächstes die ELisp-Maschinerie, und schaut sich
ihrerseits im System um.  Sie findet all die Sachen, die sie verwenden
könnte, wenn es drauf ankommt und lädt die grundlegenden Funktionen
ein.  Sozusagen die \emph{nicht ganz so grundlegenden Funktionen},
oder auch die \emph{grundlegenden Funktionen 2}.

Der erste Zugriffspunkt für uns ist die Datei
\file{XEM/\-site-packages/\-lisp/\-site-start\-.el}. \footnote{Ich
  verwende hier \texttt{XEM} als Abkürzung für das Basis-Verzeichnis,
  in dem der XEmacs installiert wurde.  Üblicherweise wird das sowas
  sein wie \file{/usr/\-share/\-xemacs/\-21.4.4}.}.  Dort wird ein
Systemadministrator all die Einstellungen vornehmen, die er gerne
allen Anwendern auf dem System als Voreinstellung anbieten möchte.

Wer diese Datei nun ändert, wird sich vermutlich beim nächsten
Systemstart wundern, dass die Änderungen gar nicht aufgetaucht sind.
Dass liegt vermutlich daran,  dass es eine Datei fast gleichen Namens,
nur mit der Endung \file{.elc} gibt.   Eine solche Datei ist eine
kompilierte Lisp-Datei, die einfach etwas schneller geladen werden
kann.  Wann immer eine solche Datei vorliegt, wird XEmacs sie beim
Laden vorziehen.  Wie solche erstellt werden, beschreibt
Abschnitt~\ref{sec:bytecompile}.  

Im darauffolgenden Schritt der Initialisierung kommt der große Moment,
auf den der versierte XEmacs-Anwender gewartet hat: die
Benutzer-eigene Initialisierungs-Datei
\file{\$HOME/\-.xemacs/\-init.el} wird geladen!\footnote{Eigentlich
  ist es ja schade, dass es nicht mehr die sagenumwobene
  \file{\$HOME/.emacs} ist, weil damit solche Sprüche wie ``HOME is
  where .emacs is'' zumindest für XEmacser nicht mehr angebracht sind.
  Da aber in der Vergangenheit die \texttt{Dotemacs} doch oftmals nur
  noch zum Unterscheiden der beiden großen Emacs-Versionen und
  entsprechendem Nachladen separater Initialisierungsdateien diente,
  ist der Schritt nur konsequent.}

Dieses ist der wohl wichtigste Punkt beim Starten des XEmacs, denn ab
dieser Stelle kann jeder Anwender seine eigenen Definitionen
vornehmen.  Wie das genau geht, erklärt Abschnitt
\ref{cha:konfiguration}. 

In einer weiteren Phase der Anwender-spezifischen Einrichtung wird das
Customize-System mit seinen Einstellungen geladen (siehe Abschnitt
\ref{sec:customize}).

Abschließend wird noch eine weitere System-Datei geladen, mit der der
Administrator nach belieben einige Einstellungen vornehmen kann, die
nach dem Laden der Anwender-spezifischen Dateien in Kraft treten:
\file{XEM/lisp/default.el} Es solle sich jedoch kein Administrator der
irrigen Annahme hingeben, auf diesem Wege Einstellungen erzwingen zu
können, da jeder User das Laden dieser Datei unterdrücken kann.

Und kurz danach steht der XEmacs dem Anwender voll zur Verfügung.  Es
ist Voreinstellung, dass jetzt zunächst ein Hilfe-Fenster mit den
wichtigsten Details eingeblendet wird, das beim ersten Tastendruck
verschwindet und durch den \buffer{*scratch*}-Buffer ersetzt wird.

Dieser Buffer ist jedoch nicht als echtes Text-Dokument gedacht (wie
ja auch ein kleiner Hinweis ganz oben erläutert), sondern für kurze
Notizen und zum Evaluieren von Lisp-Code.

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\section{C-x C-c}
\label{sec:kill-emacs}\index{Beenden}
Die vielleicht wichtigste Aktion nach dem Starten ist das Beenden des
Programms.  Da der Emacs entworfen und programmiert wurde, als es
heute gängige Programme und Systeme noch lange nicht gab, hält er sich
schlicht und ergreifend nicht an die Schemata, die durch solche
gängigen Programme eingeführt und verbreitet wurden.  Und beim
Versuch, das Programm zu beenden, kann man dieses auch gleich spüren:
das verbreitete \key{C-q}, also das Drücken der \key{Control} oder
auch \key{Strg}-Taste zusammen mit \key{q} bewirkt jedenfalls nicht
das gewünschte.  Stattdessen erzielt man das Programmende mit
\cx{C-c}, oder etwas ausführlicher: \mx{kill-emacs}.

So ganz im Vorbeigehen haben wir dabei auch gleich die typische
Schreibweise für XEmacs-Tastatur-Sequenzen
kennengelernt\index{Tasten!Schreibweise}.  Dabei steht ein \key{C-}
immer für das gleichzeitige Drücken der Steuerungstaste und ein
\key{M-} für die Meta-Taste.  Nun habe die wenigsten Tastaturen eine
echte Meta-Taste eingebaut\footnote{Ich kenne die eigentlich nur von
  Rechnern von SUN}, und dort wird üblicherweise die \key{Alt}-Taste
diese Funktion übernehmen.  Ist das einmal nicht der Fall, kann man
sich immer noch durch Drücken von \key{Esc} und drauf folgendem
Drücken der Folgetasten helfen.
 
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\section{Buffer, Windows, Frames}
\label{sec:nomen}
Wie bereits erwähnt, gilt für XEmacs vieles, was heute Standard ist,
\emph{nicht}.  So ist ein XEmacs-\-\emph{Window} nicht das, was man
sich gemeinhin unter einem "`Window"' vorstellt.  Daher wollen wir uns
kurz einen Überblick über die in diesem Bereich gängige Nomenklatur
verschaffen und en passant auch gleich noch einige wichtige
Tastenkürzel dabei kennenlernen.

\begin{figure}
  \begin{center}
    \includegraphics[width=0.8\textwidth]{frame}
    \caption{Ein XEmacs-Frame (das ganze Fenster) mit einigen
      markierten Bereichen:  \emph{Gelb:} die Menubar, \emph{lila:}
      Toolbar, \emph{rot:} drei Windows, teilweise durch horizontale,
      teilweise durch vertikale Teilung entstanden, \emph{grün} die zu
      den Windows gehörenden Modelines sowie \emph{blau:} die im
      Moment als Echo-Area agierende letzte Zeile (nur eine Ausgabe),
      die aber auch als Minibuffer zu Eingaben auffordert.}
    \label{fig:frame}
  \end{center}
\end{figure}

Zur Verdeutlichung kann die Abbildung~\ref{fig:frame} herangezogen
werden, die einige Elemente beschreibt. 

\begin{description}
\item[Frame]\index{Frame} Ein Frame ist ein XEmacs-Fenster, also das,
  was woanders meist Fenster/Window heißt.  Zu einem einzelnen
  XEmacs-Prozess können viele Frames gehören, die sich mit \key{C-x}
  \key{5} \key{2} erstellen und mit \key{C-x} \key{5} \key{0} wieder
  schließen lassen.  Ein Frame hat keinerlei Einfluss darauf, welche
  Dateien im XEmacs gerade geöffnet sind, aber ein Frame kann eine
  gruppierende Wirkung haben.  Auch gelten manche Einstellungen immer
  Frame-spezifisch, wie z.\,B.\ das Vorhanden sein einer Menu-Leiste.
  Es soll hier darauf verzichtet werden, \emph{Frame} in irgendeiner
  Form einzudeutschen auf \emph{Rahmen} oder etwas ähnliches.  Wir
  wollen es ja nicht zu weit treiben.
\item[Window]\index{Window} Wenn ein Frame ein Window ist, was ist
  dann ein Window?  Im XEmacsjargon bezeichnet ein Window
  gewissermaßen ein Unterfenster.  Jeder Frame kann mit der Eingabe
  \cx{2} bzw.\ \cx{3} horizontal oder vertikal gesplittet werden.  Die
  so entstandenen einzelnen Bereiche sind zwei (oder mehr) Windows.
  Bei manchen Gelegenheiten entstehen solche Windows ganz automatisch,
  z.\,B.\ wenn eine Vervollständigung aufpöppt\footnote{Ich finde
    "`aufpöppen"' ist eine prima Übersetzung des englischen
    \emph{pop-up.}}, oder wenn eine Hilfe angezeigt wird.  Es ist gut,
  zu wissen, dass man das Fenster, in dem man sich gerade befindet mit
  \cx{0} wieder los wird, oder aber mit \cx{1} zum einzig
  abendfüllenden Window macht.
\item[Buffer]\index{Buffer} Ein Buffer nun bezeichnet das Konzept, mit
  dem der XEmacs seine Daten präsentiert.  In den allermeisten Fällen
  wird ein Buffer eine Datei enthalten, und auch entsprechend benamt
  sein.  Es gibt aber durchaus auch andere Buffer, wie die Buffer, die
  in den bereits erwähnten Vervollständigungswindows angezeigt
  werden.  Jeder Text, jeder Prozess, jedes Wasauchimmer erhält einen
  eigenen Buffer.  Der Buffer ist das zentrale Konzept im XEmacs.  Für
  Programmierer geht das sogar soweit, dass es manche Funktion gibt,
  Text in einem Buffer zu bearbeiten, die man für Text in reiner
  String-Form nicht hat.

  Zugriff auf die Buffer-Liste liefern unter anderem das Buffer-Menu
  in der Menu-Leiste, aber auch die Eingabe \cx{C-b}
\item[Menu-Leiste]\index{Menu} Nicht ganz überraschend weil
  überraschend standardkonform ist die Menu-Leiste am oberen Rand des
  Frames.  Sie verändert sich oft in Abhängigkeit vom Inhalt des
  aktuellen Buffers und kann spezifische Menus enthalten.  Wer gerade
  mal viel Zeit hat, kann hier einfach durchstöbern und sich
  inspirieren lassen, was es nicht alles so gibt.  Freundlicherweise
  werden Tastenkürzel --so definiert-- mit angezeigt.  Ein Fass ohne
  Boden ist das Customizemenu.
\item[Toolbar]\index{Toolbar} Auch im XEmacs findet sich eine Leiste
  mit grafischen Knöpfchen, die den schnellen Zugriff auf einzelne
  Funktionen liefern soll.  Für die meisten langjährigen Benutzer ist
  die wichtigste Eigenschaft der Toolbar, dass man sie auch loswerden
  kann ;-)

  Andererseits verwenden Applikationen wie VM oder Gnus die Toolbar
  ganz gezielt, und da kann es durchaus angenehm sein, sie
  vorzufinden. 

  Im Vergleich zu anderen Programmen, die eher GUI-orientiert sind,
  wirkt die Toolbar auch wirklich ein wenig altbacken.  Es gilt ja
  heutzutage\footnote{Im Jahre 2004} bereits als unfein und
  hemmungslos überholt, wenn die Toolbarelemente noch 3D-Effekte
  aufweisen. 
\item[Modeline]\index{Modeline} Das ist nun wieder eine Eigenart des
  XEmacs.  Am unteren Rand jedes Windows findet sich ein einzeiliges
  Display, das uns mit einer Übersicht über aktuelle Einstellungen und
  Eigenschaften des angezeigten Buffers versorgt.  Hier finden sich
  nicht nur der Name des Buffers und Informationen über den
  Änderungszustand oder das Codier-Schema, auch die Zeilen- und
  Spaltennummern und eine Liste der aktivierten Modi werden
  angezeigt\footnote{Es sollte an dieser Stelle wohl erwähnt werden,
    dass die Zeilen- und Spaltennummern kein Standard sind, man muss
    sie erst mit \mx{line-number-mode} bzw.\ \mx{column-number-mode}
    einschalten.  Aber da passt die Information doch gut hin, oder?}.

  Ziehen mit der Maus kann ein Window ößern oder verkleinern.
\item[Minibuffer]\index{Minibuffer} Die allerletzte Zeile, ganz am
  unteren Rand, wenn man gerade eine Eingabe machen soll.  Jeglicher
  Prompt, sofern der Befehl mit einer Tastatur-Eingabe bewirkt wurde,
  wird dort erledigt.  Beispielsweise, wenn man \cx{C-f} verwendet, um
  eine Datei zum Bearbeiten zu öffnen.  Ruft man jedoch via Maus einen
  Dialog zum Dateiöffnen auf, wird auch ein Maus-Fenster verwendet.
  Ebenfalls im Minibuffer stehen auch die bisher gedrückten Tasten
  (nach einer kurzen Verzögerung), wenn man eine längere
  Tastatur-Sequenz eingibt.

  Nach jahrelanger Erfahrung wundern sich viele Leute, dass ein so
  einfaches Interface, nur eine Zeile, so mächtig sein, so gut
  funktionieren kann.
\item[Echo Area]\index{Echo Area} Ebenfalls die allerletzte Zeile,
  aber dann wenn XEmacs gerade eine Ausgabe macht.
\item[Scrollbar] Hui, eine Scrollbar ist aber ganz schön normal.
  Zeigte sich noch die Scrollbar des GNU Emacs wenigstens vollkommen
  ungewohnt, wir die Scrollbar des XEmacs wenig Überraschungen
  bereithalten.  Eine wichtige Eigenschaft aber gibt es schon: In der
  Scrollbar vieler X Programme (Motif, GTK+, KDE, teilweise
  einstellbar) findet sich ein Verhalten, das man bei MS Win
  Anwendungen vergeblich sucht: Wenn man mit der mittleren Maustaste
  auf eine freie Stelle der Scrollbar drückt, springt man direkt
  dorthin, ohne erst von ganz vorne bis dorthin scrollen zu müssen.

\item[Region]\index{Region} Die Region ist der aktuell markierte Text.
  Textmarkieren kann, ganz wie gewohnt, mit der Maus vonstatten
  gehen.  Einfach mit gedrückter linker Maustaste über den Text
  ziehen.  Erwähnenswert ist da höchstens noch, dass DoppekKlicks
  ganze Worte anwählen (bei Weiterziehen auch in ganzen Wort-Schritten
  weitergehen) und Dreifachklicks ganze Zeilen.  Soweit nix neues.
  Etwas ungewohnt ist es da schon, wenn man mal die
  Shift/Umschalt-Taste benutzt: ist eine Region bereits markiert, kann
  man mit Shift-Mausziehen den Bereich sowohl vorne als auch hinten
  noch verändern\footnote{können das die ganzen modernen GUI-Programme
    eigentlich auch?}.
  
  Das bekannte Verhalten, Text mit Shift und den Cursor-Tasten zu
  markieren erhält man nur durch Verwenden des \package{CUA}-Moduls.
  Der XEmacsstandard lohnt aber auf jeden Fall einen Blick, auch
  wenn's zunächst ungewohnt ist (wie so vieles im XEmacs).  Mit
  \key{C-SPACE} sagt man dem XEmacs einfach, dass es jetzt losgeht mit
  dem Markieren.  Jede weitere Cursorbewegung, zu der man also auch
  all die tollen Funktionen verwenden kann, die sich irgendwie in
  größeren Schritten bewegen (\command{forward-word},
  \command{forward-sexp} \command{end-of-buffer}, etc.), markieren ab
  nun.

  Will die Anwenderin die aktuelle Region wieder loswerden, hilft
  XEmacs' Escape: \key{C-g}.
\item[Point und Mark]\index{Point und Mark} Genaugenommen setzt der
  Befehl \key{C-SPACE} das \emph{Mark} auf die aktuelle Position.

  XEmacs verwaltet für jeden Buffer zwei besondere Stellen: Point und
  Mark.  \emph{Point} ist immer die Stelle unter dem aktuellen
  Cursor.  \emph{Mark} ist so etwas ähnliches, nämlich auch eine
  Stelle, die genauso gut ein Point sein könnte, aber üblicherweise
  verschieden vom Point.  Die Region dazwischen, ist halt die Region,
  und die ist meistens markiert.  Will man einfach Point und Mark
  vertauschen, also vom Ende einer Markierung zum Anfang gehen (aber
  es gibt auch noch andere Fälle, in denen dies sinnvoll ist, z.\,B.\
  wenn man eine Suche gemacht und abgebrochen hat, kann man damit zum
  Ausgangspunkt zurück gehen), verwendet man \cx{C-x}.

  Eine wichtige Eigenschaft des Marks (und der \emph{Marker}, ein
  Datentyp, der weitere Marks ermöglicht) ist, dass sie mitwandern,
  wenn weiter vorne Text verändert wird.  Es ist also keineswegs eine
  feste Byte-Position sondern eine kontextbezogene Position.
\item[Kill und Yank]\index{kill}\index{yank}\index{cut}\index{paste}
  Hierbei handelt es sich keineswegs um eine unfeine Attacke gegen
  einen Amerikaner, sondern um die XEmacs-Beschreibung für "`Ausschneiden
  und Einfügen"', auch "`Cut 'n' Paste"' genannt.  "`Copy"' (Kopieren)
  bleibt übrigens auch im XEmacs "`Copy"'.  Die Tasten dazu? \key{C-w}
  für kill, \key{M-w} für copy und \key{C-y} für yank.
\item[Modes]\index{Modes}\index{Major-Mode}\index{Minor-Mode} Jeder
  Buffer befindet sich in genau einem \emph{Major-Mode}\footnote{Es
    sei denn man verwendet das \package{mmm}-Module, das
    \emph{M}ultiple-\emph{M}ajor-\emph{M}ode-Modul.}
  
  Dieser Mode bestimmt die grundlegende Funktionalität des Buffers und
  entspricht in den meisten Fällen in eleganter Form dem Inhalt des
  Buffers.  So wird eine Ruby-Datei im \command{ruby-mode} sein, eine
  C++-Datei eher im \command{c++-mode} und eine Perl-Datei im
  \command{cperl-mode}.  Huh?  Wieso denn \emph{c}perl?  Naja, der
  XEmacs ist schon nicht mehr so ganz jung und es wurde bereits
  einiges an Geschichte geschrieben.  So gab es dereinst den
  \command{perl-mode}, der jedoch vom \command{cperl-mode} abgelöst
  wurde, der von der Geschichte einfach bevorzugt behandelt wurde.
  Ähnliches gilt für den \command{LaTeX-mode}, der aus dem
  \package{AUCTeX}-Paket stammt und sehr, sehr leistungsfähig ist, der
  aber den älteren \command{latex-mode} abgelöst hat.  Major-Modes
  gibt es für so ziemlich alle gängigen\footnote{sowie für weitere
    nicht so gängige} Programmiersprachen, aber auch für Shells oder
  zum Maillesen und -schreiben.
  
  Zu einem solchen Mode gehören immer besondere Tastatursequenzen. Es
  ist üblich, dass die Major-\-Mode-\-Tastatur\-sequenzen immer mit
  dem Präfix \key{C-c} beginnen.  Da findet man dann häufig Befehle
  zum Starten wichtiger Programme (z.\,B.\ \cc{C-c} im
  \command{LaTeX-mode}), oder zum Senden eines Textes an einen Prozess
  (\command{sql-mode}, \command{gnuplot-mode}), zum Kommentieren der
  aktuellen Region oder zum Einfügen von Text-Bausteinen (\cc{C-e} im
  \command{LaTeX-mode}, \cc{C-c} im \command{xml-mode}, \key{C-z}
  \key{1} im \command{html-mode}\footnote{OK, ok, große Ausnahme hier.
    Der HTML-Mode selber verwendet auf \key{C-c} die Tastaturkürzel
    von PSGML und belegt das selten benutzte \key{C-z} mit Hilfe des
    \command{hm--html-mode} mit vielen Tasten zur Eingabe von
    HTML-Tags}).  Einen Überblick über den aktuellen Major-Mode sowie
  die aktuellen Keybindings, also die aktuell definierten und
  verfügbaren Tastatursequenzen, erhält man mit \ch{m}.

  Zudem kann ein Major-Mode noch eigene Menus in der Menuleiste, einen
  ganzen Haufen eigener Funktionen oder auch ein Kontextmenu auf der
  rechten Maustaste (Ja, soweit sind hier auch weit verbreitete
  Standards eingeflossen ;) bereitstellen, oder auch die Toolbar
  verändern und überhaupt ganz viele tolle Sachen machen.

  Die ganz grundlegenden Major-Modes sind der
  \command{fundamental-mode} und der \command{text-mode}.
  
  Zusätzliche Funktionalität, die vielleicht auch in verschiedenen
  Major-Modes Sinn macht, weil sie nicht auf eine Programmiersprache
  begrenzt ist, wie beispielsweise das automatische Umbrechen langer
  Zeilen nach dem Erreichen einer bestimmten Spalte
  (\command{auto-fill-mode}) oder aber das syntaktische Einfärben
  (\command{font-lock-mode}) wird von sogenannten \emph{Minor-Modes}
  bereitgestellt, und es können jederzeit mehrere davon aktiv sein.
  Ein Liste von möglichen Minor-Modes, gibt ein Rechtermausklick auf
  die Modeline, in genau dem Bereich, in dem die Modes angezeigt
  werden: etwa mittig, in runde Klammern eingefasst.

  Auch die Minor-Modes werden in der Mode-Hilfe, hinter \key{C-h}
  \key{m} erwähnt.
\end{description}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\section{(defun () ``und andere Klammern'' )}
\label{sec:lisp-intro}\index{ELisp!Grundlagen}
Eigentlich will der Leser ja am liebsten alles schon ausprobieren,
aber dennoch soll an dieser Stelle ein wenig die
Programmiersprache LISP erklärt werden.   HALT! Nicht gleich
weglaufen.  Zwei Versprechen: 
\begin{enumerate}
\item Diese LISP-Einleitung wird echt kurz.
\item Danach geht es mit einem interaktiven Tutorial in medias res.
\end{enumerate}

Gut.  Die Grundlage von Lisp wird von lediglich vier einfachsten
Regeln gegeben:
\begin{enumerate}
\item \emph{Listen} werden in runde Klammern eingeschlossen.
\item Der erste Eintrag einer solchen Liste ist ein Funktionsname, alle
  weiteren sind Argumente zu dieser Funktion.
\item Wenn vor einer runden Klammer ein Hochkomma steht werden die
  Einträge der Liste nicht evaluiert, d.\,h.\ der erste Eintrag nicht
  als Funktion und die weiteren nicht als Variablennamen betrachtet.
\item Achja: Variablennamen evaluieren zum Inhalt der Variable.
\end{enumerate}

So, mit diesem Grundwissen, kann man nun schon sehr viel von dem
Lispcode, dem man so begegnen kann, einigermaßen lesen.  Zu beachten
sind dann im wesentlichen nur noch die \emph{Special Forms}, die daran
zu erkennen sind, dass die vom XEmacs anders eingefärbt werden.  Zu
diesen gehören \command{if}, \command{defun} oder auch
\command{while}.  Für diese Special Forms gelten etwas andere Regeln
als für Funktionsaufrufe, die hier aber zunächst nicht interessieren
sollen.

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\section{Tutorial}
\label{sec:tutorial}\index{Tutorial}
Dieses Kapitel wird in dieser Anleitung sehr kurz ausfallen,
andererseits aber dem Leser eine Menge beibringen.  Der Grund für
dieses merkwürdige Verhalten dieses Kapitels ist, dass andere sich
schon die Mühe gemacht haben, es zu schreiben\footnote{Genaugenommen
  war auch schon dieses Geschreibsel nur Füllstoff}.

Im, und das meint durchaus wirklich \emph{im}, XEmacs gibt es bereits
ein interaktives Tutorial, das die Anwenderin gemächlich an
verschiedene Konzepte heranführt und die grundlegenden Funktionen des
XEmacs erläutert.

Vorneweg nur noch einige kurze Anmerkungen, dann kann es losgehen.
\begin{itemize}
\item Keine Angst, man gewöhnt sich schnell daran!
\item Das Tutorial bezieht sich auf den GNU Emacs, so dass sich einige
  Unterschiede ergeben. 
\item Die Scrollbarbeschreibung bezieht sich auf die ungewöhnliche
  aber sehr durchdachte Scrollbar des GNU Emacs, die hier nicht weiter
  betrachtet werden soll, nicht auf die des XEmacs.  
\item Bei allen Dingen, die mit der Oberfläche und dem Aussehen des
  Emacs zu tun haben (Menus, Maus, etc) wird das Tutorial ebenfalls
  häufig vom XEmacs abweichen. 
\item Natürlich funktionieren auch die Cursor-Tasten und die
  Bildlauftasten.
\item Vielleicht gibt es aber auch jetzt schon eine angepasste Version
  des Tutorials?
\end{itemize}

So, jetzt aber los.  Tutorial starten.  Wie?  Einfach im Menu unter
Hilfe im Untermenu Tutorial die gewünschte Sprache aussuchen.  Oder
aber \mx{help-with-tutorial} oder aber \key{C-u}
\mx{help-with-tutorial} (für die Sprachauswahl).

Achso: und eines nicht vergessen:  Kein Mensch muss wirklich \key{M-x}
\key{h} \key{e} \key{l} \key{p} \key{-} \key{w} \key{i} \key{t} \key{h}
\key{-} \key{t} \key{u} \key{t} \key{o} \key{r} \key{i} \key{a} \key{l}
tippen, es gibt da TAB-Vervollständigung:

\key{M-x} \key{h} \key{e} \key{l} \key{p} \key{-} \key{w} \key{TAB},
gleiches gilt für die Auswahl der Sprache\footnote{So, jetzt ist aber
  genug gefüllt hier!}.

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\section{(describe-\ldots) -- Hilfe zur Selbsthilfe}
\label{sec:help}
Zum Abschluss der Einleitung soll noch ein wenig Hilfe zur Selbsthilfe
gegeben werden.  Ein System wie den XEmacs kann man eigentlich gar
nicht nur einfach anwenden.  Man lebt darin und lernt im Laufe der
Zeit immer mehr Winkel und Kammern kennen, in denen Nützliches
steckt.  Bei der Suche nach all diesen Ecken steht die Anwenderin aber
nicht ohne Hilfe da.

Als erstes zu nennen ist dann die Vervollständigung mit der
\key{TAB}-Taste.  Wer einfach nur mal eine Liste aller aktuell
verfügbaren Funktionen sehen möchte, tippt nur kurz \mx{TAB}
\key{TAB}.  Es öffnet sich ein Buffer, mit viiielen Zeilen.

Ist dann eine Funktion bekannt und das Keybinding wird gesucht, so
hilft \ch{w} gefolgt von dem Funktionsnamen weiter.  Umgekehrt
erzählt uns \ch{k} gefolgt von einer Tastatursequenz, welche
Funktion sich dahinter verbirgt.  Die Sequenz \ch{m}, haben
wir schon besprochen, sie beschreibt die aktuellen Major- und
Minormodes. 

Eine unglaubliche Stütze kann \command{apropos} sein.  Einfach mal
\ch{a} eingeben und nach irgendeinem Text suchen, der interessant sein
könnte.  Z.\,B.\ "`buffer"'.  Es folgt ein Buffer (mit eigenem
Major-Mode ;-), der alle Funktionen und Variablen anzeigt, in deren
Namen "`buffer"' vorkommt.  Die apropos-Suche funktioniert aber auch
für die \emph{Inhalte} von Variablen oder sogar für die Dokumentation
von Funktionen und Variablen: einfach mal \mx{apropos-} \key{TAB}
\key{TAB} eingeben \ldots.

Schlussendlich findet man mit \ch{i} zum Info-Stand, und dort
findet man nicht nur die nahezu komplette Beschreibung von XEmacs und
ELisp (und GNU Emacs und eine Lisp-Einleitung) sondern auch die
Beschreibung zu vielen, vielen anderen Programmen. 

Diese Einleitung kann und will gar nicht alles erzählen, das wäre
vermessen.  Es soll immer versucht werden, wichtige
(Grundeinstellungen) oder interessante Aspekte eines Themas (nette
Funktionen, kleine Tricks) herauszupicken.  An dieser Stelle sollte
auch erwähnt werden, dass diese Dokumentation zwar in Deutsch erstellt
wurde, man jedoch als XEmacsanwender nur mit der deutschen Sprache
nicht allzuweit kommen wird.  Die meisten XEmacspakete und -majormodes
kommen mit teils sehr ausführlichen Dokumentationen (zu finden im
Infosystem) auf englisch, die Webseiten sind englisch, die angesagte
Newsgroup \texttt{comp.emacs.xemacs} ist englischsprachig.  Diese
Dokumentation möchte nur 
\begin{itemize}
\item den Einstieg erleichtern,
\item nette Trickse zeigen und
\item angenehm, vielleicht sogar spaßig zu lesen sein.
\end{itemize}

Bei der Selbsthilfe kommt es immer wieder darauf an, all die möglichen
Resourcen aufzusuchen.  Diese sind, zusammenfassend noch einmal
gesammelt:
\begin{itemize}
\item Das Infosystem, auf der Kommandozeile mit \programm{info}, im
  XEmacs mit \ch{i},
\item die Newsgroup \texttt{comp.emacs.xemacs},
\item das Apropossystem, zu erreichen mit \ch{a},
  \mx{apropos}, \mx{hyper-apropos},
\item die eingebaute Hilfe zu Funktionen und Variablen mit \ch{f} und
  \ch{v},
\item die TAB-Vervollständigung bei der Eingabe von Funktionen sowie
\item \programm{grep -r} im XEmacsinstallationsverzeichnis (auch nicht
  zu unterschätzen).
\end{itemize}
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\chapter{Anwendungen und Major-Modes}
\label{cha:anwendungen}
In diesem Kapitel wollen wir uns möglichst vielen mehr oder minder
bekannten Anwendungen zuwenden.  Es erfolgt dabei ein kleiner Vorgriff
auf das Kapitel~\ref{cha:konfiguration}, in dem erst erläutert wird,
wie man denn den angegebenen Konfigurationscode ein sein System geben
soll.  Andererseits haben wir ja schon eingangs in
Kapitel~\ref{sec:xemacs-start} gelernt, dass es sich dabei um
verschiedene Dateien handelt.  Also nicht verwirren lassen, einfach
überlesen, was nicht verstanden werden kann und ggf.\ später wieder
zurück kommen.
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\section{AUCTeX}
\label{sec:auctex}
Einer der wichtigsten Befehle, um mit dem XEmacs komfortabel
\LaTeX-Texte zu tippen, lautet:
\begin{verbatim}
(require 'tex-site)
\end{verbatim}
Durch diesen Code schaltet man den XEmacs vom alten und oftmals noch
immer ebenso standard- wie -mäßigen \texttt{latex-mode} auf die
Verwendung des AUCTeX-Paketes zur Bearbeitung von \LaTeX-Dateien um.
Und das machst sich bemerkbar.  Zunächst einmal durch neue
Menueinträge, die einerseits den Start diverser Programme (wie \LaTeX,
BiBTeX, aber auch \programm{xdvi} und \programm{dvips}) ermöglichen
(Menu: "`Command"'), andererseits durch das Menu "`LaTeX"', in dem die
Eingabe von Umgebungen, Schriftarten und Makros sowie die Navigation
und andere nette Kleinigkeiten angeboten werden (siehe dazu auch
Abbildung~\ref{fig:auctex}).

% this shot is so large it needs a 'p' to not end up at the end of
% chapter. 
\begin{figure}
  \begin{center}
    \includegraphics[width=0.8\textwidth]{auctex}
    \caption{AUCTeX in Aktion.  Die Ausgabe von \LaTeX\  ist ebenso
      dargestellt wie ein Auswahlfenster von RefTeX.  Im Menu wurde
      gerade überlegt, ein Umgebung einzufügen.}
    \label{fig:auctex}
  \end{center}
\end{figure}


Ersteres braucht man eigentlich nur selten.  Denn mit der
Tastenkombinaten \cc{C-c} ist eigentlich alles gesagt und getan.
XEmacs geht in folgenden Schritten vor:
\begin{enumerate}
\item Nachschauen, ob alle Dateien gespeichert sind und ggf.\
  nachfragen. 
\item Erstmal \LaTeX\  aufrufen.
\item Wenn \LaTeX\  noch nach mehr fragt, wie z.\,B.\ einem zweiten
  Lauf, weil die Querverweise noch nicht vollständig angelegt sind,
  oder aber nach BiBTeX, weil Zitate fehlen, werden diese Programme
  aufgerufen.
\item Ist das Dokument soweit vollständig, bietet XEmacs den Befehl
  \emph{View} an, mit dem \programm{xdvi} aufgerufen wird.
\end{enumerate}

Will man die Ausgabe von \LaTeX\  mitverfolgen, bietet es sich an, dem
Hinweis in der Echo-Area Folge zu leisten, und \cc{C-l} noch hinterher
zu schicken.  Ist immer noch schneller als zu einer Konsole zu
wechseln und dort die Befehle einzugeben oder aus der Historie zu
holen. 

Bei Auftreten eines Fehlers springt XEmacs nach Drücken von \cc{`}
(Backtick) direkt an die fehlerhafte Stelle.  Allerdings sei erwähnt,
dass diese Stelle nicht immer die richtige sein muss, weil \LaTeX\ 
selber manches Mal ganz schön in die Irre geführt wird.
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\subsection{RefTex}
\label{sec:reftex}
Zum Verwalten von Zitaten und Referenzen (\verb$\cite{}$) und
\verb$\ref{}$) bietet sich das RefTeX Paket (\cite{reftex}) an. Es
wird mittels
\begin{verbatim}
(turn-on-reftex)
\end{verbatim}
in der Konfiguration aktiviert und die wichtigsten Tastenkombis sind
einerseits \cc{)} für einen Querverweis und \cc{]} für ein Zitat aus
einer Literaturdatenbank. Diese muss RefTeX bekannt sein, was man
leicht durch Setzen der Variablen
\variable{reftex-default-bibliography} (am einfachsten im Customize
Menu: customize-> emacs-> wp-> TeX-> RefTex->Citation Support) auf die
entsprechende .bib-Datei erledigt.

Beim Zitieren fragt RefTeX nach einem Suchmuster für die Datenbank und
bietet alle gefundenen Einträge in einem neuen Buffer zum Anwählen
mittels Cursortasten an. Es gibt in diesem Buffer auch noch weitere
Navigationsmöglichkeiten, die man sich mittels Beschreibung des
RefTeX-Modes beschaffe. Bei dem Erstellen von Querverweisen ist RefTeX
ziemlich intelligent: Wenn man hinter dem Wort \emph{Gleichung} \cc{)}
drückt, weiß es, dass es um eine Gleichung geht und bietet
folgerichtig nur alle Gleichungen zur Auswahl an. Dabei gilt es noch
einiges zu beachten: lässt man kein Leerzeichen nach \emph{Gleichung},
erstellt RefTeX ein (vor Umbruch) geschütztes Leerzeichen (\verb$~$),
lässt man eines, bleibt alles so. Damit das funktioniert, muss man
alle seine Gleichung mit \verb$\label{eq:...}$ bezeichnen.
Entsprechend bezeichnet man Abbildungen mit \verb$\label{fig:...}$
usw\ldots Kann RefTeX nicht erkennen, worum es sich bei dem
Querverweis handelt, wird zunächst danach gefragt. Die gefundenen
Label stammen natürlich aus allen zum Dokument gehörenden Files (vgl.\
Abschnitt~\ref{sec:multidoc}).
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\subsection{\LaTeX-Projekte}
\label{sec:multidoc}
Viele \LaTeX-Projekte werden groß.  Da liegt es dann nahe, den Inhalt
auf mehrere Dateien zu verteilen, die von einem zentralen
Masterdokument mit ins Boot geholt werden.

Ein Beispiel für eine solche Masterdatei könnte in Kurzform so
aussehen:
\begin{verbatim}
\documentclass[10pt,a4paper,DIV15,titlepage,headsepline,footsepline,bibtotoc,idxtotoc]{scrbook}
% ... rest der Praeambel
\begin{document}
\include{einleitung}
\include{einkapitel}
% ... weitere Dateien
\end{document}
% Make this the Master File for Emacs-AUC-TeX:
%%% Local Variables: 
%%% mode: latex
%%% TeX-master: t
%%% End: 
\end{verbatim}
Auffällig daran sind die letzten Zeilen.  In der einzelnen Zeile
\texttt{\% Master} wird festgelegt, dass diese Datei als
Zentraldokument zu betrachten ist, auf das sich diverse Aufrufe wie
der Start von \programm{latex} beziehen.

Alle anderen Dateien dieses Projektes, die mit dem
\command{\\include}-Befehl eingebunden werden, sollten folgende
Zeilen am Ende haben.
\begin{verbatim}
%%% Local Variables: 
%%% mode: latex
%%% TeX-master: "main"
%%% End: 
\end{verbatim}
Mit diesen \emph{local Variables}, oder auch \emph{Filevariablen},
(siehe Abschnitt~\ref{sec:filevariablen}) wird XEmacs angewiesen, die
angegebene Datei als Master zu verwenden.

Damit sollte es im XEmacs transparent sein, ob ein \LaTeX-Projekt aus
nur einer großen oder vielen kleinen Dateien besteht.  Man sollte
allerdings, wie mir gut unterrrichtete Quellen aus dem \LaTeX-Lager
berichtet haben, nicht unbedingt arg viele \verb$\input$ Befehle
verwenden, weil \LaTeX\  selber dann irgendwann Stress macht.
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\subsection{Mathe DeLuxe}
\label{sec:mathmode}
Wer im \variable{TeX-mode-hook} auch noch die Zeile
\begin{verbatim}
(LaTeX-math-mode)
\end{verbatim}
unterbringt, wird mit einem weiteren Menu, das ganz, ganz viele
Einträge für mathematische Symbole enthält, belohnt.  Zudem gibt es
eine mathematische Präfix-Taste (Standard: Backtick), die die
verschiedenen Tastaturkürzel zur Eingabe der Symbole einleitet.  An
dieses Präfix kann man auch noch weitere, eigene Ergänzungen anhängen:
\begin{verbatim}
  (define-key LaTeX-math-keymap
    (concat LaTeX-math-abbrev-prefix "/")  'LaTeX-math-frac))
\end{verbatim}
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\subsection{Preview \LaTeX}
\label{sec:previewlatex}
Hier ist Platz für all die GUI-Maniacs, die das im Titel dieses
Abschnitts genannte Paket einsetzen, um bereits im XEmacs selber eine
Idee von der späteren visuellen Gestaltung zu erhalten.
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\subsection{Whizzytex}
\label{sec:whizzytex}
Auch bei diesem Paket kann ich nur auf die Mithilfe begeisterter
Anwender hoffen und bleibe bis dahin (oder bis ich es selber benutze)
weitere Erläuterungen schuldig.
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\subsection{Konfiguration}
\label{sec:latexconfig}
Die hier vorgestellte Konfiguration kann so u.\,U.\ nur für \LaTeX
verwendet werden, weil ihr jeglicher Praxiseinsatz mit anderen
Systemen, die von AUCTeX ebenfalls abgedeckt werden, fehlt.
\begin{verbatim}
(require 'tex-site)
(setq TeX-parse-self t) ; Enable parse on load.
(setq TeX-auto-save t) ; Enable parse on save.

(add-hook 'TeX-mode-hook
          '(lambda ()
             (setq ispell-parser 'tex)
             ))

(add-hook 'LaTeX-mode-hook
          '(lambda ()
             ;; meine keybindings (braucht Extrafunktionen)
             ;;(ska-coding-keys TeX-mode-map)
             ;;(ska-latex-mode-keys)
             (LaTeX-math-mode)
             (turn-on-reftex)
             (fume-add-menubar-entry)
             (setq fume-display-in-modeline-p nil)
             ))
\end{verbatim}

Besondere Erwähnung verdienen hier noch \variable{TeX-parse-self}, das
selber geschriebene Kommandos erkennt und bei der Eingabe anbietet,
sowei \variable{TeX-auto-save}, das das Abspeichern solcher
Informationen zum schnelleren späteren Einbinden erlaubt.
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\subsection{Beispiel}
\label{sec:latexexample}
Abschließend soll in diesem Kapitel ein Beispiel für ein
Masterdokument gegeben werden, das bereits viel Erfahrung mit diversen
Aspekten von \LaTeX\  beinhaltet.  Es kann als Anregung verstanden
werden, wie man eigene Dokumente gestalten könnte.
\begin{verbatim}
\documentclass[10pt,a4paper,DIV15,titlepage,headsepline,footsepline,bibtotoc,idxtotoc]{scrbook}
%% PLEASE NOTE, that the following lines to detect whether we are
%% running as pdflatex or latex are error prone!  I only use them
%% because my LaTeX-installation does not contain ifpdf.sty!
%% BITTE BEACHTET, das die folgenden Zeilen anfaellig fuer Fehler
%% sind.  Die aktuelle und richtige Loesung waere die Verwendung des
%% Pakets ifpdf.sty, das mir jedoch derzeit nicht zur Verfuegung
%% steht.
\newif\ifpdf \ifx\pdfoutput\undefined
\pdffalse % we are not running pdflatex
\else
\pdfoutput=1 % we are running pdflatex
\pdfcompresslevel=9 % compression level for text and image;
\pdftrue
\fi

\usepackage[latin1]{inputenc}
\usepackage[T1]{fontenc}
\usepackage{textcomp}
\usepackage{ngerman}
\usepackage{fancyhdr}
\usepackage{makeidx}
\usepackage{verbatim}

\makeindex

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%                       VERBATIM
\makeatletter
\def\verbatim@font{\normalfont\ttfamily\footnotesize
                   \hyphenchar\font\m@ne
                   \let\do\do@noligs
                   \verbatim@nolig@list}
\makeatother
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%                       TEX4HT
%% LaTeX to HTML
%% http://www.cis.ohio-state.edu/~gurari/TeX4ht/
%% einkommentieren und mit 'htlatex ...tex' TeXen
%% \usepackage[html,sections+,3,png]{tex4ht}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%                       FONTS
\font\fc=cmss10   scaled 800
\font\ft=phvr8r   scaled 800


%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%                     HEADER/FOOTER
\pagestyle{fancy}
% first define for printing style
\fancyhead[LO,RE]{\slshape \leftmark}
\fancyhead[LE,RO]{\slshape \rightmark}
\fancyhead[C]{}
\fancyfoot[LE,RO]{\bfseries \thepage}
\fancyfoot[LO,RE]{\small\slshape XEmacs auf Deutsch}
\fancyfoot[C]{}
\renewcommand{\headrulewidth}{0.4pt}
\renewcommand{\footrulewidth}{0.4pt}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%                 PDF or not to PDF
\ifpdf
\makeatletter
\@twosidefalse
\makeatother
% die naechsten drei zeilen sind die empfohlene ersetzung fuer
% times.sty
\usepackage{mathptmx}
\usepackage[scaled=.90]{helvet}
\usepackage{courier}
\usepackage{thumbpdf}
\usepackage[pdftex,xdvi]{graphicx}
\usepackage[pdftex,colorlinks=true,backref]{hyperref}
\usepackage[pdftex]{color}
\else
\usepackage{graphicx}
\usepackage[colorlinks=false,backref]{hyperref}
\fi

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%                  META INFORMATION
\newcommand{\version}{2.04}
\author{Stefan Kamphausen}
\title{XEmacs auf Deutsch}
\titlehead{%
  \begin{minipage}[b]{0.4\textwidth}
    Eine pragmaprogrammatische Einleitung mit vielen Beispielen und
    bunten Bildern in etwas mehr als einen Texteditor.
    \href{http://www.skamphausen.de/xemacs}
    {\nolinkurl{http://www.skamphausen.de/xemacs}}
  \end{minipage}
  }

\lowertitleback{%
  Copyright \copyright\ 2000-2004 Stefan Kamphausen\\[2ex]
    
  Gesetzt, getippt und gestaltet mit Freier Software (\LaTeX,
  XEmacs und Gimp).\\[2ex]

  Permission is granted to copy, distribute and or modify this
  document under the terms of the GNU Free Documentation
  License, Version 1.1 or any later version published by the
  Free Software Foundation; with no Invariant Sections,
  with no Front-Cover Texts, and with no Back-Cover
  Texts. A copy of the license can be obtained from \cite{fdl}.
}


\begin{document}
\maketitle

\tableofcontents

\include{datei1}
\include{datei2}
\include{datei3}
% ...
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\nocite{*}
\renewcommand\refname{Links und andere Quellen}
\bibliography{quellen}
\bibliographystyle{mybibstyle}

\printindex

\end{document}
% Make this the Master File for Emacs-AUC-TeX:
%%% Local Variables: 
%%% mode: latex
%%% TeX-master: t
%%% End: 
\end{verbatim}
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\section{psgml-mode -- SGML und XML und so}
\label{sec:psgml}
SGML ist die Mutter aller Markupsprachen.  Nagut, ich weiß es
eigentlich gar nicht, ob sie wirklich die \emph{Ur}mutter ist, aber
SGML ist mal alt und erprobt.  HTML und XML sind sicherlich ihre
prominentesten Kinder, aber auch Docbook hat eine gewisse Popularität
erlangt.  Lange bevor XML-Schema am Horizont erschienen, wurden
Dokumentenstrukturen mit DTDs, den \emph{Document Type Definitions},
festgelegt.  Diese legen fest, welches \emph{Tag}, also ein in spitze
Klammern eingefasster Strukturierungsbefehl, wann kommen darf.  Wer
also die DTD verstehen kann, kann sagen, ob ein entsprechendes
Dokument \emph{valide} ist, oder nicht.

Das XEmacspaket, das DTDs parsen kann und Dokumente vom Typ SGML
bearbeiten hilft, heißt \package{PSGML}.  Die Dokumentation und die
Konfigurationsmöglichkeiten sind massiv.

PSGML kommt mit einem eigenen Syntaxhighlighting daher, das aber erst
aktiv wird, wenn die DTD geparst wurde.  Dazu aktiviert man mit
\begin{verbatim}
(setq sgml-auto-activate-dtd t)
\end{verbatim}
das automatische Parsen der DTD beim Laden einer Datei.  Ggf.\ muss
man noch einmal \key{TAB} drücken, damit der Text eingefärbt wird.

Weitere Einstellungen entnehme die geneigte Leserin bitte meiner
Beispielkonfiguration im Abschnitt~\ref{sec:personalel}.
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\subsection{Benutzung}
Während man also seine XML- oder SGML-Dateien tippt, gibt es einige
Funktionen, die man einfach immer wieder benötigt:
\begin{description}
\item[\mx{sgml-insert-end-tag}, \cc{/}] Beendet das aktuelle Tag. 
\item[\mx{sgml-insert-element}, \cc{C-e}] Fügt ein Tag mit
  TAB-Completion auf die an der aktuellen Position erlaubten Tags ein.
\item[\mx{sgml-split-element}, \cc{C-RET}] Fügt vom aktuellen Tag ein
  Ende und ein Anfangstag ein.  Praktisch, um einen neuen Paragraphen
  zu beginnen.
\item[\mx{sgml-next-trouble-spot}, \cc{C-o}] Springt die nächste
  Position an, an der PSGML eine Unstimmigkeit mit der DTD findet. 
\end{description}

Ich persönlich habe immer mal wieder Probleme damit, wie PSGML neue
Elemente einrückt, aber mit einigen Griffen zur \key{TAB}-Taste ist
das schnell erledigt.

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\subsection{Zukunft}
Leider ist es wohl nicht mehr vorgesehen, PSGML zum Verarbeiten der
neueren XML-Schema zu bewegen, so dass dieses Paket wohl langsam in
den nächsten Jahren veralten wird.  Es gibt da ein neues Paket names
\package{nxml} (FIXMEREF) aber das wird nur für den GNU Emacs
entwickelt und eine Portierung dürfte aufgrund der enormen Größe des
Paketes schwierig sein.  Es bleibt abzuwarten, was die Zeit bringt.
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\section{html-mode -- PSGML- -}
\label{sec:html}
Da liegt mit \package{PSGML} eine richtige SGML-Entwicklungsumgebung
vor und ihre Hauptanwendung liegt in der Bearbeitung von
HTML-Dateien\footnote{Daher der Name dieses Kapitel:
  PeEssGeEmmEllMinusMinus}.  Schade eigentlich.  Aber dadurch werden
auf jeden Fall HTML-Dateien, die aus dem XEmacs kommen, automatisch
besser.  Nicht nur, dass hier für richtiges (und konfigurierbares)
Einrücken gesorgt wird, auch die Korrektheit eines Dokuments bezüglich
seiner DTD wird wahrscheinlicher, sofern der Entwickler nur mal
\key{C-c} \key{C-o} drückt.  Ist PSGML einmal so eingestellt, dass
notwendige Tags automatisch eingefügt werden, ist eine weitere
Fehlerquelle abgestellt.

Zudem gibt es noch einen Minor-Mode, der Abkürzungen für
viele HTML-Tags definiert.  Ein mutiges \key{C-h} \key{m} sorgt für
eine lange Liste von vordefinieren Tastenkombinationen.

Die ausführlichen Menus des Modes, sobald eine HTML-Datei geöffnet
wurde, bieten genügend Stoff zum lange drin Stöbern.
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\section{CPerl, also Perl im cperl-mode}
\label{sec:cperl}

\begin{figure}
  \begin{center}
    \includegraphics[width=0.9\textwidth]{cperl}
    \caption{Ein Buffer im \package{cperl-mode}.  In der EchoArea ist
      die automatische Kurzhilfe zum if-Befehl zu erkennen, das
      Kontextmenu zeigt weitere Möglichkeiten, an Hilfe zu kommen.}
    \label{fig:cperl}
  \end{center}
\end{figure}

"`Nur perl kann Perl parsen"' so sagt man sich unter
Perlprogrammierern.  Leider stimmt das auch für den XEmacs.  Er tut
sein Bestes und schafft eine Menge, aber ab und an trifft man doch auf
falsche Berechnungen der Einrückung oder falsche Syntaxeinfärbungen.
Ansonsten liefert der \package{cperl-mode} eine hervorragende
Plattform, um Perlprogramme zu entwickeln.

Zunächst sei die Navigation erwähnt, mit der man durch den Buffer
navigieren kann.  CPerl arbeitet sowohl mit der Speedbar als auch mit
dem \package{functions-menu} (FIXMEREFWRITE) und bietet neben dem
eigene Funktionen, um z.\,B.\ an den Anfang einer Funktion zu springen
(siehe dazu das Kontextmenu auf der rechten Maustaste).

Eine weitere wichtige Stütze ist die automatische Kurzhilfe von vielen
Funktionen und Operatoren.  Einmal aktiviert (im Menu unter "`Perl
Docs"'), zeigt sie in der EchoArea bei kurzem Verweilen an einer
Stelle eine kontextbezogene Hilfe an.  Dieses ist im gezeigten
Screenshot in Abbildung~\ref{fig:cperl} zu erkennen.  Auch der Zugriff
auf die vollständige Perldokumentation kann aus dem XEmacs erfolgen.
Früher musste man sich ein separat gepflegtes info-File mit der
Dokumentation aller Perlbefehle besorgen, heute verwendet man einfach
das von Perl mitgelieferte \programm{perldoc}, wie es das Kontextmenu
in der Abbildung bereits andeutet.  Damit muss man also nicht mehr zur
Shell wechseln, dort
\begin{verbatim}
shell> perldoc -f unpack
\end{verbatim}
angeben, weil man wieder mal die Verwendung von \command{unpack}
vergessen hat und dann zurück in den XEmacs gehen.  Stattdessen
schreibt man einfach \texttt{unpack} in seinen Buffer, wartet kurz, ob
die Kurzhilfe vielleicht schon aussreicht, um der Erinnerung auf die
Sprünge zu helfen und --wenn nicht-- tippt dann kurz mal auf
\mx{cperl-perldoc-at-point}.  Wer da häufig verwendet, wird es
sicherlich auf eine kurze Taste legen wollen (siehe
Abschnitt~\ref{sec:ownkeybindings}).

Geschmackssache ist die Fähigkeit des \package{cperl-mode}s, beim
Tippen diverser Schlüsselwörter oder -zeichen, den Versuch zu starten,
besonders pfiffig zu sein und Tipparbeit abzunehmen.  Es ist schon
nett, wenn man einfach nur
\begin{verbatim}
while SPACE
\end{verbatim}
tippt, und dann steht danach 
\begin{verbatim}
while () {
}
\end{verbatim}
im Buffer und der Cursor zwischen den Klammern.  Will man allerdings
eine eigene Laufvariable angeben:
\begin{verbatim}
for my $i (1..10) {
    print "$i\n";
}
\end{verbatim}
\ldots kann das auch als störend empfunden werden.  Generell ist
dieses Verhalten (auch in anderen Modes) als
\emph{electric}\index{electric} bekannt.  Man kann einstellen, ob man
seine Klammern und das Semikolon (fügt dann automatisch Zeilenumbrüche
ein) und gewisse Schlüsselwörter elektrisch haben möchte.  Wer ohnehin
alle Regler nach rechts gedreht sehen möchte, setzt einfach
\variable{cperl-hairy} auf \texttt{t}, dann sind alle elektrischen
Features ebenso angeschaltet, wie noch einige andere Kleinigkeiten.

Eine sehr häufig auftauchende Frage gilt den neueren CPerl-Modes und
deren Verhalten, überflüssige Leerzeichen durch einen Unterstrich zu
markieren.  Meistens wird gefragt, wie man das wieder loswird.
Abgesehen davon, dass man einfach die Leerzeichen entfernen kann, kann
man auch die Schriftart für \variable{cperl-invalid-face} auf einen
passenden Wert setzten, indem man per \mx{customize} \key{RETURN}
\texttt{cperl-faces} \key{RETURN} im aufpöppenden Buffer "`Invalid
Face"' auf \texttt{'(quote default)} setzt.  Dann Abspeichern für ein
dauerhaftes Abschalten und gut ist.

Wie man nun den Perlinterpreter gleich selber startet oder aber einen
Syntaxcheck ausführen lässt, dessen Ergebnis XEmacs in einem eigenen
Buffer zum direkten Anspringen der Fehlerstellen anzeigt, kann man
erneut dem Kontextmenu entnehmen.

Jetzt noch schnell ein paar hausgemachte Skeletons definiert
(Abschnitt~\ref{sec:skeleton_beispiele}) und dann kanns losgehen.
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\subsection{Konfiguration}
Beispielkonfiguration findet sich im langen Abschnitt, der meine
\file{personal.el} zeigt (~\ref{sec:personalel}).

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\section{Java mit JDE -- hypeorientiertes Programmieren}
\label{sec:jde}
Mitte 2004 kam der Zeitpunkt, als ich dann doch nochmal mit Java
begonnen habe.  Weil es vor Ort das eingesetzte Instrument war und
weil ich zwar um \package{JDE} wusste, es jedoch nicht konfiguriert
war, habe ich ausnahmsweise zu einem anderen Tool gegriffen:
NetBeans.  Fancy stuff, mit CVS und GUI Builder und \programm{ant} und
Onlinehilfe zu den Funktionen sowie einer kontextsensitiven
Vervollständigung von Funktionen, die jederzeit weiß, welche
Funktionen an der aktuellen Cursorposition erlaubt sind.  Nett.
Allein, der Editor hat weh getan.  Da fehlte so viel \ldots 

Nun gut, zwei Tage später habe ich begonnen, JDE zu konfigurieren und
einen weiteren Tag später hatte ich all die genannten Features
ebenfalls, nur der GUI Builder fehlte noch.

\begin{description}
\item[Vervollständigung] Mal ganz abgesehen von \package{dabbrev}, das
  ich auch in Java viel nutze, gibt es die Funktionen
  \command{jde-complete} und \command{jde-complete-in-line}, die
  entweder direkt im Code die Funktionen einfügen (zweiteres) und bei
  weiteren Aufrufen durch die Möglichkeiten gehen, oder aber eine
  Auswahl anbieten, in dem bequem die Funktion ausgesucht werden kann.
\item[Dokumentation] Ist erst einmal bekannt, wo die
  HTML-Dokumentation für das JDK zu finden ist
  (Variable \variable{jde-jdk-doc-url} oder aber die Ausgabe der
  Funktion \command{jde-get-jdk-dir} ), kann man mit
  \command{jde-help-browse-jdk-doc} die Hilfe in einem einstellbaren
  Webbrowser anzeigen lassen.  Wer sich dann noch mit einem internen
  Browser im XEmacs zufrieden gibt (\package{w3} oder \package{w3m})
  hat ein ziemlich "`integriertes"' Feeling.  Eine kontextsensitive
  Hilfe liefert die Funktion \command{jde-help-symbol}.
\item[JavaDoc] Nach wenigen Tagen sah mein Code auch besser aus als
  anderer aus dem gleichen Projekt.  Nicht nur weil er korrekt
  eingerückt war, sondern weil jede Klasse, jede Funktion ihre
  JavaDocs hatte.  Das geht aber auch so einfach:
  \mx{jde-javadoc-checkdoc} und es wird überall geschaut, was den
  gängigen Regeln nach in Ordnung ist und was nicht.  Tja, und wenn
  mal was fehlt: \mx{jde-javadoc-autodoc-at-line} hilft da weiter.
\item[Buildsystem: ant] Mit \programm{ant} kommt für Java eine
  Alternative zu \programm{make}.  Im JDE kann man mit der Variablen
  \variable{jde-build-function} (\mx{customize-variable} \key{RET}
  \variable{jde-build-function}) einstellen, welche Funktion zum Bauen
  eines Projektes verwendet werden soll.  Neben den genannten
  Möglichkeiten kann man auch eine ganz eigene Funktion schreiben.
  Ein Aufruf von \command{jde-build} ruft dann \programm{ant} mit den
  (hoffentlich) passenden Parametern auf.
\item[Programmstart] Und auch den Umweg über die Shell zum Starten des
  Programmes kann man sich sparen.  Gleich aus dem XEmacs heraus
  \mx{jde-run} aufgerufen, sofern \variable{jde-run-executable} oder
  aber \variable{jde-run-application-class} gesetzt wurde.  Das einzig
  unschöne daran ist, dass dabei die aktuelle Windowconfiguration
  zerstört wird.  Da man die ja aber vorher schnell in ein Register
  speichern kann (\mx{window-configuration-to-register} \key{1},
  später dann \mx{jump-to-register} \key{1}) stört das nicht so arg.
\end{description}
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\subsection{JDE Konfiguration}
Anregungen für eine gute Konfiguration.  Allerdings nutzt JDE eine
Eigenschaft von \package{customize}, so dass die eigentliche
Konfiguration darüber erledigt wird.  Customizevariablen haben einen
Defaultwert, der zwar überschrieben werden kann, aber immer vorhanden
ist.  Somit kann JDE für jedes Javaprojekt eigene Konfigurationen
vornehmen. 

Zunächst die entsprechenden Einträge in meiner customize-Datei:
\begin{verbatim}
(custom-set-variables
 '(jde-project-name "MySuperCoolProject")
 '(jde-build-function (quote (jde-ant-build)))
 '(jde-complete-function (quote jde-complete-minibuf))
 '(jde-setnu-mode-enable t)
 '(jde-complete-signature-display-time 3)
\end{verbatim}

Dann eine mögliche Konfiguration für Tastenkombinationen und
ähnliches:

\begin{verbatim}
;; If you want Emacs to defer loading the JDE until you open a
;; Java file, edit the following line
(setq defer-loading-jde t)

(if defer-loading-jde
    (progn
      (autoload 'jde-mode "jde" "JDE mode." t)
      (setq auto-mode-alist
        (append
         '(("\\.java\\'" . jde-mode))
         auto-mode-alist)))
  (require 'jde))

;; Note that the customization for JDE is done via customize, because
;; JDE wants it that way
(defun ska-jde-mode-keys ()
  "Setting local keybindings for major mode: JDE."
  (local-set-key '[(control b) (control b)]      'jde-build)
  (local-set-key '[(control b) (control h)]      'jde-help-symbol)
  (local-set-key '[(control b) (control space)]  'jde-complete-in-line)
  (local-set-key '[(control b) (space)]          'jde-complete)
  (local-set-key '[(control b) (control r)]      'jde-run)
  )

(defun my-jde-mode-hook ()
  (turn-on-setnu-mode)
  (turn-on-font-lock)
  (auto-fill-mode 1)
  (setq indent-tabs-mode nil)

  (setq c-basic-offset 2)

  (ska-coding-keys jde-mode-map)
  (ska-jde-mode-keys)
  (make-local-hook 'write-contents-hooks)
  (add-hook 'write-contents-hooks #'ska-untabify
            nil t))

(add-hook 'jde-mode-hook 'my-jde-mode-hook)
\end{verbatim}

Die projektspezifische Konfiguration erfolgt über eine spezielle
Datei: \file{prj.el} im Projektverzeichnis.  Eine solche Datei könnte
folgenden Inhalt haben.
\begin{verbatim}
(jde-project-file-version "1.0")
(jde-set-variables
 '(jde-global-classpath 
    (quote ("."
            "/home/user/projekte/java/tollebibliothek"
            "/home/user/projekte/java/wichtigeklassen/"))))
\end{verbatim}

JDE ist eine ziemlich dicke Bibliothek mit einer Vielzahl an
Fähigkeiten und Möglichkeiten.  Die hier beschriebenen Konfigurationen
und Funktionen können nur der obere Zipfel des Eisberges sein.  Es
reicht aber bereits, um NetBeans abzulösen. 
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\section{Skeletons}
\label{sec:skeletons}
So ziemlich jeder halbwegs ernstzunehmende Editor bietet die
Fähigkeit, bestimmte Textbausteine einfügen zu lassen. Natürlich
bekommen wir XEmacs-User noch viel mehr geboten. Mit den Skeletons
steht uns ein sehr leistungsfähiger Mechanismus zur Verfügung.

Die Dokumentation dazu liefert der XEmacs mit
 
\begin{verbatim}
C-h f skeleton-insert
\end{verbatim}

Wer noch tiefergehendes Verständnis erwerben möchte, sollte mal einen
Blick die Dateien \file{skeleton.el} und \file{sh-script.el} werfen.

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\subsection{Definition eines Skeletons}

Um ein Skeleton zu definieren dient die Funktion
\command{define-skeleton}:

\begin{verbatim}
 (define-skeleton ska-skel-ruby-def
   "Inserts a new ruby function definition at point."
   "name: "
   < "def " str
   "("
   ("Argument, %s: "
    str & ", ") & -2 & ")" | -1
    \n _ "\n"
   "end" (progn (ruby-indent-command) ""))
\end{verbatim}            

Ihr gibt man den Namen mit, den das Skeleton bekommen soll (hier
\command{ska-skel-ruby-def}), und den man später als vollwertige
Funktion zur Verfügung hat. Es folgt der obligatorische
Dokumentations-String: "`Inserts a new ruby function definition at
point."'. 

Das nächste Argument ist entweder \command{nil} oder aber im Beispiel
der Fragetext für eine Anfrage beim Benutzer: \verb$"name: "$. Im
zweiten Fall bekommt man den vom Benutzer eingegebenen String in der
Variablen \variable{str} geliefert, die man später verwenden kann.

Alle Strings, also Zeichenketten, die in der Skeleton-Definition in
doppelte Anführungszeichen (\dq ) eingefasst werden, werden einfach
so, wie sie dort stehen, eingefügt. 

Möchte man gerne elisp-Code ausführen, fasst man jenen Code in einen
progn-Aufruf ein und liefert am Ende einen leeren String zurück:
\verb$(progn (ruby-indent-command) "")$. 

Eine normale runde Klammer beginnt ein rekursives Skeleton: Hier kann
erneut eine Abfrage formuliert werden, deren Antwort man in der
Variablen \variable{str} erhält. Im Beispiel werden die Argumente für
eine Ruby-Funktion erfragt. Ein solcher Block wird solange
durchlaufen, bis eine leere Eingabe erfolgt. Für die weitere
Diskussion des Beispiels s.\ unten.

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\subsubsection{Sonderzeichen}

Es existieren noch einige Zeichen mit besonderer Bedeutung:
\begin{center}
  \begin{tabular}[h]{|c|p{0.75\textwidth}|}
    \hline
    \textbf{Zeichen} & \textbf{Bedeutung}\\
    \hline
    \verb$>$  & Einrücken der aktuellen Zeile.\\
    \hline
    \verb$\n$ & Einrücken der aktuellen Zeile und Wechsel in die
    nächste.\\ 
    \hline
    \verb$_$ & Festlegen der Cursorposition nach dem vollständigen Einfügen
    des Templates. Achtung, das klappt nicht immer so ganz richtig,
    speziell wenn man elisp-Code ausführt. \\
    \hline
    \verb$>$ & Einrücken der aktuellen Zeile.\\
    \hline
    \verb$-3$ & Das Minuszeichen gibt an, dass von der aktuellen Position
    die angegebene (3) Anzahl Zeichen gelöscht werden sollen. \\
    \hline
  \end{tabular}
\end{center}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\subsubsection{Bedingungen}

In obiger Tabelle fehlen noch einige Sonderzeichen, die jedoch
gesondert behandelt werden sollen: \verb$&$ und \verb$|$. Sie tauchen
auch bereits in obigem Beispiel auf und dienen zum Testen von
Bedingungen. 

Falls der vorherige Ausdruck die Cursorposition verändert hat (z.\,B.\ 
durch Einfügen des Inhalts der Variablen \variable{str} in den
Buffer), wird ein mit \verb$&$ angeschlossener Teil behandelt. Falls
nicht, entfällt diese Bearbeitung. Somit ist also \verb$&$ ein
logisches UND.  Entsprechendes gilt für \verb$|$, das logische ODER.

Im Beispiel dient das dazu, für jedes weitere Argument, das eingegeben
wurde ein \verb$", "$ in den Text einzufügen, und wenn die Eingabe
beendet wurde, jene Zeichen zu löschen und dafür eine schliessende
Klammer mit einem Zeilenumbruch zu erzeugen. Falls hingegen keine
Argumente angegeben wurden, werden die Klammern entfernt.

Somit ist also der Ausdruck 

\begin{verbatim}
("Argument, %s: " str & ", ") & -2 & ")" | -1
\end{verbatim}
wie folgt zu lesen:

\begin{enumerate}
\item Erfrage ein Argument: \verb$("Argument, %s: "$
\item Schreib es in den Buffer und füge ein Komma und ein Leerzeichen
  an: \verb$str & ", ")$
\item  Führe diese Aktion solange aus, bis der Anwender eine leere
  Eingabe macht: das wird durch die Klammerung erreicht. 
\item Wenn es eine Eingabe gegeben hat, lösche zwei Zeichen (das
  Lerzeichen und das Komma): \verb$& -2$
\item  Und füge gleich noch die schliessende Klammer für die
  Argumentenliste ein: \verb$& ")"$.
\item  Hat es hingegen keine Eingabe gegeben, lösche lediglich ein
  Zeichen, nämlich die öffnende Klammer der Argumentenliste:
  \verb$| -1$ 
\end{enumerate}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\subsection{Beispiele}
\label{sec:skeleton_beispiele}
Eine Perl-Subroutine, die nach beliebig vielen Argumenten fragt:
\begin{verbatim}
(define-skeleton ska-skel-perl-sub
  "Insert a perl subroutine with arguments."
  "Subroutine name: "
  "sub " str " {"
  \n "my (" ("Argument name: " "$" str ", ") -2 ") = @_;"
  "\n"
  \n _
  \n "}" '(progn (indent-according-to-mode) nil)
  \n)
\end{verbatim}
% $ shut up, font-lock

Und hier bereiten wir uns den Code für ein größeres Perl-Projekt vor.
Es sollte beachtet werden, dass hier davon ausgegangen wird, dass die
Datei mit \command{auto-insert} bereits vorbereitet wurde (vergleiche
dazu Abschnitt~\ref{sec:auto-insert}).
\begin{verbatim}
(define-skeleton ska-skel-perl-project
  "Insert much perl code, preparing a real world project."
  (nil)
  "use Getopt::Long;\n"
  "use Pod::Usage;\n"
  "####################################################################\n"
  "##                             OPTIONS\n"
  "####################################################################\n"
  "GetOptions("
  \n "\"help|h!\" => \\my $help,"
  \n "\"version|v!\" => \\my $version"
  \n ") or pod2usage("
  \n "verbose => 0,"
  \n "exitstatus => 1"
  \n ");"
  \n "if ($help) {"
  \n "pod2usage("
  \n "verbose => 1,"
  \n "exitstatus => 0"
  \n ");"
  \n "}"
  \n "if ($version) {"
  \n "print $Version;"
  \n "exit 0;"
  \n "}"
  \n "####################################################################"
  \n "##                               MAIN"
  \n "####################################################################"
  \n ""
  \n "####################################################################"
  \n "##                               SUBS"
  \n "####################################################################"
  \n "__END__\n"
  "####################################################################\n"
  "##                             Now Docs...\n"
  "####################################################################\n"
  "=head1 NAME"
  "\n"
  \n (file-name-nondirectory buffer-file-name) " - DESCRIBE ME"
  "\n\n"
  "=head1 SYNOPSIS"
  "\n"
  \n (file-name-nondirectory buffer-file-name) " [-h] [-v]" 
  "\n\n"
  "=head1 OPTIONS"
  "\n\n"
  "=over 1"
  "\n\n"
  "=item B<-h|--help>"
  "\n"
  \n "Print help message and exit successfully."
  "\n\n"
  "=item B<-v|--version>"
  "\n"
  \n "Print version information and exit successfully."
  "\n\n"
  "=back"
  "\n\n"
  "=cut\n"
  "")
\end{verbatim}
%$ shut up font-lock
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\section{Auto-Insert}
\label{sec:auto-insert}
Wann immer XEmacs eine leere Datei zur Bearbeitung öffnet, kann man
sich einiges an Text bereits einfügen lassen.  Das passende Paket dazu
heißt \package{AutoInsert}, und es enthält mehr als nur einen
Mechanismus dafür.  Die wichtigste Variable in diesem Zusammenhang ist
\variable{auto-insert-alist}.  Sie hat die Form
\begin{verbatim}
((CONDITION1 . ACTION1)
 (CONDITION2 . ACTION2)
 (CONDITIONn . ACTIONn))
\end{verbatim}
Dabei ist jede einzelne CONDITION entweder ein regulärer Ausdruck, der
auf den Dateinamen passt, z.\,B.\ \verb#"\\.c$"#
%$shutup fontlock
für C-Dateien, die gewöhnlich auf ein \texttt{.c} enden.  Alternativ
darf hier auch ein Ausdruck der Form \texttt{(CONDITION
  . DESCRIPTION)} verwendet werden, also beispielsweise
\begin{verbatim}
("\\.h*$" . "C Header")
\end{verbatim}
%$
Die zweite Möglichkeit für CONDITION ist ein Symbol, das auf den
jeweiligen Majormode passt, z.\,B.\
\begin{verbatim}
(ruby-mode . "Ruby Program")
\end{verbatim}

Derart konfiguriert kann dann die Funktion \texttt{auto-insert}
entscheiden, welche ACTION ausgewählt werden soll.  Auch hier
existieren wieder zwei Möglichkeiten:
\begin{enumerate}
\item ACTION kann ein Dateiname sein, der die Datei angibt, die den
  einzufügenden Text enthält.  Der Dateiname kann absolut angegeben
  werden oder aber relativ zum Verzeichnis, das in der Variablen 
  \variable{auto-insert-directory} definiert wurde.
\item Alternativ kann ACTION aber auch ein echtes Skeleton
  (s.~Abschnitt~\ref{sec:skeletons}) sein, womit einem dann der
  komplette Funktionsumfang von XEmacs zur Verfügung steht.  
\end{enumerate}

Abschließend ein Beispiel für die Skriptsprachen Perl und Ruby:
\begin{verbatim}
(setq auto-insert-alist
      '(
        ((perl-mode . "Perl Program")
         nil
         "#! /usr/bin/perl\n#\n"
         "# File: " (file-name-nondirectory buffer-file-name) "\n"
         "# Time-stamp: <>\n"
         "# $Id: $\n#\n"
         "# Copyright (C) " (substring (current-time-string) -4)
         " by " auto-insert-copyright "\n#\n"
         "# Author: "(user-full-name) "\n#\n"
         (progn (save-buffer)
                (shell-command (format "chmod +x %s"
                                       (buffer-file-name)))
                "")
         "# Description:\n# " _ "\n"
         "use strict;\n"
         "use warnings;\n"
         "use Data::Dumper;\n"
         (when (yes-or-no-p "Is this a real project (or just a script)? ")
           (ska-skel-perl-project)
         ))
        ;;}}}
        ;;{{{ Ruby Programm
        ((ruby-mode . "Ruby Program")
         nil
         "#! /usr/bin/ruby -w\n#\n"
         "# File: " (file-name-nondirectory buffer-file-name) "\n"
         "# Time-stamp: <>\n"
         "# $Id: $\n#\n"
         "# Copyright (C) " (substring (current-time-string) -4)
         " by " auto-insert-copyright "\n#\n"
         "# Author: "(user-full-name) "\n#\n"
         "# Description: " _ "\n#\n\n"
         "class " (replace-in-string
                   (upcase-initials 
                     (file-name-nondirectory
                     (file-name-sans-extension 
                       buffer-file-name)))
                   "_"
                   "")
         "\n"
         "def initialize()" (progn (ruby-indent-command) "")
         "\nend" (progn (ruby-indent-command) "")
         "\n end" (progn (ruby-indent-command) "")
         )
\end{verbatim}
Hier werden die richtigen Shebangs eingesetzt, der aktuelle Dateiname,
wichtige Bibliotheken\footnote{Die Manpage zu Perl definiert es als
  einen Bug in der Sprache, dass der Schalter \texttt{-w} nicht
  absolut notwendig ist.  Dieses Thema wäre mit dieser Konfiguration
  bereits erledig} und einiges mehr.  Beim Code für Perl sind noch
zwei Sachen hervorzuheben:
\begin{enumerate}
\item Das Skript wird auch gleich ausführbar gespeichert.  Es ist doch
  wirklich lächerlich, wie oft man in seinem (Programmierer-) Leben
  schon \texttt{chmod +x} getippt hat, wenn man ein neues Skript ins
  Leben gerufen hat!
\item Der Code verwendet noch eine weitere Hilfsfunktion.  Die Zeile
  mit der \texttt{(yes-or-no-p ...)}-Abfrage fragt nach, ob man hier
  nur ein schnelles Skript erstellen möchte oder aber ein richtiges
  Projekt.  In letzterem Falle verwendet es noch eine Hilfsfunktion,
  die weitere angenehme Codefragmente einsetzt, und im
  Abschnitt~\ref{sec:skeletons} vorgestellt wurde.
\end{enumerate}

Einige Vorraussetzungen, damit dieser Code richtig funktionieren kann,
sind:
\begin{verbatim}
;; expliziter Copyright-Holder
(setq my-copyright-holder "Stefan Kamphausen")

;; ...
;; expliziter oder aber default Copyright-Holder
(if (boundp 'my-copyright-holder)
    (setq auto-insert-copyright my-copyright-holder)
  (setq auto-insert-copyright (user-full-name)))
\end{verbatim}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\section{C und C++ -- Old-School Coding}
\label{sec:c-cc}
Manchmal fragt man sich, warum selbst im XEmacs das Arbeiten mit C und
C++ so archaisch anmutet.  Es existiert beispielsweise kein
Kontext-Menu im c-mode.  Aber dann kommt doch wieder die Erkenntnis,
dass C halt alt ist.  Dennoch gibt es eine Menge angenehmer Dinge, die
Compilation, Debugging, Navigation und Bearbeitung in und von
C/C++-Projekten erleichtern:
\begin{itemize}
\item speedbar -- Nicht zu verzichten!  Eines der besten
  Navigationswerkzeuge im XEmacs.
\item ECB -- Der Emacs Code Browser, ein mächtiger Klassen-Browser.
\item \package{functions-menu} -- Zum Navigieren in der aktuellen
  Datei. 
\item \variable{paren-backwards-message} -- Bei (zu) großen Blöcken
  wird der Text bei der passenden Klammer angezeigt.
\item \package{ctypes} -- erkennt selbsdefinierte Typen und Klassen
  und sorgt für das Syntax-Highlighting
\item GUD -- Der Grand Unifying Debugger
\item \mx{compile} -- ruft \programm{make} oder ein anderes Programm
  zum Kompilieren, parst die Ausgabe und lässt die Fehlerstellen
  direkt anspringen.
\item \mx{mode-compile} -- Erstellt die Kommandozeile für
  \mx{compile}. 
\item \package{setnu} -- Zeilennummer.
\item \package{etags} -- TAGS-Interface, ebenfalls zum Navigieren.
\end{itemize}
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\section{SQL -- Ein Sprache für Manager}
\label{sec:sql}
Dem Vernehmen nach wurde SQL tatsächlich dafür konzipiert, dass
Manager ihre Reports (Umsatzzahlen etc.) aus einer Datenbank holen
können.  Für den EDV-Mann in einem Unternehmen in den 70ern war das
bestimmt eine gute Sache.  Heute stecken wir immer noch mit dieser
Sprache in der Datenbankerei fest\footnote{Die zwischen den Zeilen
  leicht mitschwingende Abneigung gegen SQL spiegelt natürlich nur die
  persönliche Meinung des Autors wieder}.  Immerhin kann man sich das
Leben mit XEmacs ein wenig angenehmer gestalten.

Für SQL exisiteren die üblichen Angenehmlichkeiten wie
Syntaxhighlighting sowie Einrückung.  Zudem kann sich XEmacs zu einem
Datenbank-Prozess verbinden und dann Teile des SQL-Buffers dorthin
schicken.  Spezialisierungen für gängige Datenbanksysteme sind
vorhanden.

Ein wenig Code \ldots
\begin{verbatim}
(autoload 'sql-mode "sql" "SQL Editing Mode" t)
(setq auto-mode-alist
      (append
       '(("\\.sql$" . sql-mode))
       auto-mode-alist))
(add-hook 'sql-mode-hook
          '(lambda ()
             ;; lokale keybindungs hierhin
             ;; ...
             ;; speziell fuer Oracle...
             (sql-highlight-oracle-keywords)
             ))
\end{verbatim}
%$ shutup fontlock

Mit \mx{sql-mysql} wird beispielsweise eine Verbindung zu einer
MySQL-Datenbank erzeugt.  Danach kann in einem Buffer, der sich im
sql-mode befindet, über das Menu der SQLi-Buffer auf den vorher
geöffneten gesetzt werden.  Danach können Teile des Buffers an die
Datenbank gesendet werden.
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\section{CVS -- Immer auf Stand}
\label{sec:CVS}
%% FIXMESCREENSHOT
Immer die aktuellen Quellen des Lieblings-Editors oder aber die
Projekt-Verwaltung mit dem Bekannten auf einer
Open-Source-Entwicklungs-Seite?  Oftmal lautet die Lösung dazu CVS,
das Concurrent Versions System.  Neben dem klassischen
Kommandozeilen-Programm tummeln sich allerhand andere Werkzeuge, unter
anderem auch \emph{PCL-CVS} im XEmacs.  

Ist ein Programm-Baum erst einmal lokal gespeichert\footnote{Wie das
  geht, wird üblicherweise auf den allermeisten Webseiten, die
  CVS-Downloads anbieten, so genau beschrieben, dass man den Code
  einfach von dort in die Kommandozeile kopieren kann}, reicht es, im
XEmacs einmal \mx{cvs-status} aufzurufen.  Sofort wird der XEmacs nach
dem zu untersuchenden Verzeichnis fragen und nach Eingabe dessen die
dort hinterlegte Methode zum Abgleich mit dem Server verwenden.  Der
neu entstandene CVS-Buffer erklärt sich eigentlich von selber, wenn
man einmal die rechte Maus auf einem Eintrag bemüht.

Das Wichtigste in Kürze:

\begin{center}
  \begin{tabular}[h]{|c|p{0.66\textwidth}|}
    \hline
    \key{O} & Update (sprich Opdate ;-).  Holt die aktuellste Version vom
    Server.\\ 
    \hline
    \key{=} & Zeige die Unterschiede als Ausgabe des
    \programm{diff}-Programms an.\\
    \hline
    \key{C} & Commit: spiele die eigene Version auf den Server.\\
    \hline
  \end{tabular}
\end{center}

Es sei an dieser Stelle darauf hingewiesen, dass es auch für die
Versionsmanagementsysteme \programm{arch} und \programm{svn}
entsprechende XEmacs-Frontends gibt, die eine ähnliche Struktur
aufweisen (siehe\cite{psvn} und FIXMEREF).
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\section{sawfish-mode}
\label{sec:sawfish}
Sawfish ist ein Window-Manager, also ein eher kleines und schlankes
Programm, das Rahmen um die Programm-Fenster auf dem Bildschirm
zeichnet und dafür sorgt, dass man die Fenster auch bewegen kann
(natürlich noch etwas mehr als das).  Interessant wird Sawfish
dadurch, dass auch er im Wesentlichen in einem LISP-Dialekt (librep)
geschrieben ist.  Damit geht dann einher, dass man in einem
Sawfish-Client LISP-Code evaluieren kann, der sofort im laufenden
Window-Manager aktiv wird und eine Aktion durchführt oder aber eine
Funktion zur Verfügung stellt.

Es gibt nun einen XEmacs-Mode, der uns genau diese Verbindung zum
Sawfish liefert (\cite{sawfishmode}).

Konfigurations-Code:

\begin{verbatim}
;; needs sawfish.el from
;; <URL:http://www.davep.org/emacs/#sawfish.el>
(autoload 'sawfish-mode "sawfish" "sawfish-mode" t)
(setq auto-mode-alist 
      (append 
       '(("\\.sawfishrc$"  . sawfish-mode)
         ("\\.jl$"         . sawfish-mode)
         ("\\.sawfish/rc$" . sawfish-mode))
       auto-mode-alist))
\end{verbatim}
%%$
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\section{ediff -- Was macht es für einen Unterschied?}
\label{sec:ediff}
\begin{figure}
  \begin{center}
    \includegraphics[width=0.9\textwidth]{ediff}
    \caption{Ein Ediffbeispiel.  Die Dateien werden im Tarball
      mitgeliefert.  Oben rechts sieht man den kleinen Kontrollframe,
      in dem die Eingabe eines "`?"' bewirkt, dass er sich in einen
      größeren mit einer Angabe der meisten Tastaturbelegungen
      verwandelt.  Im Hauptframe werden die beiden Dateien in je einem
      Fenster dargestellt und die Unterschiede sogar nochmal genau in
      der Zeile hervorgehoben.  Die untere Region ist leicht
      hervorgehoben, da sie der nächste Unterschied sein wird.  Aber
      das steht ja eigentlich auch so im Text der Beispiele.}
    \label{fig:ediff}
  \end{center}
\end{figure}

Viele Uni*x-Anwender kommen früher oder später in die
Situation, das Programm \programm{diff} zu
verwenden, um Unterschiede in Dateien aufzuspüren. Es ist
ein Kommandozeilen-Tool, das auch für das \emph{Patchen}
(Flicken) von Programm-Quellen verwendet wird.

Selbstredend möchte man die Ergebnisse solcher Untersuchungen auch oft
gleich in Dateien einbauen. Oder am besten gleich ganze
Verzeichnis-Bäume rekursiv bearbeiten. Und selbstredend geht das im
XEmacs :)

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\subsection{Unterschiede in Dateien}
Mit \mx{ediff-files} startet man eine Session (Sitzung) in
\package{ediff}, dem XEmacs-Front-End zu \programm{diff}.
Alternativ findet man ediff in den Menus  unter
Tools->Compare-> \ldots

XEmacs erwartet als nächstes zwei Dateinamen (im Minibuffer), nämlich
die zu vergleichenden Dateien. Diese werden auch als Buffer A und
Buffer B bezeichnet. Es öffnet sich dann ein neuer, sehr kleiner
Frame, der zwei Informationen enthält (vgl.~auch
Abbildung~\ref{fig:ediff}): 
\begin{enumerate}
\item Einen Hinweis darauf, das sich selbiges Fenster durch Drücken
  von \key{?} in ein Hilfe-Fenster verwandeln lässt.
\item Eine sehr verkleinerte Modeline, die die Anzahl an Unterschieden
  und den aktuell angezeigten Unterschied wiedespiegelt.
\end{enumerate}

Die Bedienung ist denkbar einfach durch Tasten und ihre Belegungen
zeigt Tabelle~\ref{tab:ediff-keys}.

\begin{table}[htbp]
  \begin{center}
    \begin{tabular}[h]{|c|p{0.66\textwidth}|}
      \hline
      \textbf{Tasten}&\textbf{Wirkung}\\
      \hline
      \key{SPACE}& Springt zum nächsten Unterschied ohne irgendwelche
      Änderungen vorzunehmen.\\ 
      \hline
      \key{A} (\key{B}) & Übernimmt die Version aus Buffer A in Buffer B, 
      bzw.\ umgekehrt. \\
      \hline
      \key{q} & Beendet die ediff-Sitzung mit vorheriger Abfrage. Lässt
      beide Buffer geöffnet.\\
      \hline
      \key{rb}/\key{ra} & Rückgängig im jeweiligen Buffer ("`r"' für
      "`restore"')\\
      \hline
      \key{wb}/\key{wa} & Speichern des jeweiligen Buffers ("`w"' für
      "`write"')\\
      \hline
      \key{|} & Ändert das Layout von \emph{übereinander} zu
      \emph{nebeneinander}.\\
      \hline
      \key{m} & Zieht das XEmacs-Fenster auf volle Größe auf.\\
      \hline
      \key{\#\#} & Ingoriert Unterschiede, die lediglich Whitespaces
      (also SPACE, TAB, NEWLINE) sind.\\
      \hline
    \end{tabular}
    \caption{Bedienung und Tastenbelegung von Ediff.}
    \label{tab:ediff-keys}
  \end{center}
\end{table}

Weitere Kommandos entnehme der begeisterte Anwender dann der
Dokumentation (erst das \key{?}, ausführliche
Info-Dokumentation mit \key{E}.

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\subsection{Farbcodes}
Die mittels \programm{diff} entdeckten Unterschiede werden im Buffer
farblich codiert dargestellt und sind in
Tabelle~\ref{tab:ediff-colors} aufgelistet.

\begin{table}[htbp]
  \begin{center}
    \begin{tabular}[h]{|c|p{0.66\textwidth}|}
      \hline
      \textbf{Farbcode}&\textbf{Bedeutung}\\
      \hline
      Grau&Unterschied, aber nicht der aktive\\
      \hline
      Gelb&Nur Whitespace-Unterschiede\\
      \hline
      Blau& Hervorgehoben in einer ohnehin schon farbigen Zeile steht
      der tatsächliche Unterschied, sofern er festgestellt werden
      konnte. \\
      \hline
      Weitere Farben&Weiss ich auch nicht, hab ich aber auch noch nie
      gebraucht ;-). \\
      \hline
    \end{tabular}
    \caption{Farbcodes von Ediff.}
    \label{tab:ediff-colors}
  \end{center}
\end{table}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\subsection{Verzeichnisse}

Um ganze Verzeichnis-Bäume rekursiv zu untersuchen, benötigt
man \mx{ediff-directories} Dann wird ein Buffer geöffnet,
der eine Liste von Dateien und Verzeichnissen mit einigen
Informationen zu selbigen enthält. Jedes Verzeichnis und
jede Datei sind eine \emph{Session}, die mit
\key{RETURN} gestartet werden kann.

Dann verhält sich ein geöffnetes Verzeichnis genauso wie das
erste Verzeichnis, und eine Datei so, wie oben
beschrieben. Wenn eine Datei-Session beendet wurde, geht der
Cursor gleich auf die nächste Session, so dass man gleich
wieder starten kann. Dazu empfiehlt es sich, bei der Frage
nach einem Filter am Anfang, alle Backup-Dateien
auszublenden, wenn man welche hat.

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\subsection{Weiteres}

Das \package{ediff}-Paket liefert noch viel mehr
Funktionalität, aber ich bin nur so weit eingestiegen, wie
hier beschrieben, und habe bisher noch nicht mehr
gebraucht. 

Mit \mx{ediff-files3} lassen
sich auch drei Dateien vergleichen. Dann existieren noch
Funktionen auf der \key{C}-Taste, für den
dritten Buffer. Auch drei Verzeichnisse lassen sich
vergleichen \ldots

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\section{VM}
\label{sec:vm}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\subsection{Einleitung}
"`You've got email."' "`New Mail arrived."'. Ein Icon ändert sein
Aussehen von einem leeren Briefkasten zu einem gefüllten. So oder so
ähnlich geschieht es tagtäglich auf mindestens ganz vielen Rechnern
-eher mehr- weltweit. Hat sich gandalf aus dem Chat wieder gemeldet?
Ist meine Bestellung beim Online-Shop aufgenommen worden? Oder ist es
Traffic auf der XEmacs-Mailingliste? Aufklärung schafft hier nur ein
User Mail Client, und genau dort wird es wahnsinnig. Manchmal muss man
sich fragen, ob es von irgendeiner Gattung Programm mehr Variationen
gibt als von Mailreadern\footnote{OK, IRC Clients, Textedioren und
  Thumbnail-Gallery-Generatoren gibt es ähnlich oft}. Angefangen im
Terminal mit \programm{mail}, \programm{pine} oder \programm{elm} über
diverse eigene Clients bis hin zu den integrierten Mailreadern in
Gnome und KDE, \emph{Evolution} und \emph{KMail}.  Mozillas
Mailprogramm \emph{Thunderbird} zählt sicherlich auch zu den massiv
verbreiteten und für jedes verfügbare Toolkit (Tk, GTK+, QT, ncurses,
etc) gibt es mehrere eigenständige Projekte. Hier soll nun ein
weiteres vorgestellt werden: Der VM.

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\subsection{Vorbereitung}
VM findet sich einerseits automatisch in den Distributionen
andererseits auf der VM Homepage (\cite{vm}), und wurde von Kyle Jones
geschrieben. VM funktioniert sowohl in einem Terminal als auch mit X,
was für remote Verbindungen sehr nützlich sein kann. Man startet ihn
am besten mittels

\begin{verbatim}
xemacs -f vm
\end{verbatim}
in einem dedizierten XEmacs-Prozess, den man sich bei heutiger Rechen-
und Speicherleistung sicherlich leisten kann. Ansonsten wird er
einfach im XEmacs durch

\begin{verbatim}
M-x vm
\end{verbatim}

gestartet oder aber in der Toolbar durch einen Klick auf das
Mail-Icon, falls jenes auf das Starten von VM gesetzt wurde (vermöge
\verb$(setq toolbar-mail-reader 'vm)$, oder aber unter Options->
Customize-> Emacs-> Environment-> Toolbar-> Mailreader). Dann öffnet
sich ein Fenster wie in Abbildung~\ref{fig:vm1} zu sehen.

\begin{figure}
  \begin{center}
    \includegraphics[width=0.9\textwidth]{vm-1}
    \caption{Ein VM-Fenster wie es bei mir vor vielen Jahren mal
      aussah.}
    \label{fig:vm1}
  \end{center}
\end{figure}

Jetzt müssen wir als erstes mal an unsere Mail rankommen. Es mag sein,
dass der Systemadministrator des lokalen Netzes bereits dafür gesorgt
hat, dass all unsere Mail in \file{/var/\-spool/\-mail/\-[USER\-NAME]}
zu liegen kommt, vielleicht besorgen wir das auch schon selber mittels
\programm{fetchmail}. Dann ist das all kein Problem mehr, weil es
bereits automatisch funktioniert. Vielleicht haben wir aber auch
irgendwo einen POP3-Account, von dem die Mail geholt werden soll. Dann
heißt es erste Konfigurationen am VM vorzunehmen. Dieses kann in der
\file{\$HOME/.xemacs/init.el} geschehen, wovon aber abzuraten ist,
denn VM hat auch seine eigene Initialisierungsdatei: \file{~/.vm}.
Diese Datei sollte mit der Zeile:

\begin{verbatim}
;; -*- Mode: Emacs-Lisp -*-
\end{verbatim}            

beginnen, damit XEmacs weiß, wie er mit der Datei umzugehen hat, weil
sie ja nicht die Endung \file{.el} aufweist. Jetzt zeigen wir VM den
Weg zu unserer Mail:

\begin{verbatim}
(setq vm-spool-files
      (list
       (concat "/var/spool/mail/"
               (getenv "USER"))
       (concat "pop.server1.net:110:pass:"
               (getenv "USER") "daspasswort")
       "pop.server2.org:110:pass:username2:*"))
\end{verbatim}

Dieses Beispiel lässt VM erstens die lokale Mail abholen und zweitens
bereits zwei verschiedene POP Mailboxen abfragen. Die entsprechenden
Server sind natürlich noch einzustellen\ldots Wer es nicht mag, dass
das POP Passwort im Klartext lesbar im Heimatverzeichnis rumliegt
\footnote{vielleicht auch mal Gedanken um die Leserechte anderer an
  der eigenen \file{.vm} machen\ldots}, trägt hier einfach ein
\verb$*$ wie beim zweiten Server im Beispiel ein. Dann fragt VM nach
dem Passwort beim ersten Abholen und merkt es sich für den weiteren
Verlauf der Sitzung.

Da wir gerade ein wenig konfigurieren, gleich noch ein paar
Kleinigkeiten eingestellt: 

\begin{verbatim}
(setq vm-mail-check-interval 300) ; schau nach post alle 5min
\end{verbatim}

Das erklärt sich wohl von selber, oder? Die Zeitangabe erfolgt in
Sekunden.  Falls man nicht wünscht, dass VM nach Mail schaut (z.\,B.\ 
weil das bereits das kleine Tool im Panel tut), schafft

\begin{verbatim}
(setq vm-mail-check-interval nil)  ; nicht nachschauen
\end{verbatim}

Abhilfe. Das ist vor allem dann sinnvoll, wenn man nur an einer
Wählverbindung sitzt\footnote{Solche Not leidet selbst im Jahre 2004
  noch der Autor dieser Zeilen}.

Soweit so gut; und wie oft soll VM die Mail dann auch abholen? 
\begin{verbatim}
(setq vm-auto-get-new-mail 900) ; post alle 15mins abholen
\end{verbatim}

Bleibt noch die Frage, wo die Mail gespeichert werden soll. 
Es ist sicherlich Geschmackssache, wie man dazu steht, wenn Programme
selbsttätig irgendws im eigenen Heimatverzeichnis erstellen, aber
Gerümpel liegt dort eigentlich schon genug herum, so dass man sein
Mail-Verzeichnis sicherlich lieber unterordnet:

\begin{verbatim}
(setq vm-primary-inbox "~/Mail/INBOX") ; standard: ~/INBOX
\end{verbatim}
%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\subsection{Mail lesen}
\begin{figure}
  \begin{center}
    \includegraphics[width=\textwidth]{vm-toolbar}
    \caption{Die Toolbar des Mailprogramms VM.  Die Beschriftungen
      sollten soweit eigentlich selbsterklärend sein.  Die einzelnen
      Funktionen werden in Tabelle~\ref{tab:vm-actions} näher
      erläutert.}
    \label{fig:vm-toolbar}
  \end{center}
\end{figure}

\begin{table}[htb]
  \begin{center}
  \begin{tabular}{|c|p{0.66\textwidth}|}
    \hline
    \textbf{Get Mail} \key{g}
    &
    Holt die Mail aus allen Mailboxen, die in \verb$vm-spool-files$
    angegeben sind.\\ 
    \hline
    \textbf{Delete/Undelete} \key{d}/\key{u} 
    &
    Markiert Nachrichten als gelöscht bzw. hebt diese Markierung
    wieder auf. Die Nachrichten werden jedoch nicht sofort gelöscht;
    das geschieht erst durch Aufruf von \command{vm-expunge-folder}, was auf
    dreimal \key{\#} liegt, um versehentliches Löschen zu vermeiden. \\
    \hline
    \textbf{Autofile}
    &
    Autofile (s.\,u., sehr praktisch!)\\
    \hline
    \textbf{Speichern} \key{s}
    &
    Speichert die aktuelle Nachricht auf Festplatte. Der erscheinende
    Dialog ist nicht schwierig zu verstehen. Falls man eine neue Datei
    einrichten möchte, klickt man einfach auf "`Click here for Keyboard
    Interface"', falls man vorher mit der Maus unterwegs
    war. Speichert man ab, indem man \key{s} drückt, ist man von vorneherein
    im Keyboardmodus und kann einfach einen neuen Namen angeben (hier
    wird der auto-file-Eintrag, sofern vorhanden, oder der zuletzt
    eingegebene Wert als Default angeboten). \\
    \hline
    \textbf{Antworten} \key{r}/\key{R}
    &
    Öffnet einen Buffer, in dem man eine Antwort Mail auf die aktuelle
    verfassen kann. Dabei geht der Reply Button davon aus, dass man den
    Text der Mail als Zitat einfügen will, während man mit der Tastatur
    die Wahl zwischen \key{r}: ohne und \key{R}: mit
    Zitattext hat. \\
    \hline
    \textbf{Mail schreiben} \key{m}
    &
    Öffnet einen Buffer, in dem man eine neue Mail verfassen kann. Dabei
    stehen einem natürliche alle Funktionen eines ausgewachsenen XEmacs
    offen. Ich erwähne das, weil das seinerzeit für mich der Grund war
    auf VM umzusteigen. \\ 
    \hline
    \textbf{MIME interpretieren} \key{D}
    &
    VM kann diverse MIME Typen (wie zB jpg's) gleich mitten im Text
    anzeigen, oder aber einen kleinen Balken einblenden, der anzeigt,
    dass da ein MIME Objekt sitzt. Mit diesem Knopf kann man so durch
    die Anzeigemöglichkeiten für MIME blättern. Einfach testen\ldots \\
    \hline
    \textbf{Archive besuchen} \key{v}
    &
    Will man alte mit dem File-Kommando abgespeicherte Mails nochmal
    lesen, wird man sie mit \emph{Visit} besuchen. Jedes so besuchte File
    sieht aus wie eine eigene INBOX und lässt sich mit \key{q} einfach
    wieder beenden (ggf, muss man danach wieder in den
    Inbox-Summary-Buffer wechseln). \\
    \hline
    \textbf{Quit/Help} \key{q}
    &
    Der Quit Button (Tastatur: \key{q}) erklärt sich wohl von selbst. Falls
    nicht: Don't Panic \ldots Hilfe wartet schon :-)\\
    \hline
  \end{tabular}
    \caption{VM Aktionen}
    \label{tab:vm-actions}
  \end{center}
\end{table}

Gut, jetzt wird die Mail gelesen. Die Navigation durch die
\buffer{Inbox Summary} (so heißt der Buffer, der alle Mails in der
Inbox auflistet) ist ziemlich intuitiv (wenn man die XEmacs Standards
kennt ;-): Scrollen mit der Scrollbar oder den Cursortasten, anwählen
mit der mittleren Maustaste oder \key{RETURN} oder \key{SPACE},
nochmal \key{SPACE} für das Weiterblättern im angezeigten Text der
Mail (Buffername: \buffer{INBOX}).  Zum Auslösen der diversen Aktionen
kann man einerseits die Toolbar benutzen, anderseits aber auch die
Tastaturkürzel oder das Menu auf der rechten
Maustaste. Tabelle~\ref{tab:vm-actions} und
Abbildung~\ref{fig:vm-toolbar} beschreiben eine
kleine Sammlung diverser Aktionen und wie sie erreicht werden können. 


%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\subsection{Toolbar für Fortgeschrittene}
Sicherlich wird bei vielen die Toolbar etwas andere Buttons enthalten,
als das bei meinem VM der Fall ist. Die Lösung ist einfach: Folgender
Code in der ~/.vm stellt die Toolbar ordentlich ein: 

;; Configure the toolbar:
(setq vm-use-toolbar
'(getmail
delete/undelete
autofile file
reply compose
mime visit 
nil quit help))


Die Beschreibung von vm-use-toolbar ist sehr aufschlussreich. Wichtig:
das Symbol nil darf nur einmal auftauchen: Alle Buttons vorher werden
linksbündig bzw. am oberen Rand der Toolbar ausgerichtet, alle danach
rechtsbündig bzw. am unteren Rand, je nach Orientierung der
Toolbar. Es mag sein, dass für das Abholen von Mail noch die Zeile
(fset 'vm-toolbar-getmail-command 'vm-get-new-mail) in die .vm
einzutragen ist. 

Mittels

\begin{verbatim}
(setq vm-toolbar-pixmap-directory "/pfad/zu/den/vm/pixmaps/")
\end{verbatim}            

kann man ein anderes Verzeichnis als das Standardverzeichnis
(\file{/xemacs/\-installations/\-dir/\-etc/\-vm/}) für die Bilder (nicht nur)
in der Toolbar wählen, auch die Pixmaps für die MIME Typen sind dort
abgelegt. Ich habe dafür eigene Pixmaps erstellt, die dem VM ein
Aussehen, wie im abgebildeten Screenshot verpassen. Die geneigte
Systemadministratorin kann sie natürlich auch systemweit installieren.

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\subsection{Autofile}
Der Autofile Mechanismus ist irre praktisch! Man kann Muster für jeden
Mail-Header angeben und danach eine Standard-Datei angeben, in die man
diese Nachrichten speichern kann. Das Einrichten dieser Muster sieht
so aus: 

\begin{verbatim}
     (setq vm-auto-folder-alist
           '(("from"
         (".*kamphaus.*" . "Perso/own")
         (".*chef.*" . "Wichtig/el-chefe")
         )
        ("to"
         (".*xcf.*" . "Listen/gimp")
         (".*emacs.*" . "Listen/xemacs")
         )))
\end{verbatim}        

Hier werden zwei Muster für den Absender (from) angegeben. .* meint
eine beliebig lange Zeichenkette (auch null) aus beliebigen
Zeichen. Zwei weitere Muster für den Adressaten (to) sorgen dafür,
dass sich die bemerkenswerten Nachrichten auf der Gimp- und der
XEmacs-Mailingliste mit einem einfachen Mausklick abspeichern
lassen. Da Wer meist mit der Tastatur navigiert, braucht diese
Funktion vielleicht auf dem einfachen a: 

\begin{verbatim}
(local-set-key "a" 'vm-toolbar-autofile-message)
\end{verbatim}            

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\subsection{Verschiedenes}
Weitere Einstellungen entnehme die interessierte Leserin bitte meinem
Beispiel für eine vm-init.el 

\key{M-s} durchsucht übrigens alle Nachrichten in einem Folder ganz
so, wie man es von incremental-search kennt.

Das Rechte-Maus-Menu ist auf einem MIME Objekt anders als sonst: hier
kann man z.\,B.\ abspeichern. 

Es gibt noch einen großen Bruder: Gnus ist sowohl Mail- als auch
Newsreader mit einer unglaublichen Anzahl von Features. 

Die Tasten \key{f} (bzw. \key{F}) agieren wie \key{r} (bzw.\ \key{R}),
senden aber an alle Empfänger.
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\section{Gnus}
\label{sec:gnus}
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\subsection{Einleitende Worte}
\label{sec:gnus-einleitende-worte}
OK, längere Zeit stand an dieser Stelle der lapidare Hinweis, dass ich
keine Ahnung von Gnus habe, und dieses Kapitel nur geschrieben werden
würde, wenn es andere schreiben oder ich dereinst auf Gnus umsteigen
würde.  Natürlich ist der zuvorderst beschriebene Fall nicht
eingetreten.  Der zweite hingegen mittlerweile doch.

Daraus ergibt sich aber auch gleich ein Warnhinweis: in Sachen Gnus
bin ich sicherlich noch ein Anfänger, auch wenn ich so einiges
inzwischen für mich gelöst habe.

Was ist Gnus?  Gnus ist ein XEmacs-Paket zum Lesen von Usenetnews, ein
Newsreader.  In einem zweiten Schritt transferiert Gnus das Konzept
der Newsgruppen auf das Lesen ganz normaler EMails.  Das ist
konzeptionell ein himmelweiter Unterschied zu allen (?) anderen
EMailprogrammen, die eingehende Post einsammeln und in einem oder
mehreren Postfächern darstellen!  Zudem gilt Gnus als sehr
standardkonform, kann Gnus vielerlei bereinigen, was andere verbocken
und ist, naturgemäß, da in ELisp geschrieben, grenzenlos
konfigurierbar.

Ich möchte für dieses Kapitel noch einige Einschränkungen geben:
\begin{itemize}
\item Es ist lange noch nicht fertig.
\item Die Beispiele und Konfigurationen sind noch nicht lange genug im
  harten Alltagseinsatz getestet.
\item Ich bin ein Gnus-Neuling, vielleicht mache ich hier auch echten
  Quatsch.
\item Es wird nie eine vollständige Doku von Gnus werden, das wäre
  echt zu lang, aber es zeigt \emph{einen} Weg durch den Dschungel.
\end{itemize}
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\subsection{Einrichtung}
\label{sec:basics}
Wer sich auf die Suche nach Dokumentationen zu Gnus begibt, wird immer
wieder beschrieben finden, wie man Gnus zuerst zum Newslesen
einrichtet und dann die EMailfunktion nachlegt.  Dazu sei an dieser
prominenten Stelle erwähnt, dass man auch EMail als primäre Funktion
wählen kann, ja sogar gänzlich auf News verzichten kann.  Die primären
Verbindungen, die mit der Variablen \variable{gnus-select-method}
meist auf News eingerichtet werden, können ebensogut mit den meist
unter \variable{gnus-secondary-select-methods} eingerichteten
Mailverbindungen belegt werden.  Die sekundären Verbindungen sind eine
Mischung aus der primären sowie \emph{fremden} (foreign), verhalten
sich aber --so sagt die Dokumentation-- im Wesentlichen so wie die
primären. 

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\subsubsection{News}
\label{sec:gnus-news}
Nachdem dieses gesagt ist, kann auch ich einschwenken auf den üblichen
Pfad und zunächst den Newsgruppenzugriff konfigurieren:

\begin{verbatim}
(setq gnus-select-method '(nntp "news.newsserver.example"))
(add-hook 'nntp-server-opened-hook 'nntp-send-authinfo)
\end{verbatim}

Dabei sorgt die zweite Zeile dafür, dass bereits ganz zu Beginn die
Authentifizierung am Newsserver erfolgt, was bei solchen Servern, die
bereits für das Lesen eine Authentifizierung verlangen, erforderlich
ist.  Bleibt die Frage, woher kennt Gnus meinen Usernamen und
Passwort?  Die stehen in der Datei \file{~/.authinfo}\footnote{Genauer
  gesagt in der Datei, die in \variable{nntp-authinfo-file}
  beschrieben ist.}, deren Format sich wie folgt darstellt:

\begin{verbatim}
machine news.newsserver.example login meinusername password sehrgeheim
machine mein.imapserver.example login ichbinimap password weisskeiner
\end{verbatim}

Dabei können noch einige weitere Schlüsselwörter verwendet werden.  Im
Falle einer Newsserververbindung kann man manchmal noch \texttt{force
  yes} in einer Zeile gebrauchen, eine IMAP-Verbindung wird oft nur
durch Angabe von \texttt{port imap} automatisch von Gnus detektiert.

Das Funktionieren der Authentifizierung merkt man leicht daran, ob man
nach Benutzername und Passwort gefragt wird, oder eben nicht.

Eine häufige Fehlerquelle sind falsche Benutzerrechte: diese Datei
darf \textbf{nur} für den Benutzer selber lesbar sein:
\begin{verbatim}
shell> chmod 600 ~/.authinfo
\end{verbatim}
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\subsubsection{Mail}
\label{sec:gnus-mail}
Für unser EMail-Setup verwenden wir mal ein etwas ausführlicheres
Beispiel:
\begin{itemize}
\item Es gibt einen IMAP-Server (ein weit verbreitetes, kommerzielles
  Produkt) im lokalen Netz.
\item Dort existiert ein Postfach für uns, dessen Inhalt wir aber
  gerne auf unsere eigene Platte bringen wollen (auch um den Server
  ein wenig zu entlasten).
\item Für eine Arbeitsgruppe liegt dort ein weiteres Postfach (kein
  öffentlicher Ordner, sondern ein eigenes Postfach), auf das wir
  gerne zugreifen möchten.  Dort wollen wir aber keine Mails löschen
  oder ähnliches.
\item Über das Hauptpostfach empfangen wir auch unsere private EMail,
  die von all unseren privaten Accounts weitergeleitet wird.
\end{itemize}
Natürlich muss am Ende auch noch die Jonglage mit den verschiedenen
Identitäten funktionieren, aber das schieben wir mal
(~\ref{sec:gnus-identities}). 

Für die Hauptmailbox verwenden wir das (empfohlene) nnml-Mailbackend.
Es gibt noch andere, aber nnml scheint mir das angesagte zu sein: es
speichert eine Mail pro Datei, so dass große \emph{Gruppen} keine
Performance kosten (und die Suche mit \programm{grep} gut
funktioniert).  Dazu konfigurieren wir:

\begin{verbatim}
(setq gnus-secondary-select-methods
      '((nnml "")))
\end{verbatim}
und definieren die Mailbox mit einer weiteren Variablen:

\begin{verbatim}
;; IMAP als POP++
(eval-after-load "mail-source"
  '(add-to-list 'mail-sources
               '(imap
                 :server "imapserver"
                 :user "username"
                 :password "mypassword"
                 :fetchflag "\\Seen" ;; don't delete
                 )))
\end{verbatim}

Die Zeile mit dem \texttt{fetchflag} bedeutet,  dass die Mail auf dem
Server belassen wird.  Das ist am Anfang praktisch, wenn man Gnus im
Parallelbetrieb zu seinem bisherigen Mailprogramm laufen lässt, später
kommt das natürlich weg.  Dieser Modus von IMAP wird in der Doku zu
Gnus als \emph{POP++} bezeichnet, weil es eigentlich nur ein
fortgeschrittenes Abholen von EMail ist, ohne auf die ganzen
Funktionen von IMAP zuzugreifen.  Die eingehende Post werden wir
gleich von Gnus untersuchen lassen und Gnus wird uns dafür
verschiedene \emph{Gruppen} anlegen (siehe
Abschnitt~\ref{sec:gnus-nnmlsplit}).  Es wurde ja eingangs bereits
darauf hingewiesen, dass Gnus auch EMaillesen wie Newslesen
behandelt.  Eine Mailbox ist also nur eine Newsgruppe, vielleicht mit
anderen Eigenschaften, aber die kann man auch für Newsgruppen einzeln
vergeben.  Das dahinterliegende Backend spielt keine Rolle mehr.

Wenden wir uns nun dem Zugriff auf das andere Postfach zu.  Das
hierfür gewählte Backend ist \emph{nnimap} und es konfiguriert sich
so:
\begin{verbatim}
(setq gnus-secondary-select-methods
      '((nnml "")
        (nnimap "imap-server"
                ;; somehow these settings don't show up?
                (nnimap-address "imap-server")
                (nnimap-authinfo-file "~/.imap-otherbox")
                ;; hopefully these do...
                (nnimap-list-pattern ("INBOX.*"))
                (nnimap-expunge-on-close never)
                )
        ))
\end{verbatim}
Man kann an den Kommentaren bereits erkennen, dass bei mir noch nicht
alles ganz so funktioniert, wie es soll \ldots

Auch hier taucht wieder ein \texttt{authinfo}-File auf und dort wartet
auch ein wichtiger "`Trick"'.  Zur Anwahl des anderen Postfachs muss
der Benutzername sehr ausführlich angegeben werden:

\begin{verbatim}
machine mein.imapserver.example login "domaene/username/postfach" password egal 
\end{verbatim}

Dabei zeigt meine Erfahrung\footnote{ohne tieferes Verständnis der
  Materie}, dass für den Postfachnamen der \emph{Kurzname} des
Serversystems gewählt werden sollte.  Ich hatte einen Fall vorliegen,
in dem der ausführliche Name der Form "`Unsere Gruppe [Ich\&Du]"'
folgte.  Das hat nicht funktioniert.  Der Kurzname "`unseregruppe"'
hingegen führte zum gewünschten Ergebnis.

Im Prinzip lassen sich so und durch die Angabe von
\variable{nnimap-authinfo-file} beliebig viele Postfächer abfragen,
bei mir persönlich klappt das noch nicht, was aber sicher an mir
liegt. 

In den Kapiteln zur Mailverteilung (\ref{sec:gnus-nnmlsplit}) und zur
Klärung der Identität (\ref{sec:gnus-identities}) werden wir dafür
sorgen, dass die verschiedenen (privaten) EMailadressen ordentlich
behandelt werden.

Es ist zu beachten, dass man die zugänglichen Gruppen per nnimap nicht
sofort angezeigt bekommt.  Um die wichtigen auszuwählen, geht man
zunächst in die Liste der Server (\verb$^$) und wählt dort mit
\key{RET} den IMAP-Server aus.  Es dauert dann eine Weile, bis
schließlich eine Liste der verfügbaren Postfächer angezeigt wird.
Diese Liste kann durch öffentliche Order sehr lang werden, man kann
aber die Liste auch filtern:
\begin{verbatim}
   (nnimap-list-pattern ("INBOX.*"))
\end{verbatim}

Dort kann man dann mit \key{u} beliebig viele Gruppen auswählen, die
dann später auch angezeigt werden.
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\subsection{Mailverteilung}
\label{sec:gnus-nnmlsplit}
Eingehende Mail soll gleich in passende Gruppen verteilt werden.  Dazu
bietet das nnmail-Backend zwei Mechanismen: einen einfachen, der hier
nicht weiter besprochen wird, sowie einen komplexeren, \emph{fancy}
genannt.  Um zweiteren auszuwählen, brauchen wir:
\begin{verbatim}
(setq nnmail-split-methods 'nnmail-split-fancy)
\end{verbatim}

Häufig begegnet man in den Beispielen auch der Zeile 
\begin{verbatim}
(setq nnmail-crosspost nil)
\end{verbatim}
Das soll verhindern, dass beim Mailsplitten mehrere Newsgroups befüllt
werden (entsprechend kann es mit \texttt{t} erlaubt werden).  Im Falle
des Fancy-Modes können wir das aber auch gezielt in der Beschreibung
der Splitregeln tun.

Betrachten wir einige Regeln:
\begin{verbatim}
 (setq nnmail-split-fancy
      '(&
        (from "mail@agoodfriend\\.example" "mail.private.thegoodfriend")
        (subject ".*[SPAM].*" "mail.spam")
        (subject ".*[cvs.host]" "mail.code.cvs")
        (to "mail@meinprivate\\.example" "mail.private.misc")
        (from ".* <?\\(.+\\)@theoffice.example" "mail.office.\\1")
        (to "me@theoffice\\.example" "mail.office.all")
        "mail.inbox"
        ))
\end{verbatim}
Das erste Element dieser Liste ist ein \texttt{\&}, damit wird gesagt,
dass von den folgenden beliebig viele Regeln zutreffen dürfen.  Ein
\texttt{|} würde den Verteilprozess abbrechen, sobald eine Regel
getroffen hat.  Ich möchte halt noch eine old-style Mailbox in
\texttt{mail.inbox} haben, wo letztlich alle Mails landen.

Wie man sieht kann verschiedene Regeln definieren:
\begin{itemize}
\item Einen einfachen String (hier "`mail.inbox"').  Dort wird eine
  Mail einsortiert.
\item Ein Regel der Form \texttt{HEADER MATCH GRUPPE}.  Dort wird der
  Inhalt des EMail-Headers \texttt{HEADER} mit dem regulären Ausdruck
  \texttt{MATCH} geprüft.  Trifft der \texttt{MATCH} zu, wird die Mail
  (auch) in die Gruppe \texttt{GRUPPE} einsortiert.
\item Der Beschreiber \texttt{GRUPPE} kann auf die Ergebnisse des
  regulären Ausdrucks zugreifen: wenn man mit runden Klammern eine
  Gruppe im regulären Ausdruck definiert, liegt deren Inhalt später in
  \verb$\\1$ vor.  Weitere Klammergruppen werden dann hochgezählt.  In
  obigem Beispiel benutze ich das, um den Benutzernamen meiner
  Arbeitskollegen aus dem Absendermailheader auszuschneiden und eine
  entsprechende Gruppe anzulegen. 
\end{itemize}

Gerade bei Leuten, die ihre Mails mit Outlook schreiben, erhält man
oft verschiedene Großkleinschreibweisen.  Beispielsweise kann Hans
Benutzer den Benutzernamen "`hbenutzer"' senden oder auch
"`HBenutzer"'.  Damit dann nicht für jede Schreibweise eine neue
Gruppe angelegt wird, setzt man
\begin{verbatim}
(setq nnmail-split-lowercase-expanded t)
\end{verbatim}
Danach ist alles klein geschrieben.
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\subsection{Identitätenwechselei}
\label{sec:gnus-identities}
Gnus ist in der Lage durch Befüllen der entsprechenden Mailheader
verschiedene Identitäten vorzugeben.  So kann man als Privatmann mit
verschiedenen EMailadressen hantieren sowie als Arbeitstier aus
verschiedenen Teams heraus Mails beantworten.  Ich verwende hier eine
Lösung, die oft in der Newsgruppe \texttt{gnu.emacs.gnus} zitiert
wird.  Eine Whitelist gibt die Liste der verfügbaren Adressen an, ein
weitere Funktion schaut in die zu beantwortende Mail (so man denn
gerade beantwortet) und die Variable \variable{gnus-posting-styles}
erledigt den Rest:
\begin{verbatim}
(setq my-mail-addresses
      (list "meine@newsgruppenadresse.example"
            "haupt@privateadresse.example"
            "team@beiderarbeit.example"))

(defun ska-message-get-from-address ()
  (save-excursion
    (if (and (boundp 'gnus-article-buffer)
               (gnus-buffer-live-p gnus-article-buffer))
        (progn
          (set-buffer gnus-article-buffer)
          ;; fixme: this doesn't work when I'm cc'ed
          (let ((address (message-fetch-field "to")))
            (if (and address
                     (string-match (regexp-opt ska-mail-addresses)
                                   address))
                (let ((matched-address (match-string 0 address)))
                  (cond
                   ((string-match "otheridentity" matched-address)
                    (concat "Iam Someoneelse [At The Company] <" matched-address
                            ">"))
                   (t
                    (concat "Mein Name <" matched-address ">"))))
              "Mein Name <ich@beiderarbeit.example>")))
      "Mein Name <ich@beiderarbeit.example>")))

(setq gnus-posting-styles
      '((".*"  ;;default
         (name "Mein Name")
         (organization "The Company")
         (signature-file "~/.signature")
         (address "ich@beiderarbeit.example")
         ;; for debugging:(eval (message "NEWS %s" (message-news-p)))
         )
        ((message-news-p)  ;;Usenet news?
         (organization "")
         (signature-file "~/.signature-priv")
         (address "meine@newsgruppenadresse.example")
         )
        ("mail\\.private.*"
         (organization "")
         (address ``haupt@privateadresse.example")
         (signature-file "~/.signature-priv")
         (message-user-fqdn "mail.privateadresse.example")
         )
        ("nnimap\\+imap-server.*"
         (name "Das Team [Bei Der Arbeit]")
         (organization "The Company")
         (address "team@beiderarbeit.example")
         )
        ("nnml:.*" ;; dynamically detect address using functions above
         (From (ska-message-get-from-address))
         )
        ))
\end{verbatim}
Dort werden die Gruppen, in denen man gerade seine Artikel (Mail oder
News) schreiben will, getestet.  Der erste Ausdruck definiert einen
Default, der zweite testet nicht gegen den Namen, sondern ob es sich
um einen Newsartikel handelt, der dritte Ausdruck testet, ob eine Mail
im privaten Ordner beantwortet wird.  Der vierte Ausdruck bedient die
nnimap-Gruppen, die wir ja für eine andere Arbeitsgruppe im Büro
ausgewählt hatten.  Die letzte Gruppe nun setzt noch den
\texttt{From}-Header dynamisch in Abhängigkeit davon, unter welcher
Adresse uns diese Mail erreicht hat.
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\subsection{Lesen}
\label{sec:gnus-reading}
\begin{itemize}
\item Gruppen-Buffer
\item Topics
\item Artikelbuffer
\item MIME siehe display...
\item Screenshots!
\end{itemize}
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\subsection{Schreiben}
\label{sec:gnus-writing}
\begin{itemize}
\item Reply vs Followup
\item MIME/MML erzeugen
\item ?
\end{itemize}
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\subsection{Archivieren}
\label{sec:gnus-archive}
\begin{itemize}
\item Outbox
\end{itemize}
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\subsection{Cryptokram}
\label{sec:gnus-crypto}
\begin{itemize}
\item PGG
\item Mailcrypt
\item SMIME
\item MML
\end{itemize}
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\subsection{Anzeige}
\label{sec:gnus-display}
\begin{itemize}
\item Artikel/MIME
\item Gruppen/Summary Zeilen
\item \command{gnus-add-configuration}
\end{itemize}
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\section{EShell}
\label{sec:eshell}
% FIXMESCREENSHOT
Mit der \package{eshell} gibt es eine vollkommen in ELisp geschriebene
Shell.  Aufgrund der mangelnden Erfahrungen mit derselben des Autors
kann dieses Kapitel derzeit nur rudimentär ausfallen.  Doch ist es
einfach angenehm, wenn man sich mit wenigen Tastendrücken schnell in
einer Shell im aktuellen Arbeitsverzeichnis befinden kann.  Zumal
diese Shell dann, da sie in einem XEmacsbuffer abläuft, den Vorteil
hat, dass man Textabschnitte von dort ohnen den Umweg über das
XClipboard in einen anderen Buffer kopieren kann.  Aufzurufen ist die
EShell ganz einfach via \mx{eshell}.  Sinnvoll mag auch ein
Tastaturkürzel der folgenden Art sein:
\begin{verbatim}
(global-set-key '(f3) '(lambda ()
                                (interactive)
                                (eshell)
                                (insert "ls")
                                (eshell-send-input)))
\end{verbatim}

Interessant ist noch die Variable \variable{eshell-visual-commands},
die all jene Befehle in einer Liste versammelt, die in einem Terminal
etwas mehr machen, als nur auf die Standardausgabe zu schreiben.  Für
diese bemüht EShell dann eine eigene Terminalemulation des XEmacs
(s.~Abschnitt~\ref{sec:term}). 
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\section{M-x term \ldots ls \ldots kaputt}
\label{sec:term}
Ok, diese Nummer hat mich lange Jahre verfolgt und ich habe oft
versucht, sie zu bereinigen.  Ich will eines vorweg nehmen: die
Geschichte hat ein Happy End.

\begin{figure}
  \begin{center}
    \includegraphics[width=\textwidth]{term}
    \caption{Ganz schön kaputt die Terminalemulation im XEmacs.
      Verflixung!}
    \label{fig:term}
  \end{center}
\end{figure}

Betrachten wir gemeinsam Abbildung~\ref{fig:term}.  Im unteren Bereich
findet sich eine Fehlermeldung aus den Tiefen des Codes im oberen
Bereich eine recht wirre Anzeige.  Dort wurde folgendes nacheinander
ausgeführt:
\begin{enumerate}
\item \mx{term}
\item \texttt{/bin/bash} \key{RET}
\item \texttt{cd <PFAD/ZU/DIESER/DOKU RET}
\item \texttt{ls RET}
\end{enumerate}

Na, kann man in der Anzeige mit etwas gutem Willen sogar noch
nachvollziehen, was uns die Shell eigentlich sagen wollte.  Wirklich,
über Jahre hinweg habe ich immer mal wieder versucht, diesem Problem
beizukommen.  Ohne Erfolg.  Auch neuere XEmacsen brachten nie eine
Lösung.

Bis Kommissar Zufall um die Ecke kam.  Es begab sich, dass ich Ende
2004 auf ein Gentoo-System umstieg, und siehe da! dort lief die
Terminalemulation\footnote{Ich setze hier ganz frech voraus, dass die
  Leser wissen, was eine \emph{Terminalemulation} ist.  Wenn nicht:
  das ist das Fenster, in dem Eure Shell abläuft, mal ein
  \programm{xterm}, mal eine \programm{konsole} oder ein
  \programm{gnome-terminal}, um nur einige zu nennen.}. 

Wenige Tage später bekam ich eine Datei von einem anderen
Betriebssytem, das seine Zeilenenden immer noch mit einem
Wagenrücklauf (\texttt{\\r} oder auch \texttt{\^M}) versieht.  Und zum
ersten Mal in vielen Jahren der XEmacsbenutzung sah ich mich diesen
Zeilenenden gegenüber, um die ich mich noch nie kümmern musste.  Eine
entsprechende Suche in den Newgroups ergab erstaunliches:
\package{MULE}, die Multilanguage Extension des XEmacs war bisher
dafür verantwortlich und ich hatte einen XEmacs ohne MULE.  Also habe
ich XEmacs fix neu ge-emerge-t, diesmal mit MULE und einige weitere
Tage später fiel mir auf, dass das Terminal nicht mehr ging.

Mit diesem neuen Wissen um die Korrelation dieser beiden Dinge ging
ich erneut auf die Suche in den Newgroups und siehe da, es fand sich
eine Lösung.  MULE erkennt auch im Falle eines Terminalmodes
automatisch irgendwelche Sachen und reagiert schlicht falsch.  Die
einfache Lösung dieses alten Problems besteht also darin, im Falle
einer Terminalemulation explizit den Modus des Buffers zu setzen:

\begin{verbatim}
(defun bug-evil-term-process-coding-system ()
  "Fix a term bug; the `process-coding-system' should always be `binary'."
  (set-buffer-process-coding-system 'binary 'binary))

(add-hook 'term-exec-hook 'bug-evil-term-process-coding-system)   
\end{verbatim}

Ist das nicht schön?
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\chapter{Konfiguration}
\label{cha:konfiguration}
Hier geht es in weiten Teilen um echten ELisp-Code.  Es wird aber aber
an dieser Stelle auf die syntaktischen Erklärungen des Codes
verzichtet und stattdessen auf das Kapitel \ref{cha:emacs-lisp}
verwiesen.  
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\section{Customize}
\label{sec:customize}
% FIXMESCREENSHOT
Der Customize-Mechanismus des XEmacs ist ein mächtiges Werkzeug zur
Konfiguration. Bei einem Programm, das die Größe des XEmacs erreicht
hat, reichen eine einfache ASCII-Datei und ein paar Menüpunkte einfach
nicht mehr aus. 

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\subsection{Bedienung}
Der (zunächst) leichteste Weg zu Customize ist über das Menü
Options->Customize->Emacs. Dort lassen sich entweder einzelne Punkte
oder ganze Gruppen anwählen. In jedem Fall erhält man einen eigenen
Buffer, in dem man sich die Dokumentation des angewählten Punktes und
den aktuellen Wert ansehen kann. Oftmals werden einzelne Einstellungen
angeboten, immer kann man sie erstmal nur in dieser aktiven Instanz
des XEmacs testen (Set), oder sie gleich in der entsprechenden Datei
speichern (Save for future sessions).  Gespeichert wird das Ganze in
der Datei, deren Name sich in der Variabeln \verb$custom-file$
wiederfindet. 

Das Anklicken von Buttons und das Durchsuchen von Menus muss wohl
nicht explizit dokumentiert werden. Es soll für den Moment genügen,
darauf hinzuweisen, dass vermöge 
 
\begin{verbatim}
M-x customize-apropos RET [muster] RET
\end{verbatim}

Optionen konfiguriert werden können, deren Name auf das angegebene
Muster (Regulärer Ausdruck!) passt und dass man mittels \mx{customize}
\key{TAB} weitere Varianten des customize-Befehls finden kann, um
z.\,B. einzelne Variablen (\mx{customize-variable}) oder ganze Gruppen
(\mx{customize-group}) zu konfigurieren.

Es soll davon ausgegangen werden, dass die Bedienung von Customize im
Wesentlichen selbsterklärend sein sollte.  Es ist neben der
eigentlichen Funktion, die Konfiguration des XEmacs zu bewerkstelligen
auch eine super Fundgrube für neue Sachen und ein Ort zum
Stöbern. \ldots
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\section{Eigene Tastaturbelegungen}
\label{sec:ownkeybindings}
Wenn ich auf ein fremdes System komme und dort einen XEmacs bemühe ist
es oftmal ein großes Problem für mich, weil dort einfach diverse
Tastaturbelegungen nicht so sind, wie ich sie kenne.  Das geht
sicherlich vielen Leuten so.  \footnote{Es gibt auch echte
  Extremfälle: ich habe es erlebt, dass jemand seine
  Tastaturbelegungen so umgebaut hat, dass sie wie eine uralte,
  kommerzielle C-Entwicklungsumgebung agieren.}  Immer mal wieder
begegnet man einer Funktion, die man schnell verfügbar haben möchte.
Und weil es nur begrenzt viele F-Tasten gibt, habe ich persönlich zu
den bereits vorhandenen Präfixen \key{C-x} und \key{C-c} (für globale
beziehungsweise lokale (modespezifische) Funktionen) noch einmal zwei
solche Präfixe spendiert: die gleich daneben liegenden \key{C-v} und
\key{C-b}\footnote{Das ist natürlich völlig gegen den Standard und
  alle Empfehlungen und ich kenne auch niemanden sonst, der solches
  von sich aus freiwillig getan hätte.  Ich hingegen bin sehr
  glücklich damit.}.  Diese habe ich ebenfalls mit globalen respektive
lokalen Funktionen belegt.  

Aber genug der Motivation und Geschichtchen.  Zum Thema gibt es gar
nicht so viel zu sagen.  

Einerseits gibt es viele Varianten, wie man Tastenbelegungen setzen
kann, aber nur eine, die als empfehlenswert gilt.  Davon zeigt
Abschnitt~\ref{sec:fileglobalkeys.el} eine ganze Menge.  Hier nur ein
Beispiel, an dem wir auch gleich noch die zweite erwähnenswerte Sache
an eigenen Tastenbelegungen sehen können:
\begin{verbatim}
(global-set-key '[(control up)] '(lambda ()
                                  (interactive)
                                  (scroll-down 1)))
\end{verbatim}

Mal abgesehen davon, dass ich es als enorm praktisch empfinde, dass
ich mit gehaltener Control-Taste und den Hochundruntertasten scrollen
kann, sehen wir hier die angesagte Syntax, wie man beim Tastendruck
einer Funktion ein Argument übergibt: man verwende
\command{(lambda)}.  Folgendes ginge halt \emph{nicht}:
\begin{verbatim}
(global-set-key '[(control up)] (scroll-down 1))  ;; FALSCH!
\end{verbatim}
Was hier passieren würde, ist dass, beim \emph{Setzen} der
Tastenbelegung einmal gescrollt werden würde.  Wir brauchen aber eine
Funktion, die beim Tastendruck aufgerufen werden soll.  Eine solche
Funktion könnte man nun mit einem Namen versehen und dann an die
entsprechende Taste binden:
\begin{verbatim}
(defun my-scroll-one-line-down ()
 "Scroll just one line down."
 (interactive)
 (scroll-down 1))

(global-set-key '[(control up)] 'my-scroll-one-line-down)  
\end{verbatim}
Aber das ist ja noch länger als die Version mit \command{lambda} und
erzeugt zudem noch eine neue Funktion, die wir aber sonst gar nicht
weiter brauchen.  Ergo: man nehme \command{lambda}.
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\section{X-Ressources}
\label{sec:xressources}
Muss ich noch was zu schreiben.  Momentan nur Code:
\begin{verbatim}
Emacs*background: #cecece
Emacs*EmacsFrame.geometry: 100x61+0+0
! from http://www.emacswiki.org/cgi-bin/wiki.pl?EmacsNiftyTricks
Emacs*XlwMenu*fontSet: -*-helvetica-medium-r-normal-*-*-120-*-*-*-*-*-*
Emacs*XlwMenu*foreground: black
Emacs*XlwMenu*shadowThickness: 1
\end{verbatim}
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\section{Gängige Lispfunktionen}
\label{sec:configlisp}
Im Laufe der Zeit werden die meisten Anwender feststellen, dass man
zum Konfigurieren immer wieder ähnliche Lispfunktionen benötigt. 

\begin{description}
\item[\command{require}] Um erst einmal eine Bibliothek nachzuladen
  verwendet man diesen Befehl:
\begin{verbatim}
(require 'tex-site)
\end{verbatim}
Sofern es im \variable{load-path} eine Datei gibt, deren Inhalt das
verlangte Feature liefert, wird diese geladen.  In den meisten Fällen
wird der Name des Features der gleiche sein wie der der Datei.  
\item[\command{autoload}] Mit \command{require} holt man sich sofort
  die benötigten Funktionen und Variablen in den aktuellen
  XEmacsprozess hinein.  Das macht natürlich den Start unnötig langsam
  und wenn ich jedes Mal den das JDE starte, auch wenn ich gerade nur
  ein Perlprojekt bearbeite ist das nicht unbedingt sinnvoll.  Dieser
  Problematik widmet sich \command{autoload}.  Es bindet eine Funktion
  an eine Datei.  Sobald diese Funktion aufgerufen wird, wird die
  angegebene Datei nachgeladen:
\begin{verbatim}
(autoload 'turn-on-eldoc-mode "eldoc" nil t)
\end{verbatim}
Sobald also jemand versucht, die Funktion \command{turn-on-eldoc-mode}
aufzurufen, wird XEmacs deren Definition (und damit alles, was
weiterhin dafür notwendig ist) aus der Datei \file{eldoc.el} laden.
\item[\command{setq}] Dieser Aufruf setzt die Werte von Variablen:
\begin{verbatim}
(setq auto-save-timeout 120)
\end{verbatim}
Eine sehr häufige Anwendung ist das Setzen der Variablen
\variable{auto-mode-alist}, anhand derer XEmacs bestimmt, in welchen
Mode eine neu geöffnete Datei geht:
\begin{verbatim}
(setq auto-mode-alist
      (append '(("\\.rb$" . ruby-mode)) auto-mode-alist))
\end{verbatim}
% $ shutup font-lock

Die etwas merkwürdige Verwendung der
\command{append}-Funktion\footnote{Man könnte ja meinen, dass es
  reichen würde, wenn man \command{append} mit dem neuen Element und
  der Liste, an die es drangehängt wrden soll, aufruft.} soll uns hier
nicht weiter stören.  Es sei nur erwähnt, dass das so seinen Sinn hat.
\item[\command{add-hook}] Jeder Majormode kommt mit einem
  gleichnamigen \emph{Hook}.  Das ist quasi der Haken, an den man
  seine eigenen Sachen mit dranhängen kann.  Für den
  \command{matlab-mode} gibt es den \command{matlab-mode-hoo}, für den
  \command{cperl-mode} den \command{cperl-mode-hook} usw.

  Das Anhängen des eigenen Codes geschieht durch den Aufruf der
  Funktion \command{add-hook}.  Diese nimmt zwei Argumente entgegen:
  den Namen des Hooks\footnote{Genauer das entsprechende Symbol, aber
    das soll erstmal nicht weiter interessieren.} und die Funktion,
  die man dazu hängen möchte.  Ein Beispiel:
\begin{verbatim}
(add-hook 'text-mode-hook
          'turn-on-filladapt-mode)
\end{verbatim}
Nun wird man in den meisten Fällen mehr als nur eine Funktion anhängen
wollen oder aber sogar eine Funktion mit weiteren Argumenten aufrufen
wollen.  Dazu kann man sich entweder erst eine eigene Funktion
definieren, die alles erledigt und die an den Hook anhängen:
\begin{verbatim}
(defun my-text-mode-hook ()
  "Meine speziellen Einstellungen für den Textmodus."
  (auto-fill-mode 1)
  (turn-on-filladapt-mode))

(add-hook 'text-mode-hook
          'my-text-mode-hook)
\end{verbatim}
oder aber man verwendet eine ad-hoc definierte Funktion, die noch
nicht einmal einen eigenen Namen hat, weil sie keinen braucht.  Dazu
verwendet man die Funktion \command{lambda}, die genau das macht: sie
definiert eine Funktion ohne Namen.
\begin{verbatim}
(add-hook 'text-mode-hook
          '(lambda () 
             (auto-fill-mode 1)
             (turn-on-filladapt-mode)))
\end{verbatim}
Die Variante mit der eigenen Funktion hat den Vorteil, dass es leicht
ist, die eigenen Erweiterungen wieder zurückzunehmen (siehe dazu die
Onlinehilfe zu der Funktion \command{remove-hook}), aber da man das eh
sehr selten benötigt (wenn überhaupt), trifft man die Lambdavariante
eigentlich am häufigsten an.
\item[\command{set-key}] Nachdem nun die Modes definiert sind, müssen
  nur noch die Tastaturkürzel an den eigenen Geschmack angepasst
  werden.  Dazu gibt es eine ganze Klasse von Funktionen, die alle
  irgendwie \texttt{set-key} oder \texttt{defin-key} heißen.  Schauen
  wir sie uns gleich einige mal anhand von Beispielen an:
\begin{verbatim}
;; Globale Definiton:
(global-set-key '[(f4)] 'kill-this-buffer)

;; Lokale Definition fuer den aktuellen mode in einer Funktion, die
auf dem passenden Hook liegt:
(defun my-cperl-mode-keys ()
  "Setting local keybindings for major mode: perl."
  (local-set-key '[(meta tab)] 'hippie-expand))

;; Keydefinition mit Angabe der Keymap
(defun ska-latex-mode-keys ()
  "Set keys for latex-mode (AUCTeX)."
  (define-key LaTeX-math-keymap
    (concat LaTeX-math-abbrev-prefix "/")  'LaTeX-math-frac))
\end{verbatim}
Es gibt verschiedene Arten, wie man die zu verwendende
Tastatursequenz angeben kann, aber man sollte sich auf eine einigen,
und diese hier lässt sich auch im GNU Emacs verwenden.
\end{description}
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\section{Eigene Dateien}
\label{sec:personalel}
Für den langjährigen Anwender ist das Customizemenu jedoch mehr so
eine Art Quelle für neue Ideen (wenn man von Zeit zu Zeit einfach mal
ein wenig stöbert) oder aber ein Platz, um Dinge auszuprobieren.
Am Ende werden die allermeisten XEmacser ihre eigenen Dateien haben,
die sie nach eigenem Gutdünken organisieren.  Denn eines ist mal klar:
eine reine \file{.emacs} oder \file{init.el} reicht irgendwann einfach
nicht mehr aus.

Ein sehr detailliertes und engagiertes Projekt in dieser Richtung ist
\package{EMacro} (\cite{emacro}).  Dort wird versucht, eine
Konfiguration für beide Emacsen (GNU Emacs und XEmacs) zu erstellen,
die zudem noch portabel bezüglich verschiedener Betriebssysteme ist
und so ziemlich jedes Paket, was den Leuten jemals untergekommen ist,
konfiguriert.

An dieser Stelle wird noch eine etwas übersichtlichere Organisation
vorgeschlagen, die jedoch nur als Hinweis verstanden werden soll.

Ausgehen tut diese Konfiguration von der Annahme, dass alle
Konfigurationsdateien im einem Verzeichnis \file{~/.xemacs} gesammelt
werden.  \footnote{Tatsächlich habe ich das bereits getan, als es noch
  keine \file{init.el} im selbigen Verzeichnis gab.  Aber dieser
  Ansatz ist so naheliegend, dass ich mir darauf wohl nix einbilden
  darf.}  Dort gibt es drei Dinge:
\begin{itemize}
\item Zunächst gibt es ein Unterverzeichnis \file{site-lisp}, in dem
  alle Pakete aus dem Internet, die nicht Bestandteil der eigentlichen
  XEmacsdistribution sind, gelagert werden.
\item Desweiteren findet sich ein zweites Unterverzeichnis,
  einfallsreich \file{my} benannt, in dem sich alle eigenen
  Erweiterungen finden werden.
\item Schließlich liegt dort auch die \file{init.el}, die XEmacs
  grundlegend konfiguriert.
\end{itemize}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\subsection{Die \file{init.el}}
Die Aufgabe dieser Datei ist es, die Umgebung des XEmacs soweit
vorzubereiten, dass im Weiteren alles gefunden werden kann und darauf
die einzelnen Dateien nachzuladen.

Zunächst werden der \variable{load-path} und einige Verzeichnisse
definiert:
\begin{verbatim}
;; This directory contains all the xemacs relevant stuff:
(defvar my-xemacs-dir
  (expand-file-name "~/.xemacs/my")
"The directory where all the XEmacs configuration (and more) goes.
This contains all my files, not those of others."
  
(defvar my-site-lisp-dir
  (expand-file-name "~/.xemacs/site-lisp")
"The directory where all the XEmacs files from the Web goe.
This contains all the cool utilities and maybe newer versions of
libraries than on the system."
  )
(setq load-path
      (append
       (list
        my-site-lisp-dir
        (concat my-site-lisp-dir "/docbookide")
        (concat my-site-lisp-dir "/xslide")
        (concat my-site-lisp-dir "/gnuplot-mode"))
        load-path
       ))
\end{verbatim}

Hier kann man schon erkennen, dass z.\,B.\ das DocbookIDEpaket aus dem
Internet nachinstalliert wurde.

Im zweiten Schritt werden die vom XEmacs zu verwendene Customizedatei
sowie die zentrale Konfigurationsdatei für persönliche Erweiterungen
und einstellungen gesetzt und geladen:
\begin{verbatim}
(setq custom-file (concat my-xemacs-dir "/config/custom.el"))
(load custom-file t t)))
(load (concat my-xemacs-dir "/config/personal.el") nil nil 1)))
\end{verbatim}

Abschließend kann hier noch Code ausgeführt werden, der garantiert am
Ende der Initialisierung laufen soll, wie es beispielsweise für das
\package{desktop}-Paket sinnvoll ist:
\begin{verbatim}
(load "desktop")
(add-hook 'kill-emacs-hook
      '(lambda ()
         (desktop-truncate search-ring 3)
         (desktop-truncate regexp-search-ring 3)))
(desktop-load-default)
(desktop-read)
\end{verbatim}
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\subsection{Das Verzeichnis \file{my}}
\label{sec:xemacsmy}
Dieses Verzeichnis gliedert sich in weitere Unterverzeichnisse auf:
\begin{description}
\item[\texttt{config}] Die Konfigurationsdateien, die so benötigt
  werden.  Das sind nicht nur \file{personal.el} und
  \file{customize.el} sondern auch die Initfiles von Gnus oder VM und
  ähnliches sowie die eigenen Tastaturkürzeldefinitionen.
\item[\texttt{data}] Alle Datenfiles, wie z.\,B.\ die BBDB, die
  recent-files aber auch Autosavedateien und eigene Pixmaps für den
  VM. 
\item[\texttt{lisp}] Selbstgeschriebene ELisp-Bibliotheken.
\item[\texttt{templates}] Vorlagen für auto-insert und Skeletons für
  alle Sprachen.
\end{description}

Für viele Dateien wird in der unten beschriebenen \file{personal.el}
bestimmt, wo sie landen werden, für einige wenige geschieht das
bereits in der \file{init.el}.
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\subsubsection{Dateien in \file{config}}
\label{sec:files-in-myconfig}
Zunächst sind hier die beiden wichtigsten Konfigurationsdateien in dem
hier vorgestellten Setup: \file{custom.el}, das alle Einstellungen aus
dem Customizesystem aufnimmt und in der \file{init.el} auf diesen
Dateinamen gesetzt wurde, sowie \file{personal.el} die alle Hooks und
Einstellungen vornimmt, die explizit in ELisp vorliegen.  Oftmals
werden hier auch Standardeinstellungen explizit noch einmal gesetzt.
Der meiste Code hier ist aus den Kommentaren der ELispdateien selber,
die meist mit einer Kurzbeschreibung zur Installation und Anwendung
daher kommen, gemopst und im Lauf der Jahre weiter getrieben worden.
Für eine beispielhafte \file{personal.el} siehe
Anhang~\ref{sec:filepersonal.el}. 

Desweiteren finden sich hier sehr eigenwillige Tastatureinstellungen.
Ausgehend von den Präfixen \key{C-x} für global vorhandene und
\key{C-c} für modespezifische Tastenbelegungen habe ich die gleich
daneben liegenden \key{C-v} und \key{C-b} entsprechend verwendet.
Damit gebe ich zwei Tasten (eben \key{C-v} und \key{C-b}) auf, die ich
so oder so niemals so verwendet habe\footnote{So, so, so \ldots},
gewinne aber zwei ganze neue Maps.  In den allermeisten Fällen
funktioniert das auch reibungslos, nur manchmal wird ein Mode selber
versuchen, diese Tasten zu belegen.   Die Fälle müssen wirklich sehr
selten sein, da ich mich an keinen einzigen gerade erinnern kann.  Die
beiden Dateien \file{ska-local-keys.el} sowie
\file{ska-global-keys.el} (siehe Anhang~\ref{sec:filelocalkeys.el} und
\ref{sec:fileglobalkeys.el}) setzen alle diese Tasten.

Auf die hier ebenfalls gelagerten Dateien \file{vm-init.el} und
\file{gnus-init.el} wird an gesondertet Stelle eingegangen (werden)
(Abschnitte \ref{sec:vm} und \ref{sec:gnus}).

Beilbt noch eine grundlegene und fast leere Datei, die lediglich die
Beschreibung des Benutzers enthält: \file{user.el}.  Ihr Inhalt ist
schnell wiedergegeben:
\begin{verbatim}
(setq user-mail-address "meine@emailadresse.de")
(setq my-copyright-holder "Mein Name oder MeineFirma")
(provide 'user)
\end{verbatim}
(natürlich fehlt in dieser Wiedergabe der klassische ELispkopf mit
Copyright und so).  Erwähnenswert ist hier eigentlich nur der
\variable{my-copyright-holder}, da der Inhalt dieser Variablen in den
hier vorgestellten AutoInsertVarianten
(s.~Abschnitt~\ref{sec:auto-insert}) verwendet wird.
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\subsubsection{Dateien in \file{lisp}}
Neben einer kleinen Datei mit einigen mehr oder weniger nützlichen
Kleinigkeiten (\file{ska-utils.el}) finden sich hier die Dateien von
den ELispbibliotheken, die ich selber geschrieben habe.  Diesen habe
ich (ganz dreist) sogar ein eigenes Kapitel in dieser Einleitung
gewidmet (Kapitel~\ref{cha:mystuff}).  Die Funktionen aus
\file{ska-utils.el} werden im Laufe dieses Dokuments meist nebenbei
irgendwo erwähnt.
%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\chapter{Schatzkistchen}
\label{cha:tinytips}
Spendieren wir doch den kleinen Paketen und Befehlen, die uns das
tägliche Leben einfach einfacher und angenehmer gestalten, ein eigenes
Kapitel.  Hier sollte sich so manches kleines Wunder finden, das
vielleicht nur ein kleiner Code-Schnipsel ist, ohne Webseite und
Mailingliste, das aber so dermaßen hilfreich sein kann, dass es
zumindest hier seinen Ruhm ernten soll.

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\section{Pakete}
\label{sec:tips-utils}
\begin{description}
\item[Zeilennummern] Ja, es ist hilfreich, am Rand die Zeilennummern
  eingeblendet zu bekommen.  Der \mx{line-number-mode}, der die
  aktuelle Zeilennummer in der Modeline anzeigt, reicht nicht.  Zum
  Glück haben wir dafür \package{setnu}.

  Zunächst ein wenig Konfiguration:
\begin{verbatim}
(setq setnu-line-number-format "%4d ")
(setq setnu-line-number-face (copy-face 'default 'setnu-my-face))
(set-face-background 'setnu-my-face "#bfbfbf")
(set-face-foreground 'setnu-my-face "#777777")
\end{verbatim}
  Und dann in den Hooks der gewünschten Modes einschalten:
\begin{verbatim}
(setq cperl-mode-hook 
      '(lambda ()
          (turn-on-setnu-mode)))
\end{verbatim}
  Allerdings hat der Autor dieser Zeilen damit einige Probleme gehabt.
  Ab und an crasht dieses Paket den gesamten XEmacs!!\footnote{Ja,
    zwei Ausrufezeichen sind sicherlich schlechter Stil, aber ein
    Crash im XEmacs ist so selten, dass sie es mir hier wert sind.}
  Als Tipp kann hier nur gegeben werden, sofort, wenn beim Löschen
  oder Einfügen einer Zeile ein extentp-Fehler gemeldet wird, die
  Zeilennummern vermöge \mx{setnu-mode} auszuschalten und alle Dateien
  zu speichern.  Die Erfahrung zeigt, dass \variable{folding-mode} und
  PCL-CVS Probleme bereiten.
\item[Screen Real Estate] Bildschirmplatz ist kostbar.  Warum also
  sollte man eine weitere Zeile an ein Menu verschwenden, dass man eh
  nur hier und da mal benötigt?   Auftritt \package{active-menu}.  Vom
  Autor dieser Zeilen erdacht\footnote{Man verzeihe die schamlose
    Selbstbeweihräucherung, bitte}, rudimentär implementiert und von
  erfahrenen Programmierern fertig gestellt, bietet es die
  Möglichkeit, die Menuleiste nur dann einzublenden, wenn die Maus in
  die Nähe des oberen Fensterrandes kommt.  Damit dabei die Framegröße
  konstant bleibt, muss \package{active-menu} noch an die verwendete
  Schriftart angepasst werden.  Der aktive Bereich kann ebenfalls
  eingestellt werden.
\begin{verbatim}
(require 'active-menu)
(setq active-menu-sensitive-height 10)
(setq active-menu-frame-compensation 1)
(turn-on-active-menu)
\end{verbatim}
\item[Locate] Ein Interface zum Programm \programm{locate}, das einen
  Buffer öffnet, der die gefunden Dateien zum direkten Anspringen
  enthält.   Unter Umständen muss man sich \file{locate.el} erst noch
  aus der GNU Emacs Distribution kopieren.
\begin{verbatim}
(require 'locate)
(global-set-key '[(control v) (control l)] 'locate)
\end{verbatim}
\end{description}
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\section{Befehle}
\label{sec:tips-commands}

Einfache Befehle, die man in sein tägliches Repertoire aufnehmen
sollte.
\begin{description}
\item[\texttt{transpose-...}] Auf den Tasten \key{C-t}, \cx{t} und
  \key{M-t} liegen die Transpose-Funktionen.  Mit ihnen lassen sich
  Zeichen, Zeilen und Worte respektive vertauschen.  Das Verhalten von
  \key{C-t} mag dem einen oder der anderen nicht genehm genug sein.
  Der folgende Code ändert das Verhalten leicht.
\begin{verbatim}
(defun ska-electric-transpose-chars ()
  "Replacement for the default transpose-chars command.
This is usually bound to C-t and it behaves somewhat unintelligent
because I always have to move back one char when I mistyped
something. This function checks whether the user is typing and then
goes back one char itself."
  (interactive)
  (if (eq last-command 'self-insert-command)
      (progn (transpose-chars -1)
             (forward-char))
    (transpose-chars -1)))
\end{verbatim}
\item[Groß-Kleinschreibung] Oftmals sieht man Leute, die das erste
  Zeichen eines Wortes löschen und danach das gleiche Zeichen, nur
  groß geschrieben, wieder eingeben.  Das ist Geschichte: \key{M-c}
  für \emph{capitalize}, \key{M-u} und \key{M-l} für \emph{upper} und
  \emph{lower}. 
\item[Filename-Completion] Ja, ja,
  Filename-Completion\footnote{Deutsch für Filename-Completion?
    Dateinamenkomplettierung?  Nein, danke.} im Minibuffer und in der
  Shell kennt jeder.  Aber mitten im Buffer, einfach da, wo der Cursor
  gerade steht?  Ungewöhnlich.  Praktisch.  Wie konnte ich nur jemals
  ohne \ldots?  Das folgende setzt \key{Shift-TAB} entsprechend.
\begin{verbatim}
(global-set-key '[(iso-left-tab)] 'comint-dynamic-complete)
\end{verbatim}
\item[Home und End] Auf deutschen Tastaturen auch Pos1 und End
  genannt.  Der im Folgenden vorgestellte Code sorgt dafür, das der
  Druck auf die Home-Taste 
  \begin{enumerate}
  \item an den Anfang der Zeile springt,
  \item wenn man sich dort bereits befindet an den Anfang des Fensters
    (also in die höchste, sichtbare Zeile),
  \item und im letzten Schritt an den Anfang des Buffers.
  \end{enumerate}
\begin{verbatim}
(global-set-key '[(home)] 'chb-home)
(global-set-key '[(end)]  'chb-end)
;; ...
(defun chb-home ()
  (interactive)
  (setq zmacs-region-stays t)
  (if (not (bolp))
      (beginning-of-line)
    (if (eq this-command last-command)
    (cond
     ((not (= (point) (window-start)))
      (move-to-window-line 0)
      (beginning-of-line))
     (t
      (goto-char (point-min)))))))

(defun chb-end ()
  (interactive)
  (setq zmacs-region-stays t)
  (if (not (eolp))
      (end-of-line)
    (if (eq this-command last-command)
    (cond
     ((not (= (point) (save-excursion
                (move-to-window-line -1)
                (end-of-line)
                (point))))
      (move-to-window-line -1)
      (end-of-line))
     (t
      (goto-char (point-max)))))))
\end{verbatim}
\item[Schnelle Markierung] Diesen Code verwende ich seit Jahren immer
  wieder, mehrmals täglich.  Gefunden habe ich das mal in Michael
  Koflers \emph{Linux}-Buch (\cite{kofler}) und es ist einfach nur
  praktisch!  Einfach schnell eine Markierung setzen "`Hier war ich"'
  irgendwo anders hin gehen, dort was nachschauen, ändern oder
  kopieren und zack!\ wieder zurück.
\begin{verbatim}
;; suggested key-bindings:
(global-set-key '(control \.) ska-point-to-register)
(global-set-key '(control \,) ska-jump-to-register)

(defun ska-point-to-register()
  "Store cursorposition _fast_ in a register. Use ska-jump-to-register
to jump back to the stored position."
  (interactive)
  (setq zmacs-region-stays t)
  (point-to-register 8))

(defun ska-jump-to-register()
  "Switches between current cursorposition and position
that was stored with ska-point-to-register."
  (interactive)
  (setq zmacs-region-stays t)
  (let ((tmp (point-marker)))
    (jump-to-register 8)
    (set-register 8 tmp)))
\end{verbatim}
\item[Ausführbare Skripte] OK, jetzt mal ehrlich: wie oft schon wurde
  in einer Skriptsprache ein neues Programm angelegt, geschrieben,
  gestartet und das folgende "`Permission denied"' von der Shell mit
  einem \texttt{chmod +x programm} beantwortet.  Der in dieser Doku
  beschriebene auto-insert-Mechanismus kann da schon weiterhelfen,
  aber diese Lösung ist hier ist noch generischer: wann immer eine
  Datei gespeichert wurde, wird geschaut, ob sie einen Shebang besitzt
  und wenn ja, wird sie gleich ausführbar gemacht, so sie es denn
  nicht schon ist.
\begin{verbatim}
(add-hook 'after-save-hook
        #'(lambda ()
        (and (save-excursion
               (save-restriction
                 (widen)
                 (goto-char (point-min))
                 (save-match-data
                   (looking-at "^#!"))))
             (not (file-executable-p buffer-file-name))
             (shell-command (concat "chmod u+x " buffer-file-name))
             (message
              (concat "Saved as script: " buffer-file-name)))))
\end{verbatim}
\item[Keine TABS] Ja, es ist ein alter Streit unter Programmierern, ob
  es denn nun gut ist, TABs zu Einrücken zu verwenden oder aber lieber
  die richtige Anzahl Leerzeichen.  Ich hänge der letzteren Fraktion
  an und da ich eh für jede Sprache einen eigenen Hook pflege, setze
  ich überall dort, wo ich keine TABS sehen möchte folgenden Code mit
  ein (hier am Beispiel für den cperl-mode)
\begin{verbatim}
(setq cperl-mode-hook 
      '(lambda ()
         (make-local-hook 'write-contents-hooks)
          (add-hook 'write-contents-hooks #'ska-untabify
                     nil t)))

\end{verbatim}
  Dazu braucht es noch folgende Funktion
\begin{verbatim}
(defun ska-untabify ()
  "My untabify function as discussed and described at
http://www.jwz.org/doc/tabs-vs-spaces.html
and improved by Claus Brunzema:
 - return nil to get `write-contents-hooks' to work correctly
   (see documentation there)
 - `make-local-hook' instead of `make-local-variable'
 - when instead of if
Use some lines along the following for getting this to work in the
modes you want it to:
 
\(add-hook 'some-mode-hook  
          '(lambda () 
              (make-local-hook 'write-contents-hooks) 
               (add-hook 'write-contents-hooks 'ska-untabify nil t)))"
  (save-excursion
    (goto-char (point-min))
    (when (search-forward "\t" nil t)
      (untabify (1- (point)) (point-max)))
    nil))
\end{verbatim}
\item[Wiederholen eines Kommandos] Nicht nur zum Wiederholen und ggf.\
  Ändern eines gerade gegebenen Kommandos, auch wenn man mal bei einer
  Suche- und Ersetzaktion nicht weiß, wie man einen Zeilenumbruch
  eingeben soll, hift \command{repeat-complex-command}:
\begin{verbatim}
(global-set-key '[(shift f9)] 'repeat-complex-command) 
\end{verbatim}
Es zeigt im Minibuffer den letzten Befehl in Lisp-Form an.  Somit kann
man Kleinigkeiten leicht ändern.
\item[Rechtecke] Das Auschneiden von rechteckigen Bereichen kann man
  auf zwei Arten erreichen.
  \begin{itemize}
  \item Mit der Maus durch Binden der Funktion
    \command{mouse-track-do-rectangle} an eine Mausaktion
    (standardmäßig liegt das auf \key{M-Mausziehen}.  Dann wir sogar
    nur ein Rechteck als Region markiert.
  \item Mit den Tasten durch ganz normales Markieren der Region und
    dann aber nur verwenden des Bereiches, der den Beginn der Region
    und die aktuelle Position als Eckpunkte hat.  Dann helfen die
    Tasten \cx{r} \key{k} (\command{kill-rectangle}) und \cx{r}
    \key{y} (\command{yank-rectangle}) weiter.  Ein \ch{a}
    \texttt{rectangle} hilft weiter.
  \end{itemize}
\end{description}


%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\chapter{Todo}
\label{cha:todo}
So, hier nur ein kleiner Platzhalter, eine kleine Merkhilfe für mich, was
(noch) alles geplant ist.
\begin{itemize}
\item auto-fill-mode 
\item filladapt
\item ispell
\item ECB?
\item mehr Elispintro.
\end{itemize}
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\chapter{Übriggebliebenes}
\label{cha:misc}
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\section{Filevariablen}
\label{sec:filevariablen}
Es ist möglich, in einer beliebigen Textdatei diverse Einstellungen zu
speichern, die XEmacs dann beim nächsten Öffnen der Datei verwendet.
AUCTeX macht davon großen Gebrauch, indem es bei einem Projekt aus
vielen Einzeldateien das Masterfile definiert (ähnliches kann auch
PSGML), aber auch C-Coder können so ihre Standards festlegen und
definieren, wie groß ein Tabulatorsprung sein soll oder ähnliches.

Das Format ist einfach: am Ende der Datei erscheint eine spezielle
Zeile mit dem Inhalt "`Local Variables: "'.  Diese Zeile kann durch
die für die jeweilige Datei geltenden Kommentarregeln auskommentiert
sein, z.\,B.:
\begin{verbatim}
%%% Local Variables: 
\end{verbatim}
für eine \LaTeX-Datei oder auch
\begin{verbatim}
/* Local Variables: */
\end{verbatim}
für eine C-Datei.  XEmacs erkennt die Teile vor "`Local"' und nach dem
Doppelpunkt und merkt sie sich.  Kommen danach Zeilen, die das gleiche
Präfix und Postfix haben, werden sie interpretiert.  So kann ein
Eintrag
\begin{verbatim}
;;; Local Variables: ***
;;; mode:lisp ***
\end{verbatim}
sicherstellen, dass die Datei in den lisp-mode geht.  In AUCTeX kann
man so das Zentraldokument einstellen:
\begin{verbatim}
%%% Local Variables:
%%% mode: latex
%%% TeX-master: "main"
%%% End:
\end{verbatim}
Wir erkennen hier bereits, dass das Schlüsselwort "`End:"' (mit
passenden Präfix und Postfix) die Filevariablen beendet.

Als ein kleines Kuriosum betrachte ich folgende Datei:
\begin{verbatim}
-*- normal -*-

;; Local variables:
;; enable-local-eval: t
;; hack-local-variables-hook: save-buffers-kill-emacs
;; end:
\end{verbatim}
Sie schaltet in den \command{normal-mode}, in dem die Filevariablen
unabhängig vom Wert der Variablen \variable{enable-local-variables}
verarbeitet werden.  Tja, und dann wird XEmacs einfach mal beendet.
Diese Datei lässt sich nicht öffnen.
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\section{Speedbar}
\label{sec:speedbar}
\begin{figure}
  \begin{center}
    \includegraphics[width=\textwidth]{speedbar}
    \caption{Rechts neben dem Hauptframe findet sich eine Speedbar,
      mit vielen aufgeklappten Bereichen.  Vom Makefile werden die
      Makros sowie die verschieden Targets angezeigt, von den
      \LaTeX-Sourcen dieses Dokuments sehen wir einige Kapitel und
      Abschnitte.  Der grün hinterlegte Text stammt vom (nicht
      sichtbaren) Mauszeiger, der beim Anlegen des
      Bildschirmschnappschusses dort verweilte.}
    \label{fig:speedbar}
  \end{center}
\end{figure}

Abbildung~\ref{fig:speedbar} zeigt eine Speedbar.  Dieses Paket stellt
funktionale Einheiten einer Datei da und lässt sie direkt anspringen.
Speedbar erkennt Dateien an ihren Dateinamen\footnote{Was dazu führt,
  dass man seine Perlprojekte doch wieder auf \texttt{.pl} enden lässt
  und ggf.\ für die Installation in den Produktivbetrieb diese
  unschöne Endung wegfallen lässt.} und kann mit einer ganzen Menge
von Formaten sicher umgehen.
\begin{itemize}
\item C-Programmdateien zeigen ihre Funktionendefinitionen,
\item C++-Dateien nach Klassen sortiert ihre Memberfunktionen und
  -variablen,
\item \LaTeX-Dateien bieten ihre Kapitelüberschriften nach Hierarchie
  sortiert an und
\item Makefiles ihre Makros und Targets.
\end{itemize}
Was für C++ gilt, gilt so oder ähnlich auch für die meisten anderen
objektorientierten Sprachen und was für C gilt, gilt für andere
prozedurale Sprachen.  Die Speedbar kann dabei sogar auf zwei
verschiedene Mechanismen zurückgreifen, die diese Analyse übernehmen,
entweder \package{imenu} oder das ältere  \package{etags}.  Sofern
\package{imenu} vorhanden ist (und bei neueren XEmacsen ist das der
Fall), sollte es bevorzugt werden.

Für die mausfreie Verwendung empfiehlt es sich, die Funktion
\command{speedbar-get-focus} auf eine Tastenkombination zu legen.
Dann wird bei Bedarf ein Speedbarframe erst geöffnet und ansonsten die
Speedbar angesprungen \footnote{so der Windowmanager denn mitspielt,
  aber das sollte er eigentlich.}, z.\,B.:
\begin{verbatim}
(global-set-key '[(control v) (control s)] 'speedbar-get-focus)
\end{verbatim}

Neuere Speedbarversionen werden mit einem eigenen Kommando zum
Umschalten des Einausklappzustandes geliefert, sollte dieses Kommando
nicht vorhanden sein, hilft folgender Code weiter:
\begin{verbatim}
(defun ska-speedbar-toggle-expand ()
  (interactive)
  (beginning-of-line)
  ;; if we're on a [+] line we can simply expand
  (if (re-search-forward ":\\s-*.\\+."
                         (save-excursion (end-of-line) (point))
                         t)
      (speedbar-expand-line)
    ;; if starts with "\\s>", we're in a expanded list
    ;; else
    ;; go back to the last line with [-] at the beginning
    (progn
      (end-of-line)
      ;; correction by CHB
      (re-search-backward ":\\s-*.-." (point-min) t)
      (speedbar-contract-line))
    ))

;; um im entsprechenden Hook die Keybindings zu setzen:
(defun ska-speedbar-keys ()
  "Set keybindings in major navigation tool Speedbar."
  (define-key speedbar-key-map '[(space)]    'ska-speedbar-toggle-expand)
  )
\end{verbatim}

Wer jetzt noch seinen Windowmanager mitteilen kann, wo sich ein
Speedbarframe automatisch öffnen soll \footnote{nämlich direkt rechts
  neben der immer gleichen Größe des XEmacsframes}, ist klar im
Vorteil.

Achja, die Bedienung fehlt noch.  Die wichtigsten Tasten werden in
Tabelle~\ref{tab:speedbar} beschrieben.

\begin{table}[htb]
  \begin{center}
    \begin{tabular}[t]{|c|p{0.5\textwidth}|}
      \hline
      \key{SPACE} & Aufklappstatus hin- und herschalten (zumindest mit
      dem Code aus dem Text.  Mehr braucht man selten.\\
      \hline
      \key{RETURN} & Wählt einen Eintrag an und wir werden zur
      entsprechenden Stelle im Text gewarpt.\\
      \hline
      Mittlere Maus & wie \key{RETURN}.\\
      \hline
      \key{+} & Klappt einen Baum auf.\\
      \hline
      \key{-} & Klappt einen Baum wieder zu.\\
      \hline
      \key{g} & Bringt die Speedbar auf den neuesten Stand\\
      \hline
      Rechte Maus & Wichtiges Kontextmenu \\
      \hline
      \key{q} & Beendet die Speedbar.\\
      \hline
    \end{tabular}
    \caption{Tastenbelegungen in der Speedbar.}
    \label{tab:speedbar}
  \end{center}
\end{table}
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\section{Zuletzt geöffnete Dokumente}
\label{sec:recent}
Das Standardpaket für ein Menu mit den zuletzt bearbeiteten Dokumenten
ist \package{recent-files}.  Mit wenigen Zeilen initialisiert, kann es
nicht nur die letzten Dateien anzeigen sondern auch eine eigene Liste
von permanenten Dateien verwalten.  Das ist für solche Dauerbrenner
wie \file{.bashrc} oder \file{.xemacs/init.el} sicherlich eine
interessante Methode.  Es lässt sich konfigurieren, ob die einzelnen
Abschnitte eigene Untermenus sein sollen und wie viele Dateien
angezeigt werden.  Entsprechender Initialisierungscode könnte
folgendermaßen aussehen:
\begin{verbatim}
(load "recent-files")
(setq recent-files-dont-include
      '("~$" "tmp/." "INBOX" ".bbdb" ".newsrc." ))

(setq recent-files-non-permanent-submenu t)
(setq recent-files-commands-submenu t)
(setq recent-files-number-of-entries 40)
(recent-files-initialize)
\end{verbatim}
%% $ fontlock...


Eine Alternative hierzu ist \package{picklist} (\cite{picklist}), das
ein Fork einer früheren Version von \package{recent-files} ist, aber
noch weitere Funktionalitäten hinzufügt.  So liefern neuere Versionen
eine Art \emph{apropos} für die Liste mit und die Datendatei hält
deutlich mehr Informationen über die Dokumente vor, so dass andere
Sortierungen möglich sind.  Entstanden ist \package{picklist}
ursprünglich, weil \package{recent-files} keine Cursorpositionen
abgespeichert hat (wozu es mittlerweile natürlich noch andere Pakete
gibt).
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\section{Desktop}
\label{sec:desktop}
Das Desktoppaket (\cite{desktop}) kann dabei behilflich sein, eine
alte Sitzung wieder aufzunehmen.  Beim Einbinden in die eigene
Konfiguration ist zu beachten, dass das Laden dieses Paketes soweit
hinten wie möglich erfolgt, damit alle anderen Pakete, die für das
automatische Laden von Dateien benötigt werden, soweit schon
konfiguriert sind.

Hat man gerade sein Projekt mit 13 C-Dateien und den passenden
Headerfiles offen, sowie die eigens kreierte Manpage dazu, kann man
mit \mx{desktop-save} diese Liste abspeichern.  Üblicherweise wird man
das in dem Projektverzeichnis tun, was dazu führt, dass über kurz oder
lang im Dateisystem eines Entwicklers eine ganze Menge versteckter
\file{.desktop.el}-\-Dateien liegen werden.  Aber was soll's, daran
kann man wenigstens erkennen, dass dieser Entwickler XEmacs einsetzt. 

Startet man nun später aus einer Shell in einem solchen Verzeichnis
einen XEmacs, werden die Dateien automatisch geöffnet.  Alternativ
kann man auch explizit via \mx{desktop-read} die alte Sitzung wieder
herstellen.

Angenehmerweise braucht man nur einmal pro Projekt den Desktop zu
speichern, denn das Paket erkennt selber, ob es beim Beenden des
XEmacs etwas zu tun hat oder nicht.
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\chapter{Emacs-Lisp}
\label{cha:emacs-lisp}
Da waren sie wieder, die magischen vier Buchstaben: l-i-s-p.  Wer auch
immer die hohe Kunst des Programmierens erlernt und sich dabei aber
nicht auf einen kleinen Ausschnitt festlegt hat, wird hin und wieder
vermutlich einem selbstzufrieden in sich ruhenden
Meister-Programmierer begegnet sein, der auf die aufgeregt erzählte
Neuigkeit, was die liebste Programmiersprache in der neuen Version
neues kann, müde abgewinkt hat und gesagt hat, LISP habe das schon
seit 1960, oder so.  Tatsächlich hat LISP, das mehr als Konzept denn
als eine Programmiersprache zu verstehen ist, von vorneherein viele
Dinge geliefert, die einige Sprachen erst jetzt nach und nach
entwickeln.  Wenn man dann noch in Betracht zieht, wie uralt LISP
schon ist, muss man sich wundern, was die IT-Welt die ganze Zeit
gemacht hat\footnote{Es sei an dieser Stelle aber auch nicht
  verschwiegen, dass auch LISP seine Macken hat, nicht zuletzt die
  schiere Anzahl von Implementationen und Umsetzungen.  Von den
  einfach gehaltenen Scheme-artigen LISPs bis zu den diversen
  ultra-komplexen Common Lisps.}.

An dieser Stelle soll eine kurze Einführung in einen weitere
LISP-Dialekt erfolgen: Emacs Lisp, \emph{Elisp}, genauer gesagt: die
XEmacs-Variante von Elisp.  Die Motivation dazu liegt auf der Hand:
die fach- und sachgerechte Ausbildung schierer Programmiererscharen,
die erstens sich selbst und zweitens der Welt durch Entwicklung von
viel, viel ELisp-Code weiterhelfen.

Wie üblich zunächst die Hinweise zu bereits bestehender, sehr guter
Dokumentation.  Es gibt eine englischsprachige Einleitung zu
EmacsLisp, die im Info-System zu finden ist.

\key{C-h} \key{I} \texttt{Emacs-lisp-intro} führt dorthin. Zudem
existiert noch eine Referenz, ebenfalls im Info-System: \key{C-h}
\key{I} \texttt{Lispref} sollte jederzeit dorthin verzweigen.  Sollte
auf diesem Wege eines der beiden Schmuckstücke nicht zu finden sein,
kann es sich um ein Problem im Info-System handeln.  Oft hilft es
dann, mal in einer Shell \programm{info} aufzurufen und dort mal zu
suchen und zu blättern.  Unangenehmerweise haben die internen
Info-Seiten des XEmacs meist einen anderen Einstiegspunkt als
dasjenige von der Shell.

Diese Einleitung soll pragmatisch nur dahin führen, bestehenden
Lisp-Code zu verstehen und soll inspirieren, eigene kleine
Code-Fragmente zu schreiben.  Gegen die ausführliche bestehende und
genannte Dokumentation tritt diese Einleitung nicht an.
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\section{Syntax}
\label{sec:elisp-syntax}
Wie bereits beschrieben, lässt sich die Syntax von LISP mit zunächst
ganz wenigen, einfachen Regeln beschreiben:
\begin{itemize}
\item Jeder etwas komplexere Ausdruck ist durch runde Klammern
  eingefasst; so ein Ausdruck heißt \emph{Liste}.
\item Variablennamen oder Literale sind ebenfalls Ausdrücke.
\item Das erste Element in jeder Liste ist ein Funktions-Aufruf,
  alle weiteren Elemente sind Argumente zu dieser Funktion.  Eine
  solche Liste heißt auch \emph{Form}.
\item Jedes Argument kann wieder eine Liste sein.
\item Steht vor einer Liste ein Hochkomma (\texttt{'}), so ist das
  erste Element keine Funktion und die weiteren Elemente werden ebenso
  wenig evaluiert.
\item Es gibt special Forms, wie \command{if}, \command{while} oder auch
  \command{defun}, die eine speziellere Syntax besitzen.
\end{itemize}
Mit diesen wenigen Regeln lässt sich ein sehr, sehr großer Teil des
bestehenden Lisp-Codes bereits ganz gut lesen.
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\section{Special Forms}
\label{sec:elisp-specialforms}
Kommen wir nun zu den Special-Forms.
\begin{description}
\item[\command{if}]
\begin{verbatim}
 (if CONDITION
     THEN
   ELSE)
\end{verbatim}
Die Special-Form \command{if} erwartet drei Argumente, die ihrerseits
beliebige Listen sein dürfen, führt entsprechend des Ergebnis des
ersten Arguments dann das zweite oder dritte aus und liefert das
Ergebnis der ausgeführten Liste zurück.  Ein Beispiel gefällig?
\begin{verbatim}
(insert
 (if (eobp)
     "Ende des Buffers"
   "Mittendrin"))
\end{verbatim}
Dabei sehen wir auch gleich, wie man den Rückgabe-Wert von
\command{if} verwendet: Wenn wir uns aktuell am Ende des Buffers
befinden, liefert \command{if} "`Ende des Buffers"' zurück, ansonsten
"`Mittendrin"', das Ergebnis wird dann der Funktion \command{insert}
übergeben, die den String direkt einfügt.  Nicht sehr sinnvoll,
zugegeben, aber erklärend.

Eine Besonderheit gilt es noch zu beachten, die für das \command{if}
von ELisp gilt:  der THEN-Teil darf nur ein Ausdruck sein. Es gilt
also, den Code so zu formulieren, dass der THEN-Teil der unwesentliche
ist und der ELSE-Abschnitt der entscheidende.  Dort dürfen beliebig
viele Anweisungen stehen:
\begin{verbatim}
(if (= (point) (point-max))
    (message "am Ende ist die Datei %d Zeichen lang" (point-max))
  (goto-char (point-min))
  (insert "Hier ist der Anfang"))
\end{verbatim}
Die Bedingung ist die gleiche wie im vorigen Beispiel, nur anders
formuliert, der THEN-Teil, wie die Einrückung anzeigt, besteht aus
einer \command{message}\footnote{mit diesem Befehl kann man
  Nachrichten in der Echo-Area anzeigen, zudem versteht er noch
  gängige Format-Anweisungen, wie sie auch \command{printf} in C
  beispielsweise schluckt, hier ein \texttt{\%d} für eine Integer-Zahl.}
und der ELSE-Abschnitt geht an den Anfang der Datei\footnote{Das hier
  ist der richtige Weg in Programmen, \command{beginning-of-buffer}
  soll dazu nicht verwendet werden, das ist für die interaktive
  Verwendung gedacht} und schreibt ein wenig sinnloses Zeug dort
hinein. Sinnvoller könnte es sein, zu schauen, ob dort der String
\begin{verbatim}
#!/usr/bin/perl -w
\end{verbatim}
bereits steht (ein weiteres \command{if} vermutlich mit einem
\command{looking-at} als Bedingung) und es ggf.\ einzusetzen.  
\item[\command{while}] Gleich nach der bedingten Verarbeitung mittels
  \command{if}, vielleicht sogar noch kurz davor, kommen die
  Schleifenkonstrukte.  Soundsooft immer den gleichen Code ausführen,
  dafür braucht es eine \command{while}-Schleife.  Auch in Lisp.
  Neben vielen anderen Möglichkeiten, die hier aber nicht
  interessieren sollen.  Bei \command{while} läuft das so, dass das
  erste Argument als Bedingung verstanden wird.  Solange dieser
  Ausdruck "`wahr"' zurück liefert, werden das zweite und alle
  folgenden Argumente immer wieder einmal ausgeführt.
\begin{verbatim}
(while (not (eobp))
  (forward-line)
  (beginning-of-line)
  (insert ";;"))
\end{verbatim}
Der gezeigte Code kommentiert ab der aktuellen Cursorposition jede
Zeile einer Lispdatei aus, indem jeder Zeile zwei Semikolon
vorangestellt werden.  Dabei erfolgt der Test mit einer Verneinung auf
das Ende des Buffers und die auszuführenden Schritte sind:
\begin{enumerate}
\item Gehe eine Zeile vor,
\item gehe an den Anfang der Zeile und
\item füge zwei Semikolon ein.
\end{enumerate}
Das wars auch schon zu \command{while}.
\item[\command{defun}] Oh, ein ganz wichtiger Befehl, nämlich der, um
  Befehle zu definieren.
\begin{verbatim}
(defun neue-funktion (arg1 arg2)
  "Die erste Zeile erklaert in einem Satz was die Funktion tut.
Alle weiteren Saetze koennen sich dann ruhig auch ueber mehrere 
Zeilen erstrecken.  Lediglich der erste sollte dieser Konvention
folgen, da er fuer Kurzhilfen verwendet wird.  Diese Doku wird
angezeigt, wenn man mit C-h f neue-funktion nach Hilfe ruft.  Cool,
oder?  Andere Sprachen muessen sich da mit spezieller Syntax in den
Kommentaren vor der Definition behelfen."
  (interactive)
  (message "ich mach nicht viel."))
\end{verbatim}
So, der Dokumentationsstring, der zu \command{defun} als drittes
Argument hat sich bereits selber in großen Teilen erklärt.  Das erste
Argument ist offensichtlich der Name der neuen Funktion und das zweite
Argument ist eine Liste von Argumenten.  Alle weiteren Argumente
werden als auszuführende Befehle verstanden.
\item[\command{let}] Dieser Befehl dient zum Anlegen von lokalen
  Variablen.  Es ist sicherlich nicht sehr hilfreich, wenn jede
  Variable \texttt{i} oder so allgemein benamste wie \texttt{start}
  gleich global wären.  Was wäre, wenn man sich in einer Funktion
  befindet, die eine ebensolche Variable verwendet und eine andere
  Funktion aufruft, die sie ebenfalls verwendet?  Chaos wäre
  vorprogrammiert.  Den Geltungsbereich einer Variablen nennt man
  \emph{Scope} und man sollte zusehen, dass man den globalen Scope
  nicht mit Allgemeinplätzen vergriesgnaddelt.  Also: für globale
  Variablennamen schön ein eigenes Kürzel davor setzen, meist den
  eigenen Paktenamen, und sonst eben \command{let} einsetzen.
\begin{verbatim}
(let ((start (point))
      (end (+ (point) 9))
      current)
  (setq current start)
  (while (< current end)
    (forward-char 1)
    (setq current (point))
    (insert (format "%d" current))))
\end{verbatim}
OK, der Beispielcode ist Blödsinn, aber er zeigt, worum es geht: Im
ersten Argument (man beachte die Klammerung, es geht bis hinter
\texttt{current}) werden die Variablen \texttt{start} und \texttt{end}
definiert und jeweils mit einem Startwert versehen, während
\texttt{current} nur definiert wird.  In derauf folgenden Argumenten,
die erneut den auszuführenden Block ausmachen, werden diese Variablen
dann verwendet.  Mit \command{setq} wird der Wert von \texttt{current}
bei jedem Schleifendurchlauf neu gesetzt.
\end{description}
Es gibt natürlich noch durchaus einige weitere Spezialformen, und von
Makros\footnote{Hier sind \emph{Echte Lisp Macros}, englisch:
  \emph{Lisp True Macros} gemeint, die nicht mit den von C oder C++
  bekannten Makros verwechselt werden sollten.} wollen wir gar nicht
erst anfangen.  Die hier Vorgestellten werden für den Anfang
ausreichen, eine ganze Menge bestehenden Codes zu verstehen.  Wer auf
eine unbekannte Funktion trifft, stellt einfach den Cursor darauf und
tippt \ch{f}.  Daraufhin wird XEmacs die Funktion unter dem Cursor als
Voreinstellung beim Prompt nach dem Funktionsnamen anbieten, und die
Dokumentation, die ganz besonders bei den wichtigen Funktionen sehr
gut ist, wird angezeigt.
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\section{Datentypen}
\label{sec:elisp-types}
Offensichtlich sollte es in einer Programmiersprache, die \emph{List
  Processing} heißt, einen Datentyp \emph{Liste} geben.  Aber auch
andere gängige Datentypen, wie \emph{number} (mit den
Spezialisierungen \emph{integer} und \emph{float}), \emph{string},
\emph{vector} (so was ähnliches wie eine Liste), \emph{hash-table} und
\emph{symbol} sind neben einigen anderen vorhanden.  In den
allermeisten Fällen wird es dem angehenden ELisp-Programmierer nicht
so wichtig sein, mit welcher Art Datentyp er es zu tun hat, da dieses
Konzept in Lisp nicht die Wichtigkeit genießt wie es in anderen
Sprachen, wie C, der Fall ist.

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\subsection{Prädikate}
Gut zu wissen in diesem Zusammenhang ist es aber, dass es (meistens)
eine Funktion gibt, die feststellen kann, ob ein Ding einen bestimmten
Typ hat oder nicht.  Solche Funktionen, die eine Ja/Nein-Entscheidung
treffen, heißen \emph{Prädikate}\index{Prädikate} und sind
üblicherweise daran zu erkennen, dass ihr Name relativ unmotiviert auf
ein "`p"' endet: \command{numberp}, \command{hash-table-p} oder auch
\command{listp}.  Leider ist die Nomenklatur, wie hier bereits zu
erkennen, nicht ganz eindeutig, ob das p nun noch einen Strich davor
bekommt oder nicht.

Eigentlich gehört auch ein Abschnitt über Prädikate gar nicht in den
Abschnitt über Datentypen, aber es bot sich gerade so an.  Natürlich
gibt es noch viel mehr Prädikate.  So könnte ein Kommando, das die
\command{grep}-Funktion in der Funktionalität von Perl nachbaut, ein
Prädikat zum Filtern einer Liste verwenden:

\begin{verbatim}
(defun perl-grep (l predicate)
  (defun helper (ret-list rest)
    (if (null rest)
    (reverse ret-list)
        (progn
          ;; hier rufen wir das praedikat auf
          (if (funcall predicate (car rest))
          (setq ret-list (cons (car rest) ret-list)))
          (helper ret-list (cdr rest)))))
  (helper '() l))
\end{verbatim}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\subsection{Spezialitäten in ELisp}
Die bisher genannten Typen sind einerseits nur eine Untermenge von
andererseits recht generellen Lisp-Datentypen.  ELisp hat einige
Typen, die auch nur in diesem Umfeld Sinn machen.  Beispiele dafür
sind: \emph{Buffer}, \emph{Marker}, \emph{Extent}, \emph{Window},
\emph{Frame} und sogar \emph{Window Configuration}, also die
Einstellung der aktuellen Frameaufteilung. 

All diese Datentypen erleichtern die Arbeit mit dem XEmacs und die
Programmierung von nützlichen Päckchen.  Die genaue Dokumentation
findet sich in den Info-Seiten (\texttt{info lispref}, auf den
Unterseiten \emph{Lisp Data Types}) 

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\section{Gängige Funktionen}
\label{sec:elisp-defun}
Sammeln wir doch mal einige der wichtigen Funktionen zusammen, die man
für einfache Erweiterungen benötigen wird.
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\subsection{Bewegung}
\label{sec:elisp-bewegung}
Wir verordnen nun dem Point ein wenig Sport und Bewegung, zwar nicht
an der frischen Luft aber immerhin.
\begin{description}
\item[\command{forward-char}] Geht eine anzugebende Anzahl von Zeichen
  vor- oder rückwärts (falls die Zahl negativ mitgegeben wurde).
\item[\command{forward-line}] Entsprechendes zeilenweise.
\item[\command{forward-word}] Naja, \ldots
\item[\command{backward-char}] Wie \command{forward-char} mit
  negativem Argument. 
\item[\command{backward-word}] Kann man sich vielleicht auch schon
  denken. 
\item[\command{backward-line}] So, und jetzt kommt die Überraschung:
  diese Funktion gibt es (zum Zeitpunkt dieses Schreibens) nicht.
  Komisch eigentlich.
\item[\command{search-forward}] Sucht vorwärts nach einem anzugebenden
  String.  Dabei kann die Suche bis zu einer bestimmten Position
  begrenzt werden.  Neben dem gibt es noch weitere optionale
  Argumente.
\begin{verbatim}
(search-forward "hallo")
\end{verbatim}
Wenn die Funktion ihr Ziel findet, wird der Point hinterher
\emph{hinter} dem gefunden Wort stehen.
\item[\command{search-backward}] Diese Funktion gibt es natürlich
  auch.
\item[\command{re-search-forward} und \command{re-search-backward}]
  Suchen nicht nur nach einem ganz normalen String vor- oder
  rückwärts, sondern verwenden einen regulären Ausdruck zum Suchen.
  Diese Ausdrücke gehören, speziell in ELisp, zu den eher
  fortgeschrittenen Techniken und werden an dieser Stelle nicht
  erläutert.  Erfahrene Perlprogrammierer werden sich allerdings nicht
  sehr wohl mit den Regexps aus ELisp fühlen.  Wer fortgeschrittene
  Textverarbeitung betreiben will, wird aber nicht um sie herum
  kommen. 
\item[\command{goto-char}] 
\item[\command{beginning-of-line}] 
\item[\command{beginning-of-buffer}] Nein, nein, nein, diese Funktion
  ist für den interaktiven Gebraucht gedacht.  In eigenem Code sollte
  man lieber \texttt{(goto-char (point-min))} verwenden.
\end{description}
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\subsection{Einfügen und Löschen}
\label{sec:elisp-insert}
Frühe und einfache eigene Funktionen werden oft nur Textbausteine
halbwegs parametrisiert einfügen.  Etwas weiter entwickelte werden
auch schonmal Text löschen.  Was die Superfunktionen machen, sei dahin
gestellt, hier interessieren mal nur Einfügen und Löschen.
\begin{description}
\item[\command{insert}] Insert übernimmt einen String und fügt ihn an
  aktueller Position ein:
\begin{verbatim}
(insert "hier bin ich")
(let ((text "hier auch"))
  (insert text))
\end{verbatim}
\item[\command{format}] Wer etwas mehr als nur feste Strings einfügen
  möchte bedient sich dieser Formatierungsfunktion, die ähnlich
  arbeitet wie \command{printf} aus der Sprache C.  Es gibt spezielle
  Formatierungsanweisungen, die mit einem Prozentzeichen beginnen und
  sich auf weitere Argumente zu der Funktion beziehen.  Die genauen
  Anweisungen entnehme die interessierte Leserin bitte der
  Dokumentation.
\begin{verbatim}
(let ((objekt '(eine liste)))
  (insert 
   (format "Eine Zahl: %d, eine magische Objektrepräsentation: %s"
           23 objekt)))
\end{verbatim}
\item[\command{concat}] Diese Funktion gehört ebenfalls zum
  Handwerkszeug des Texteinfügens, da sie einfach mehrere
  Zeichenketten aneinander fügt.
\begin{verbatim}
(concat "text1" "text 2"
       (format "%d" 42))
\end{verbatim}
\item[\command{kill-region}] Befehle zum Löschen (nicht alle aber
  ausreichend viele) beginnen mit \texttt{kill-}.  Dabei wird
  allerdings der ausgeschnittene Text auf den \variable{kill-ring}
  geschoben, wo er später wieder verwendet werden kann, was bei großen
  Textmengen vielleicht nicht so wünschenswert ist.  Jedenfalls gibt
  es neben \command{kill-region}, das eine Region definiert durch einen
  Anfangs- und einen Endpunkt entgegen nimmt, noch \command{kill-line},
  \command{kill-word} sowie \command{kill-paragraph} und einige mehr. 
\end{description}
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\subsection{Positionsbestimmung}
\label{sec:elsip-whereami}
\begin{description}
\item[\command{point}] 
\item[\command{point-at-eol}] 
\item[\command{point-at-eob}] 
\item[\command{eobp}] 
\item[\command{bolp}] 
\end{description}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\subsection{Benutzereingaben}
\label{sec:elsip-userinput}
\begin{description}
\item[\command{interactive}] 
\item[\command{completing-read}] 
\item[\command{read-number}] 
\item[\command{read-string}] 
\end{description}
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\subsection{Listenverarbeitung}
\label{sec:elsip-list}
\begin{description}
\item[\command{list}] 
\item[\command{append}] 
\item[\command{reverse}] 
\item[\command{cons}] 
\item[\command{mapc}] 
\item[\command{mapconcat}] 
\end{description}
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\subsection{Einfach wichtige Funktionen}
\label{sec:elisp-utils}
\begin{description}
\item[\command{progn}] 
\item[\command{shell-command}] 
\item[\command{interactive}] 
\item[\command{save-excursion}] 
\item[\command{message}] 
\item[\command{car}, \command{cdr}] 
\end{description}
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\section{Punkt elc -- Bytekompilate}
\label{sec:bytecompile}
Lispprogramme können kompiliert werden, so auch im Falle des
ELispdialektes.  Diese Dateien sind daran zu erkennen, dass sie nicht
auf \file{.el} sondern auf \file{.elc} enden.  Durch die Kompilation
ist es für XEmacs möglich, die Dateien schneller zu laden und den
darin befindlichen Code auszuführen.  Bei eigenen Dateien der
Halbschwergewichtsklasse und neueren Rechnern macht das vermutlich
eher mehr Ärger als Sinn.  Zum einen werden die Kompilate beim Laden
vorgezogen, so vorhanden, was zu Verwirrungen führen kann, wenn man
die .el-Datei bearbeitet und nicht an das Kompilat denkt, zum anderen
sind neuere Maschinen doch schnell genug, um auch die reinen Dateien
zu laden.  Bei großen Paketen, die ohnehin nur aus dem Internet
geladen und installiert werden, ohne große Veränderungen, macht das
schon eher Sinn.

Oftmals kommen Pakete mit einem eigenen \file{Makefile}, in dem man
meist noch eine Variable
\begin{verbatim}
EMACS=emacs
\end{verbatim}
ersetzen muss:
\begin{verbatim}
EMACS=xemacs
\end{verbatim}
Denn die kompilierten Dateien sind nicht zwischen den beiden
Emacsgeschmacksrichtungen austauschbar.

Manuell geht das einfach mit \mx{byte-compile-buffer} oder aber
\mx{byte-compile-file}. 
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\section{Beispiele}
\label{sec:elisp-examples}
Für den Moment muss hier auf Hunderttausende von bestehenden
ELispzeilen in der XEmacsinstallation verwiesen werden.  Dazu muss man
ggf.\ die Quellen (also die .el-Dateien) aus einem Extrapaket der
eigenen Distribution nach installieren.  Irgendwann werden hier aber
bestimmt ein paar Schritt-für-Schritt Beispiele auftauchen.
%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\chapter{Eigene Projekte}
\label{cha:mystuff}
Dieses mag vielleicht eine möglichst allgemein gehaltene Einleitung zu
einem weit verbreiteten Programm sein.  Dennoch wird sie ganz
wesentlich von einer Person geschrieben: \emph{mir}.  Daher kann ich
mir ein paar Dinge leisten.  Beispielsweise finde ich es völlig in
Ordnung, hier in Icherzählerperspektive zu schreiben, was für eine
anspruchsvolle und gute technische Dokumentation --na sagen wir mal--
unüblich ist.  Neben dem kann ich aber auch einfach mal meine eigenen
Projekte vorstellen und ihnen somit ein wenig Prominenz
verschaffen\footnote{Diese Prominenz haben sie vielleicht gar nicht
  verdient, aber auch diesen Fall verbuche ich unter den gegebenen
  Freiheiten.}.  Immerhin will ich mich auf diejenigen beschränken,
die ich selber für sinnvoll und halbwegs gut gelungen erachte. 
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\section{HighlightContextLine}
Zum Betrachten von Postscriptdateien gibt es das Programm
\programm{gv} (\cite{gv}).  Dieses kommt mit einem bemerkenswerten
Feature daher: wenn die Seite größer ist als der angezeigte Bereich, 
wird beim Scrollen eine schwarze Linie am ehemaligen Bildrand
eingeblendet.  Ich frage mich manchmal, warum das nicht viel mehr
Programme können, da es die Orientierung doch sehr erleichtert.  Das
gilt besonders, weil verschiedene Programme verschiedene Auffassungen
vom richtigen Scrollverhalten haben.  So scroll \programm{less} in
halben Bildschirmen, wenn man auf die Taste \key{PgDn} drückt, andere
Programme zeigen gerade noch die zuletzt sichtbare Zeile an,
\programm{acroread} springt an das nächste Ende einer Seite und XEmacs
hat gar eine konfigurierbare Anzahl von \emph{Überlappzeilen}. 

Gegen dieses Dilemma tritt \file{highlight-context-line.el} an, in dem
es beim Scrollen die zuletzt sichtbare Zeile farbig hinterlegt.  Wenn
die Zeile natürlich gerade eine Leerzeile war, sieht man nix, aber
ansonsten funktioniert das sehr gut.

Die Einrichtung ist denkbar einfach:
\begin{verbatim}
(load "highlight-context-line")
(setq highlight-context-line-background "#c5c500")
\end{verbatim}

Jetzt nur noch eine Farbe aussuchen und das war's dann auch schon. 
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\section{MouseFocus}
Bei Windowmanagern, die im X-Windowsystem die Fenster verwalten und
verschieben, vergrößern und verkleinern, verzieren und verschwinden
lassen, ist es schon immer üblich gewesen, zwischen verschiedenen
Arten des Fokusverhaltens wählen zu können.  Das (anderswo
weitverbreitete und nach meiner Meinung unbenutzbare)
Klicktofocusverhalten bedeutet, dass man ein Fenster anklicken muss,
damit es den Fokus bekommt.  Das Verhalten "`Fokus folgt der Maus"',
das auch unter anderen Namen noch bekannt ist, hingegen gibt jedem
Fenster den Fokus, in das die Maus hineingeht.  Für die
XEmacs-\-Windows gilt eigenlich ja das erstgenannte.  Das empfinde
auch ich als richtig.  Andere Leute aber nicht.  So ein Bekannter von
mir, auf dessen ausdrücklichen Wunsch ist dieses Modul geschrieben
habe, das ein "`Fokus folgt der Maus"' Verhalten für XEmacs-\-Fenster
liefert.  Einfach nur nachladen und einschalten:
\begin{verbatim}
(require 'mouse-focus)
(turn-on-mouse-focus)
\end{verbatim}
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\section{SwissMove}
Tja, \emph{SwissMove} habe ich die Navigation durch große Dateien
genannt, bei der man in immer kleiner werdenden Schritten voran- und
zurückschreitet.  Wenn man weiß, wohin man will, kann man hiermit mit
wenigen Schritten ans Ziel finden.  Bei jedem Schritt wird die
Schrittweite halbiert.  Die erste Schrittweite geht genau die Hälfte
der absoluten Länge in die gewünschte Richtung.  Stünde ich also zu
Beginn auf einer Position bei etwa 30\% der Datei, blieben noch 60\%
bis zum Ende.  Ein SwissMove vorwärts brächte mich an eine Stelle bei
etwa 60\%.  Ein sofortiger Schritt zurück von dort aus würde die erste
Schrittweite von 30\% halbieren und mich also zu etwa 45\% bringen.
Man muss es einfach mal versuchen.  Ich habe viel Spass gehabt, das zu
programmieren und fand die Idee auch gut, aber verwende diese Funktion
dennoch nicht.  Aber wer weiß, vielleicht gibt es ja
experimentierfreudige Menschen, die diese Art der Navigation
verwenden. 
\begin{verbatim}
(require 'swiss-move)
(global-set-key '[(shift prior)] 'swiss-move-line-up)
(global-set-key '[(shift next)]  'swiss-move-line-down)
\end{verbatim}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\section{CDargs}
\label{sec:cdargs}
CDargs (\cite{cdargs}) ist eigentlich ein Programm für die Shell, das
Bookmarks für das Dateisytem ermöglicht.  Diese Bookmarks lassen sich
jedoch auch vom XEmacs aus auslesen.  Dazu liefet das CDargs-Paket ein
entpsrechendes .el-File mit.  Die XEmacsvariante kann sogar noch einen
entsprechenden Hook ausführen und so beispielsweise einen evtl.\ 
vorhandenen Desktop automatisch laden, sobald das Verzeichnis mit
\mx{cv} angesprungen wurde.

\begin{verbatim}
(require 'cdargs)
(add-hook 'cdargs-warped-hook
          '(lambda ()
             (when (file-exists-p
                    (expand-file-name desktop-basefilename "./"))
               (desktop-read))))
\end{verbatim}
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\section{MTorus}
Eine bewegte Geschichte, tolle Features und viel zu erzählen gibt es
hier.  Momentan sei dazu auf \cite{mtorus} verwiesen.  Auch wenn
dieser Abschnitt in diesem Kapitel der kleinste ist, ist doch dieses
Projekt wohl mein größtes (und mittlerweile in kompetentere Hände
gewandert). 
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\section{TrackScroll}
Mich persönlich überzeugen ja viele der tollen Errungenschaften des
Graphical Userinterface Designs nicht wirklich.  Ich habe mich im
XEmacs der Toolbar sehr früh entledigt, habe dann einigen Aufwand
betrieben, um die Menuleiste soweit wie möglich loszuwerden
(\cite{activemenu}) und auch die Scrollbar finde ich unsäglich in
ihrer Verwendung.  Warum muss ich da auf so kleine Bereiche mit der
Maus zielen?  Dass sich die Scrollbar noch auf meinem Bildschirm
befindet verdankt sie zweierlei: 
\begin{enumerate}
\item Sie ist klein und der Platz, den sie braucht geht vom
  horizontalen Raum ab, nicht vom (wertvollen) vertikalen.
\item Sie gibt eine gute Übersicht über die aktuelle Position
  innerhalb einer Datei und die Größe der Datei.
\end{enumerate}
Zum Scrollen selber verwende ich sie nur noch selten, denn das hier
vorgestellte Paket liefert zwei Funktionalitäten:
\begin{enumerate}
\item Anfassen und Verschieben des Fensterinhaltes.  Wenn ich einfach
  nur mit der mittleren Maustaste irgendwo im Fenster ziehe, wandert
  der Inhalt mit.  Das wird allerdings von manchen Modes
  überschrieben. 
\item Scrollbar überall.  Bei gleichzeitig gedrückter Control-Taste
  wird der gesamte Fensterbereich zu einer Scrollbar.
\end{enumerate}
Die Verwendung ist einfach:
\begin{verbatim}
(require 'track-scroll)
\end{verbatim}
und ob es dem persönlichen Geschmack entspricht, muss jede Anwenderin
selber ausprobieren.
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%\pagenumbering{arabic}
\appendix
\chapter{Beispieldateien}
\section{\file{personal.el}}
\label{sec:filepersonal.el}
\verbatiminput{personal.el}
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\section{\file{ska-local-keys.el}}
\label{sec:filelocalkeys.el}
\verbatiminput{ska-local-keys.el}
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\section{\file{ska-global-keys.el}}
\label{sec:fileglobalkeys.el}
\verbatiminput{ska-global-keys.el}
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\chapter{Lizenz}
\label{sec:lizenz}
Ich stelle diese Dokumentation unter der GFDL bereit.  Im Folgenden
wird der (englische) Text der GFDL wiedergegeben.  Ich habe dazu die
auf \cite{fdl} angebotene \LaTeX-Version verwendet, die sich nach
meinem Dafürhalten etwas seltsam verhält, indem sie selber das
Inhaltsverzeichnis erzeugt und ihre Überschriften formatiert.  Da ich
aber nicht geneigt bin, genau zu prüfen, ob ich die
\emph{Formatierung} ändern darf, gebe ich das hier so wie es ist
wieder. 
\section{GNU Free Documentation License}
\selectlanguage{USenglish}
\footnotesize
\begin{center}
  
  Version 1.2, November 2002
  
  
  Copyright \copyright 2000,2001,2002  Free Software Foundation, Inc.
  
  \bigskip
  
  59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
  
  \bigskip
  
  Everyone is permitted to copy and distribute verbatim copies
  of this license document, but changing it is not allowed.
\end{center}


\begin{center}
  {\bf\large Preamble}
\end{center}

The purpose of this License is to make a manual, textbook, or other
functional and useful document ``free'' in the sense of freedom: to
assure everyone the effective freedom to copy and redistribute it,
with or without modifying it, either commercially or noncommercially.
Secondarily, this License preserves for the author and publisher a way
to get credit for their work, while not being considered responsible
for modifications made by others.

This License is a kind of ``copyleft'', which means that derivative
works of the document must themselves be free in the same sense.  It
complements the GNU General Public License, which is a copyleft
license designed for free software.

We have designed this License in order to use it for manuals for free
software, because free software needs free documentation: a free
program should come with manuals providing the same freedoms that the
software does.  But this License is not limited to software manuals;
it can be used for any textual work, regardless of subject matter or
whether it is published as a printed book.  We recommend this License
principally for works whose purpose is instruction or reference.


\begin{center}
{\Large\bf 1. APPLICABILITY AND DEFINITIONS}
\addcontentsline{toc}{section}{1. APPLICABILITY AND DEFINITIONS}
\end{center}

This License applies to any manual or other work, in any medium, that
contains a notice placed by the copyright holder saying it can be
distributed under the terms of this License.  Such a notice grants a
world-wide, royalty-free license, unlimited in duration, to use that
work under the conditions stated herein.  The \textbf{``Document''}, below,
refers to any such manual or work.  Any member of the public is a
licensee, and is addressed as \textbf{``you''}.  You accept the license if you
copy, modify or distribute the work in a way requiring permission
under copyright law.

A \textbf{``Modified Version''} of the Document means any work containing the
Document or a portion of it, either copied verbatim, or with
modifications and/or translated into another language.

A \textbf{``Secondary Section''} is a named appendix or a front-matter section of
the Document that deals exclusively with the relationship of the
publishers or authors of the Document to the Document's overall subject
(or to related matters) and contains nothing that could fall directly
within that overall subject.  (Thus, if the Document is in part a
textbook of mathematics, a Secondary Section may not explain any
mathematics.)  The relationship could be a matter of historical
connection with the subject or with related matters, or of legal,
commercial, philosophical, ethical or political position regarding
them.

The \textbf{``Invariant Sections''} are certain Secondary Sections whose titles
are designated, as being those of Invariant Sections, in the notice
that says that the Document is released under this License.  If a
section does not fit the above definition of Secondary then it is not
allowed to be designated as Invariant.  The Document may contain zero
Invariant Sections.  If the Document does not identify any Invariant
Sections then there are none.

The \textbf{``Cover Texts''} are certain short passages of text that are listed,
as Front-Cover Texts or Back-Cover Texts, in the notice that says that
the Document is released under this License.  A Front-Cover Text may
be at most 5 words, and a Back-Cover Text may be at most 25 words.

A \textbf{``Transparent''} copy of the Document means a machine-readable copy,
represented in a format whose specification is available to the
general public, that is suitable for revising the document
straightforwardly with generic text editors or (for images composed of
pixels) generic paint programs or (for drawings) some widely available
drawing editor, and that is suitable for input to text formatters or
for automatic translation to a variety of formats suitable for input
to text formatters.  A copy made in an otherwise Transparent file
format whose markup, or absence of markup, has been arranged to thwart
or discourage subsequent modification by readers is not Transparent.
An image format is not Transparent if used for any substantial amount
of text.  A copy that is not ``Transparent'' is called \textbf{``Opaque''}.

Examples of suitable formats for Transparent copies include plain
ASCII without markup, Texinfo input format, LaTeX input format, SGML
or XML using a publicly available DTD, and standard-conforming simple
HTML, PostScript or PDF designed for human modification.  Examples of
transparent image formats include PNG, XCF and JPG.  Opaque formats
include proprietary formats that can be read and edited only by
proprietary word processors, SGML or XML for which the DTD and/or
processing tools are not generally available, and the
machine-generated HTML, PostScript or PDF produced by some word
processors for output purposes only.

The \textbf{``Title Page''} means, for a printed book, the title page itself,
plus such following pages as are needed to hold, legibly, the material
this License requires to appear in the title page.  For works in
formats which do not have any title page as such, ``Title Page'' means
the text near the most prominent appearance of the work's title,
preceding the beginning of the body of the text.

A section \textbf{``Entitled XYZ''} means a named subunit of the Document whose
title either is precisely XYZ or contains XYZ in parentheses following
text that translates XYZ in another language.  (Here XYZ stands for a
specific section name mentioned below, such as \textbf{``Acknowledgements''},
\textbf{``Dedications''}, \textbf{``Endorsements''}, or \textbf{``History''}.)  
To \textbf{``Preserve the Title''}
of such a section when you modify the Document means that it remains a
section ``Entitled XYZ'' according to this definition.

The Document may include Warranty Disclaimers next to the notice which
states that this License applies to the Document.  These Warranty
Disclaimers are considered to be included by reference in this
License, but only as regards disclaiming warranties: any other
implication that these Warranty Disclaimers may have is void and has
no effect on the meaning of this License.


\begin{center}
{\Large\bf 2. VERBATIM COPYING}
\addcontentsline{toc}{section}{2. VERBATIM COPYING}
\end{center}

You may copy and distribute the Document in any medium, either
commercially or noncommercially, provided that this License, the
copyright notices, and the license notice saying this License applies
to the Document are reproduced in all copies, and that you add no other
conditions whatsoever to those of this License.  You may not use
technical measures to obstruct or control the reading or further
copying of the copies you make or distribute.  However, you may accept
compensation in exchange for copies.  If you distribute a large enough
number of copies you must also follow the conditions in section 3.

You may also lend copies, under the same conditions stated above, and
you may publicly display copies.


\begin{center}
{\Large\bf 3. COPYING IN QUANTITY}
\addcontentsline{toc}{section}{3. COPYING IN QUANTITY}
\end{center}


If you publish printed copies (or copies in media that commonly have
printed covers) of the Document, numbering more than 100, and the
Document's license notice requires Cover Texts, you must enclose the
copies in covers that carry, clearly and legibly, all these Cover
Texts: Front-Cover Texts on the front cover, and Back-Cover Texts on
the back cover.  Both covers must also clearly and legibly identify
you as the publisher of these copies.  The front cover must present
the full title with all words of the title equally prominent and
visible.  You may add other material on the covers in addition.
Copying with changes limited to the covers, as long as they preserve
the title of the Document and satisfy these conditions, can be treated
as verbatim copying in other respects.

If the required texts for either cover are too voluminous to fit
legibly, you should put the first ones listed (as many as fit
reasonably) on the actual cover, and continue the rest onto adjacent
pages.

If you publish or distribute Opaque copies of the Document numbering
more than 100, you must either include a machine-readable Transparent
copy along with each Opaque copy, or state in or with each Opaque copy
a computer-network location from which the general network-using
public has access to download using public-standard network protocols
a complete Transparent copy of the Document, free of added material.
If you use the latter option, you must take reasonably prudent steps,
when you begin distribution of Opaque copies in quantity, to ensure
that this Transparent copy will remain thus accessible at the stated
location until at least one year after the last time you distribute an
Opaque copy (directly or through your agents or retailers) of that
edition to the public.

It is requested, but not required, that you contact the authors of the
Document well before redistributing any large number of copies, to give
them a chance to provide you with an updated version of the Document.


\begin{center}
{\Large\bf 4. MODIFICATIONS}
\addcontentsline{toc}{section}{4. MODIFICATIONS}
\end{center}

You may copy and distribute a Modified Version of the Document under
the conditions of sections 2 and 3 above, provided that you release
the Modified Version under precisely this License, with the Modified
Version filling the role of the Document, thus licensing distribution
and modification of the Modified Version to whoever possesses a copy
of it.  In addition, you must do these things in the Modified Version:

\begin{itemize}
\item[A.] 
   Use in the Title Page (and on the covers, if any) a title distinct
   from that of the Document, and from those of previous versions
   (which should, if there were any, be listed in the History section
   of the Document).  You may use the same title as a previous version
   if the original publisher of that version gives permission.
   
\item[B.]
   List on the Title Page, as authors, one or more persons or entities
   responsible for authorship of the modifications in the Modified
   Version, together with at least five of the principal authors of the
   Document (all of its principal authors, if it has fewer than five),
   unless they release you from this requirement.
   
\item[C.]
   State on the Title page the name of the publisher of the
   Modified Version, as the publisher.
   
\item[D.]
   Preserve all the copyright notices of the Document.
   
\item[E.]
   Add an appropriate copyright notice for your modifications
   adjacent to the other copyright notices.
   
\item[F.]
   Include, immediately after the copyright notices, a license notice
   giving the public permission to use the Modified Version under the
   terms of this License, in the form shown in the Addendum below.
   
\item[G.]
   Preserve in that license notice the full lists of Invariant Sections
   and required Cover Texts given in the Document's license notice.
   
\item[H.]
   Include an unaltered copy of this License.
   
\item[I.]
   Preserve the section Entitled ``History'', Preserve its Title, and add
   to it an item stating at least the title, year, new authors, and
   publisher of the Modified Version as given on the Title Page.  If
   there is no section Entitled ``History'' in the Document, create one
   stating the title, year, authors, and publisher of the Document as
   given on its Title Page, then add an item describing the Modified
   Version as stated in the previous sentence.
   
\item[J.]
   Preserve the network location, if any, given in the Document for
   public access to a Transparent copy of the Document, and likewise
   the network locations given in the Document for previous versions
   it was based on.  These may be placed in the ``History'' section.
   You may omit a network location for a work that was published at
   least four years before the Document itself, or if the original
   publisher of the version it refers to gives permission.
   
\item[K.]
   For any section Entitled ``Acknowledgements'' or ``Dedications'',
   Preserve the Title of the section, and preserve in the section all
   the substance and tone of each of the contributor acknowledgements
   and/or dedications given therein.
   
\item[L.]
   Preserve all the Invariant Sections of the Document,
   unaltered in their text and in their titles.  Section numbers
   or the equivalent are not considered part of the section titles.
   
\item[M.]
   Delete any section Entitled ``Endorsements''.  Such a section
   may not be included in the Modified Version.
   
\item[N.]
   Do not retitle any existing section to be Entitled ``Endorsements''
   or to conflict in title with any Invariant Section.
   
\item[O.]
   Preserve any Warranty Disclaimers.
\end{itemize}

If the Modified Version includes new front-matter sections or
appendices that qualify as Secondary Sections and contain no material
copied from the Document, you may at your option designate some or all
of these sections as invariant.  To do this, add their titles to the
list of Invariant Sections in the Modified Version's license notice.
These titles must be distinct from any other section titles.

You may add a section Entitled ``Endorsements'', provided it contains
nothing but endorsements of your Modified Version by various
parties--for example, statements of peer review or that the text has
been approved by an organization as the authoritative definition of a
standard.

You may add a passage of up to five words as a Front-Cover Text, and a
passage of up to 25 words as a Back-Cover Text, to the end of the list
of Cover Texts in the Modified Version.  Only one passage of
Front-Cover Text and one of Back-Cover Text may be added by (or
through arrangements made by) any one entity.  If the Document already
includes a cover text for the same cover, previously added by you or
by arrangement made by the same entity you are acting on behalf of,
you may not add another; but you may replace the old one, on explicit
permission from the previous publisher that added the old one.

The author(s) and publisher(s) of the Document do not by this License
give permission to use their names for publicity for or to assert or
imply endorsement of any Modified Version.


\begin{center}
{\Large\bf 5. COMBINING DOCUMENTS}
\addcontentsline{toc}{section}{5. COMBINING DOCUMENTS}
\end{center}


You may combine the Document with other documents released under this
License, under the terms defined in section 4 above for modified
versions, provided that you include in the combination all of the
Invariant Sections of all of the original documents, unmodified, and
list them all as Invariant Sections of your combined work in its
license notice, and that you preserve all their Warranty Disclaimers.

The combined work need only contain one copy of this License, and
multiple identical Invariant Sections may be replaced with a single
copy.  If there are multiple Invariant Sections with the same name but
different contents, make the title of each such section unique by
adding at the end of it, in parentheses, the name of the original
author or publisher of that section if known, or else a unique number.
Make the same adjustment to the section titles in the list of
Invariant Sections in the license notice of the combined work.

In the combination, you must combine any sections Entitled ``History''
in the various original documents, forming one section Entitled
``History''; likewise combine any sections Entitled ``Acknowledgements'',
and any sections Entitled ``Dedications''.  You must delete all sections
Entitled ``Endorsements''.

\begin{center}
{\Large\bf 6. COLLECTIONS OF DOCUMENTS}
\addcontentsline{toc}{section}{6. COLLECTIONS OF DOCUMENTS}
\end{center}

You may make a collection consisting of the Document and other documents
released under this License, and replace the individual copies of this
License in the various documents with a single copy that is included in
the collection, provided that you follow the rules of this License for
verbatim copying of each of the documents in all other respects.

You may extract a single document from such a collection, and distribute
it individually under this License, provided you insert a copy of this
License into the extracted document, and follow this License in all
other respects regarding verbatim copying of that document.


\begin{center}
{\Large\bf 7. AGGREGATION WITH INDEPENDENT WORKS}
\addcontentsline{toc}{section}{7. AGGREGATION WITH INDEPENDENT WORKS}
\end{center}


A compilation of the Document or its derivatives with other separate
and independent documents or works, in or on a volume of a storage or
distribution medium, is called an ``aggregate'' if the copyright
resulting from the compilation is not used to limit the legal rights
of the compilation's users beyond what the individual works permit.
When the Document is included in an aggregate, this License does not
apply to the other works in the aggregate which are not themselves
derivative works of the Document.

If the Cover Text requirement of section 3 is applicable to these
copies of the Document, then if the Document is less than one half of
the entire aggregate, the Document's Cover Texts may be placed on
covers that bracket the Document within the aggregate, or the
electronic equivalent of covers if the Document is in electronic form.
Otherwise they must appear on printed covers that bracket the whole
aggregate.


\begin{center}
{\Large\bf 8. TRANSLATION}
\addcontentsline{toc}{section}{8. TRANSLATION}
\end{center}


Translation is considered a kind of modification, so you may
distribute translations of the Document under the terms of section 4.
Replacing Invariant Sections with translations requires special
permission from their copyright holders, but you may include
translations of some or all Invariant Sections in addition to the
original versions of these Invariant Sections.  You may include a
translation of this License, and all the license notices in the
Document, and any Warranty Disclaimers, provided that you also include
the original English version of this License and the original versions
of those notices and disclaimers.  In case of a disagreement between
the translation and the original version of this License or a notice
or disclaimer, the original version will prevail.

If a section in the Document is Entitled ``Acknowledgements'',
``Dedications'', or ``History'', the requirement (section 4) to Preserve
its Title (section 1) will typically require changing the actual
title.


\begin{center}
{\Large\bf 9. TERMINATION}
\addcontentsline{toc}{section}{9. TERMINATION}
\end{center}


You may not copy, modify, sublicense, or distribute the Document except
as expressly provided for under this License.  Any other attempt to
copy, modify, sublicense or distribute the Document is void, and will
automatically terminate your rights under this License.  However,
parties who have received copies, or rights, from you under this
License will not have their licenses terminated so long as such
parties remain in full compliance.


\begin{center}
{\Large\bf 10. FUTURE REVISIONS OF THIS LICENSE}
\addcontentsline{toc}{section}{10. FUTURE REVISIONS OF THIS LICENSE}
\end{center}


The Free Software Foundation may publish new, revised versions
of the GNU Free Documentation License from time to time.  Such new
versions will be similar in spirit to the present version, but may
differ in detail to address new problems or concerns.  See
http://www.gnu.org/copyleft/.

Each version of the License is given a distinguishing version number.
If the Document specifies that a particular numbered version of this
License ``or any later version'' applies to it, you have the option of
following the terms and conditions either of that specified version or
of any later version that has been published (not as a draft) by the
Free Software Foundation.  If the Document does not specify a version
number of this License, you may choose any version ever published (not
as a draft) by the Free Software Foundation.


\begin{center}
{\Large\bf ADDENDUM: How to use this License for your documents}
\addcontentsline{toc}{section}{ADDENDUM: How to use this License for your documents}
\end{center}

To use this License in a document you have written, include a copy of
the License in the document and put the following copyright and
license notices just after the title page:

\bigskip
\begin{quote}
    Copyright \copyright  YEAR  YOUR NAME.
    Permission is granted to copy, distribute and/or modify this document
    under the terms of the GNU Free Documentation License, Version 1.2
    or any later version published by the Free Software Foundation;
    with no Invariant Sections, no Front-Cover Texts, and no Back-Cover Texts.
    A copy of the license is included in the section entitled ``GNU
    Free Documentation License''.
\end{quote}
\bigskip
    
If you have Invariant Sections, Front-Cover Texts and Back-Cover Texts,
replace the ``with...Texts.'' line with this:

\bigskip
\begin{quote}
    with the Invariant Sections being LIST THEIR TITLES, with the
    Front-Cover Texts being LIST, and with the Back-Cover Texts being LIST.
\end{quote}
\bigskip
    
If you have Invariant Sections without Cover Texts, or some other
combination of the three, merge those two alternatives to suit the
situation.

If your document contains nontrivial examples of program code, we
recommend releasing these examples in parallel under your choice of
free software license, such as the GNU General Public License,
to permit their use in free software.
\selectlanguage{german}
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\chapter{Dank}
\label{cha:dank}
\begin{itemize}
\item Dank allen Entwicklern sowohl des XEmacs als auch des Gnu Emacs
  für den besten Editor der Welt.
\item Dank an Claus Brunzema (\cite{brunzema}) für stetiges
  Korrekturlesen und Hilfe in Lisp-Geschichten.
\item Dank an Ralf Angeli für Korrekturen und Hinweise zu meinem
  \LaTeX-Code sowie zu AUCTeX.
\item Dank meiner Familie für die Zeit, die ich hierfür hatte.
\end{itemize}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\nocite{*}
\renewcommand\refname{Links und andere Quellen}
\bibliography{quellen}
\bibliographystyle{volker6}

\printindex

\end{document}
% Make this the Master File for Emacs-AUC-TeX:
%%% Local Variables: 
%%% mode: latex
%%% TeX-master: t
%%% End: 
