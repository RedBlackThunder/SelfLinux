<?xml version="1.0" encoding="iso-8859-1"?>

<chapter>
 <title>Einführung</title>

 <author>
  <name>Florian Frank</name>
  <mailto>florian@pingos.org</mailto>
 </author>

 <author>
  <name>Ben Collins-Sussman</name>
 </author>

 <author>
  <name>Brian W. Fitzpatrick</name>
 </author>

 <author>
  <name>C. Michael Pilato</name>
 </author>

 <layout>
  <name>Matthias Hagedorn</name>
  <mailto>matthias.hagedorn@selflinux.org</mailto>
 </layout>

 <license>GFDL</license>

 <index>svn_buch_einfuehrung</index>

 <split>
  <section>
   <heading>
Einleitung
   </heading>

   <textblock>
Versionkontrolle ist die Kunst Änderungen zu verwalten.
Es war lange Zeit ein kritisches Werkzeug für Programmierer,
die üblicherweise ihre Zeit damit verbrachten kleine Änderungen
an Software vorzunehmen und diese am nächsten Tag wieder rückgängig
zu machen.
   </textblock>

   <textblock>
Aber die Nützlichkeit von Versionkontrollsoftware liegt weit
außerhalb der Grenzen der Softwareentwicklungswelt.
Überall wo Menschen Computer verwenden, um Daten zu Verwalten
ändern sich diese häufig. Und das ist der Punkt an dem Subversion
ins Spiel kommt.
   </textblock>

   <textblock>
Das Kapitel enthält eine Einführung in Subversion auf hoher Ebene.
Was es ist? Was es tut? Wie man es bekommt?
   </textblock>
  </section>

  <section>
   <heading>
Was ist Subversion?
   </heading>

   <textblock>
Subversion ist ein freies Versionskontrollsystem.
Subversion verwaltet Dateien und Verzeichnisse über die Zeit hinweg.
Ein Baum der Dateien wird in ein zentrales Repository abgelegt.
Das Repository ist wie ein gewöhlicher File-Server, aussser dass sich
dieser an jede jemals gemachte Änderung erinnert. Das erlaubt
es jede ältere Version der Daten wiederherzustellen, oder die
Geschichte der Änderungen zu untersuchen. In dieser Hinsicht, stellen
sich viele Leute ein Versionskontrollsystem als eine Art von
Zeitmaschine vor.
   </textblock>

   <textblock>
Subversion erlaubt den Zugriff auf sein Repository durch
ein Netzwerk, womit der Zugriff von unterschiedlichen
Rechnern aus ermöglicht wird. Die Möglichkeit auf einer bestimmten
Ebene verschiedener Leute Datensätze an unterschiedlichen Orten zu
verwalten und zu modifizieren fördert die Zusammenarbeit.
Fortschritte können früher eintreten als ohne eine Kanaliserung, durch
die alle Änderung laufen müssen.
Und auf Grund der Tatsache, dass die Arbeit versioniert wird, braucht
man nicht zu befürchten, dass die Qualität der Ausgleich für den
Verlust der Kanalisierung ist, wenn eine fehlerhafte Änderung
an den Daten durchgeführt wurde. Sie kann einfach rückgängig gemacht
werden.
   </textblock>

   <textblock>
Einige Versionskontrollsysteme sind auch Software Konfigurations
Management Systeme (SKM). Diese Systeme sind speziell darauf
zugeschnitten, Quellcodebäume zu verwalten. Sie haben sehr
viele Funktionalitäten, die auf die Software-Entwicklung
ausgerichtet sind. z. B. die Fähigkeit Programmiersprachen
zu verstehen oder sie liefern spezielle Werkzeuge zum Erzeugen
von Software mit. Subversion aber ist keines von diesen Systemen.
Es ist ein allgemeines System welches zur Verwaltung
jeder Art von Dateien verwendet werden kann.
Für Sie können die Dateien Quellcode sein, während es für andere
eine Einkaufsliste im Supermarkt ist bis zur Videoliste und
darüber hinaus.
   </textblock>
  </section>
 </split>

 <split>
  <section>
   <heading>
Die Geschichte von Subversion
   </heading>

   <textblock>
Anfang 2000, <ref lang="en" url="http://www.collab.net">CollabNet, Inc.</ref>
suchte Entwickler, um einen Ersatz für CVS erstellen sollten.
CollabNet bot eine Collaboration Software Suite genannt
SourceCast an, von deren eine Komponente Versionskontrolle ist.
Obwohl SourceCast CVS als initiale Versionskontrolle verwendete,
waren die Grenzen von CVS von Anfang an offensichtlich. Es
musste etwas besseres gefunden werden.
Bedauerlicherweise war CVS ein de facto
Standard in der Welt des Open Source, weil es nichts besseres gab,
zumindest nicht unter einer freien Lizenz.
Somit entschied sich CollabNet ein neues Versionskontrollsystem
von Grund auf zu entwickeln, aber unter zurückhaltender
Übernahme der Grundideen von CVS, ohne deren Fehler und
Misständen mit zu übernehmen.
   </textblock>

   <textblock>
Im Februar 2000, nahmen sie Kontakt zu Karl Fogel, dem Autor
des Buches Open Source Development with CVS
(Coriolis, 1999) und fragten ihn, ob er an diesem neuen
Projekt mitarbeiten wollte. Zu dieser Zeit war Karl Fogel
zufälligerweise in Kontakt mit seinem Freund Jim Blandy und
diskutierte ein neues Design für ein Versionskontrollsystem.
1995 hatten die beiden Cyclic Software gegründet, welches Support-Verträge
für CVS bot, welche sie später verkauften, während die
Verwendung von CVS in der täglichen Arbeit weitergeführt wurde.
Seine Frustration mit CVS liess Jim über bessere Wege
der Versionsverwaltung nachdenken, wobei er nicht nur
den Namen Subversion lieferte, sondern auch das
grundlegende Design des Subversion Repositories.
Als CollabNet bei Karl Anfragte, stimmte Karl sofort zu im Projekt
mitzuarbeiten, womit Jim seinen Arbeitgeber, RedHat Software,
welcher die hauptsächliche Unterstützung über einen
unbestimmten Zeitraum für das Projekt darstellte, gefunden hatte.
   </textblock>

   <textblock>
CollabNet liehen sich Karl und Ben Collins-Sussman aus und die
Arbeiten an Details begannen im Mai.
Mit einigen wohl platzierten Anstößen von Brian Behlendorf und
Jason Robbins von CollabNet und Greg Stein (zu der Zeit ein unabhängiger
Entwickler aktiv im WebDAV/DeltaV Spezifikationsprozeß),
zog Subversion schnell eine Gemeinschaft von aktiven Entwicklern
an. Es zeigte sich, dass viele Leute die gleichen frustrierenden
Erfahrungen mit CVS hatten, und begrüßten die Chance etwas
zu ändern.
   </textblock>

   <textblock>
Das ursprüngliche Design-Team setzte auf einige einfache
Ziele. Sie wollten keine neuen Grundlagen im Bereich der
Versionskontrolle finden, sie wollten einfach die Probleme
bei CVS ablösen. Sie entschieden sich dafür, dass Subversion
die Funktionen von CVS abdeckt und das gleiche Entwicklungs Modell
beibehielt, aber nicht die meist offensichtlichen Probleme übernahm.
   </textblock>

   <textblock>
Obwohl es keinen Ersatz für CVS darstellen sollte, musste es
dennoch stark an CVS angelehnt sein, um dem CVS Anwender den
Übergang zu erleichtern.
   </textblock>

   <textblock>
Nach 14 Monanten Entwicklung, konnte Subversion
sich am 31. August 2001 selbst verwalten.
Damit stoppten die Subversion Entwickler die
Verwendung von CVS und verwendeteten Subversion
ab diesem Zeitpunkt selbst zur Verwaltung.
   </textblock>

   <textblock>
Während CollabNet das Projekt initiierte und einen großen Teil
der Arbeit finanziert, schreitet Subversion
voran wie die meisten Open-Source Projekte, beherrscht durch einen
lockeren, transparenten Satz von Regeln, der die Leitstungsbereitschaft
bestärkt. Die Urheberlizenz von CollabNet ist konform zu den Debian
Freien Software Richtlinien. Mit anderen Worten, jedem steht es frei,
Subversion herunterzuladen, zu modifizieren und es weiter zu verbreiten
wie es einem gefällt ohne Erlaubnis von CollabNet oder
irgendjemand anderen ist.
   </textblock>
  </section>
 </split>

 <split>
  <section>
   <heading>
Die Subversion Funktionen
   </heading>

   <textblock>
Wenn die Diskussion über die Funktionen von Subversion
auf den Tisch kommt, ist es meist hilfreich über
die Begriffe zu reden, die es gegenüber CVS vorraus hat.
Wenn Sie nicht mit CVS vertraut sind, verstehen Sie eventuell
nicht alle dieser Funktionen. Subversion unterstützt folgende Konzepte:
   </textblock>

   <ul>
    <li>
<strong>Verzeichnisversionierung</strong><br/>
CVS zeichnet lediglich die Geschichte von einzelnenen
Dateien auf, während Subversion ein virtuelles
versioniertes Dateisystem implementiert, das die Änderung
an ganzen Verzeichnissbäumen über die Zeit aufzeichnet.
Dateien und Verzeichnisse werden versioniert.
    </li>
    <li>
<strong>wahre Historie</strong><br/>
Während CVS auf die Versionierung von Dateien
beschränkt ist und Operationen wie Kopieren und Umbenennen
werden ebenso wie Verzeichnisse nicht durch CVS versioniert.
Zusätzlich können Sie in CVS keine versionierte Datei
durch eine Datei gleichen Namens aber anderen Inhaltes
ersezten ohne die aufgezeichnete Geschichte der
alten Datei zu erben, die aber ohne Bezug zur ihrem aktuellen
Inhalt ist.
Mit Subversion können Sie sowohl Dateien als auch
Verzeichnisse hinzufügen, löschen, kopieren, umbenennen sowohl
der Dateien als auch der Verzeichnisse und jede neu
hinzugefügte Datei begint mit einer frischen und leeren
Historie.
    </li>
    <li>
<strong>atomare Commits</strong><br/>
Ein Sammlung von Ändungern wird entweder komplett
in das Repository aufgenommen oder garnicht. Das erlaubt Entwicklern
die Konstruktion und das Commiten von logischen Einheiten
als Ganzes und verhindert Probleme, die auftreten können
wenn nur Teile eines Änderungssatzes erfolgreich
in das Repository gesichert wurden.
    </li>
    <li>
<strong>versionierte Metadaten</strong><br/>
Jede Datei und Verzeichnis hat einen Satz von Eigenschaften;
Schlüssel zu denen Werte assoziiert sind.
Sie können beliebige Schlüssel/Werte Kombinationen
erzeugen und speichern. Eigenschaften werden über die
Zeit versioniert wie das mit dem Inhalt von Dateien
ebenfalls gemacht wird.
    </li>
    <li>
<strong>abstrakte Netzwerkschickt</strong><br/>
Subversion hat eine abstrakte Vorstellung über den Zugriff
auf das Repository, um es einfach zu ermöglichen
neue Netzwerkmechanismen zu implementieren.
Subversion kann als Apache Module in den HTTP Server
eingebaut werden.
Das gibt Subversion einen großen Vorteil bzgl. Stabilität
und Kompatibilität und direktem Zugriff auf vorhandene
Eigenschaften, die durch den Server zur Verfügung gestellt
werden. Authentifizierung, Berechtigung, Datenkompression
usw. Ein eigenständiger, einfacher Subversion Server
ist ebenfalls vorhanden. Dieser spricht ein maßgeschneidertes
Protokoll, dass einfach via SSH getunnelt werden kann.
    </li>
    <li>
<strong>konsistente Datenverarbeitung</strong><br/>
Subversion drückt die Unterschiede von
Dateien unter der Verwendung eines binären
Differenzalgorithmus aus, der sowohl für Text (visuell wahrnehmbar)
als auch für binäre Daten arbeitet.
Beide Arten von Dateien werden in gleicher Form
komprimiert im Repository gespeichert und die Unterschiede
werden in beiden Richtungen über das Netzwerk transportiert.
    </li>
    <li>
<strong>effizientes Branching und Tagging</strong><br/>
Die Kosten für Brachinung und Tagging sind nicht proportional
zur Projektgröße. Subversion erzeugt Branches und Tags
durch das einfache Kopieren eines Projektes unter der Verwendung
eines Mechanismus ähnlich einem Hard-Link. Folglich
benötigt die Operation nur eine kleine konstante Menge von
Zeit.
    </li>
    <li>
<strong>Sicherheit</strong><br/>
Subversion schleppt keine Altlasten aus der Vergangenheit mit.
Es ist als eine Sammlung von Shared C Bibliotheken
impementiert und mit einer wohldefinierten
Schnittstelle (API) versehen. Das macht Subversion extrem
wartbar und in anderen Applikationen und Sprachen verfügbar.
    </li>
   </ul>
  </section>
 </split>

 <split>
  <section>
   <heading>
Die Subversion Architektur
   </heading>

   <textblock>
Folgende Abbildung illustriert das Subversion Design.
   </textblock>

   <image height="400">
    <title>Subversion Architektur</title>
    <filename>ch01dia1.png</filename>
   </image>

   <textblock>
Auf der einen Seite ist Subversion ein Repository
das die Historie aller versionierten Daten vorhält.
Auf der anderen Seite ist Subversion ein Client-Programm,
das die lokale Reflektion eines Teils der versionierten Daten (
working copies genannt) darstellt.
Zwischen diesen beiden Extremen sind vielfältige Wege
durch Repository Zugriffs (RA) Schichten. Einige dieser Wege
gehen durch Netzwerke und durch Netzwerk Server, welche dann
dann auf das Repository zugreifen. Andere umgehen Netzwerk
Server gänzlich und greifen auf das Repository direkt zu.
   </textblock>
  </section>
 </split>

 <split>
  <section>
   <heading>
Subversion Installation
   </heading>

   <textblock>
Subversion baut auf der Portabilitäts-Schicht
APR (Apache Portable Runtime Library) auf. Das bedeutet,
dass Subversion auf jedem Betriebssystem laufen sollte auf
dem der Apache Web Server läuft. Windows, Linux, alle Arten
von BSD, Mac OS X, Netware und andere.
   </textblock>

   <textblock>
Der einfachste Weg, um Subversion zu bekommen ist es,
eine Binärpaket für das jeweilige Betriebssystem herunterzuladen.
Auf der <ref lang="en" url="http://subversion.tigris.org">Subversion Web Seite</ref>
finden sich oft Pakete, die durch Freiwilige erzeugt wurden.
Die Seite enthält üblicherweise grafische Installationspakete
für die Anwender des Microsoft Betriebssystems. Wenn Sie ein
Unix artiges Betriebssystem verwenden, können Sie die zu Ihren System
gehörige Packetverwaltung zur Installation verwenden.
   </textblock>

   <textblock>
Alternativ kann man Subversion auch direkt aus dem Source Code
übersetzen. Nach dem herunterladen der aktuellesten Release
von der Subversion Web Seite und nachfolgendem entpacken, folgen Sie bitte
den Anweisungen in der Datei <path>INSTALL</path>, um
Subversion zu compileren. Beachten Sie bitte, dass ein veröffentliches
Souce Code Pakete alles beinhaltet, um einen Kommandozeilenclient,
der in der Lage ist sich mit einem Repository zu unterhalten
(speziell APR, APR-Util und die Neon Bibliotheken) entsprechend zu
übersetzen. Aber andere optionale Teile von Subversion können noch
andere Abhängigkeiten besitzen, wie z. B. BerkelyDB und möglichweise
Apache. Wenn Sie eine vollständige Übersetzung durchführen möchten,
so versichern Sie sich, dass Sie alle benötigten Pakete, die in der Datei
<path>INSTALL</path> angegeben sind auch haben.
Wenn Sie die Absicht haben an Subversion selbst zu arbeiten, können
Sie ein eigenes Clientprogramm dazu verwenden, um eine aktuelle Version
zu erhalten.
   </textblock>
  </section>
 </split>

 <split>
  <section>
   <heading>
Die Subversion Komponenten
   </heading>

   <textblock>
Einmal installiert, besteht Subversion aus
einer Menge von unterschiedlichen Teilen. Der
nachfolgende Teile ist ein kurzer überblick über
das was dann zur Verfügung steht. Seien Sie nicht
beunruhigt, wenn Sie diese kurze Einführung
Kopf kratzend zurück läßt. Es folgenden noch eine
Menge weitere Seiten in diesem Buch,
die dazu gedacht sind diese Irritationen zu lindern.
   </textblock>

   <ul>
    <li>
<command>svn</command><br/>
Kommandozeilen-Client
    </li>
    <li>
<command>svnversion</command><br/>
Ein Programm, um den Status einer Arbeitskopie anzuzeigen.
    </li>
    <li>
<command>svnlook</command><br/>
Ein Werkzeug, um das Subversion Repository zu betrachten.
    </li>
    <li>
<command>svnadmin</command><br/>
Das Werkzeug, um ein Subversion Repository zu erzeugen,
zu optimieren oder es zu reparieren.
    </li>
    <li>
<command>svndumpfilter</command><br/>
Ein Programm zur Filterung einer Subversion Repository Dump
Datei.
    </li>
    <li>
<command>mod_dav_svn</command><br/>
Ein Plugin-Modul für den Apache HTTP Server,
welches den Zugriff für andere auf das Repository ermöglicht.
    </li>
    <li>
<command>svnserve</command><br/>
Ein maßgeschneidertes Programm als eigenständiges Serverprogramm,
welcher als Daemonprozess Verwendung findet, der auch
über SSH aufgerufen werden kann. Das ist ein anderer Weg,
um ein Repository per Netzwerk verfügbar zu machen.
    </li>
   </ul>

   <textblock>
Unter der Annahme, dass Subversion einwandfrei installiert wurde,
sind wir jetzt fertig und können loslegen.
Die nächsten beiden Kapitel werden die Verwendung von <command>svn</command>
des Subversion Kommandozeilen Clients zeigen.
   </textblock>
  </section>
 </split>
</chapter>
