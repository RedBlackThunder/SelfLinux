<?xml version="1.0" encoding="iso-8859-1"?>

<chapter
 xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
 xsi:noNamespaceSchemaLocation="/home/hannes/trunk/stylesheets/xsd/selflinux.xsd">
	
 <title>Einführung</title>
 
 <author>
  <name>Ben Collins-Sussman</name>
  <mailto></mailto>
 </author>
 
 <author>
  <name>Brian W. Fitzpatrick</name>
  <mailto></mailto>
 </author>
 
 <author>
  <name>C. Michael Pilato</name>
  <mailto></mailto>
 </author>
 
 <layout>
  <name>Matthias Hagedorn</name>
  <mailto>matthias.hagedorn@selflinux.org</mailto>
 </layout>
 
 <license>GFDL</license>
 
 <index>einfuehrung</index>

 <description>
  <textblock>
Versionkontrolle ist die Kunst Änderungen zu Verwalten.
Es war lange Zeit ein kritisches Werkzeug für Programmierer
die üblicherweise ihre Zeit damit verbrachten kleine Änderungen
an Software vorzunehmen und diese am nächsten Tag wieder rückgängig
zu machen.<br/>
Aber die Nützlichkeit von Versionkontrollsoftware liegt weit
außerhalb der Grenzen der Softwareentwicklungswelt.
Überall wo Menschen Computer Verwenden, um Daten zu Verwalten
ändern sich diese häufig/ständig. Und das ist der Punkt wo
Subversion ins Spiel kommt.
  </textblock>
  
  <textblock>
Das Kapitel enthält eine Einführung in Subversion auf hoher Ebene.
Was es ist? Was es tut? Wie man es bekommt?
   </textblock>
 </description>



<!-- ================================================================= -->
<!-- ======================== SECTION 1 ============================== -->
<!-- ================================================================= -->
 <split>
  <section>
   <heading>Was ist Subversion?</heading>

   <textblock>
Subversion ist ein freies/Open-Soucrce Versionskontroll
System. Subversion verwaltet Dateien und Verzeichnisse
über die Zeit hinweg. Ein Baum der Dateien wird in ein Zentrales
repository abgelegt. Das Repository
ist wie ein gewöhlicher File Server, aussser das der sich
an jede jemals gemachte Änderung erinnert. Das erlaubt
es Ihnen jede ältere Version Ihrer Daten wieder her zustellen,
oder die Geschichte der Änderungen zu untersuchen.
In dieser Hinsicht, stellen sich viele Leute ein 
Versionskontrollsystem als eine Art von 
Zeitmaschine vor.
   </textblock>

   <textblock>
Subversions erlaubt den Zugriff auf sein Repository durch
ein Netzwerk, womit der Zugriff durch Leute von unterschiedlichen
Rechnern aus ermöglicht wird.
...At some Level die Möglichkeit verschiedener Leute Datensätze
an unterschiedlichen Orten zu Verwalten und zu modifizieren
fördert die Zusammenarbeit. Fortschritt kann früher eintreten
als ohne eine Kanaliserung durch die alle Änderung laufen müssen.
Und Aufgrund der Tatsache, dass die Arbeit Versioniert wird brauchen
Sie nicht zu befürchten, dass die Qualität der Ausgleich für den
Verlust der Kanalisierung ist wenn eine Fehlerhafte Änderung 
an den Daten durchgeführt wurde. Es kann einfach rückgängig gemacht
werden.
   </textblock>

   <textblock>
Einige Versionskontrollsysteme sind auch Software Konfigurations
Management Systeme (SKM). Diese Systeme sind speziell darauf
zugeschnitten, Quellcodebäume zu verwalten. Sie haben sehr
viele Funktionalitäten, die auf die Software Entwicklung 
ausgerichtet sind. z.B. die Angebore Fähigkeit Programmiersprachen
zu verstehen oder liefern Spezielle Werkzeuge zum Erzeugen
(build) von Software. Subversion, aber ist keines von diesen Systemen.
Es ist ein allgemeines System welches zur Verwaltung 
jeder Art von Dateien verwendet werden kann.
Für Sie können die Dateien Quellcode sein, während es für andere
eine Einkaufsliste im Supermarkt ist bis zur Video Liste und
darüber hinaus.
   </textblock>
  </section>
 </split>

<!-- ================================================================= -->
<!-- ======================== SECTION 2 ============================== -->
<!-- ================================================================= -->
 <split>
  <section>
   <heading>Die Geschichte von Subversion</heading>

   <textblock>
Anfang 2000, CollabNet, Inc. (http://www.collab.net)
suchte Entwickler to eine Ersatz für CVS erstellen sollten.
CollabNet bot eine Collaboration Software Suite genannt
SourceCast an, von deren eine Komponente Versionskontrolle ist.
Obwohl SourceCast CVS als initiale Versionskontrolle verwendete,
die Grenzen von CVS waren von Anfang an offensichtlich, wusste
CollabNet dass es etwas besseres finden mußte.
Bedauerlicherweise war CVS ein de facto
Standard in der Welt der Open Source weil es nichts besseres gab,
wenigstens nicht unter einer freien Lizenz.
Somit entschied sich CollabNet ein neues Versionskontrollsystem
von Grund auf neu zu entwickeln, aber unter zurückhaltender
Übernahme der Grundideen von CVS, aber ohne deren Fehler und
Misständen.
   </textblock>

   <textblock>
Im Frebruar 2000, nahmen Sie kontakt zu Karl Fogel, dem Autor
von Open Source Development with CVS
(Coriolis, 1999) und fragten Ihn ob er an diesem neuen 
Projekt arbeiten wollte. Zu dieser Zeit war Karl Fogel
zufälligerweise in Kontakt mit seinem Freund Jim Blandy und 
diskutierte ein neues Design eines neuen Versionskontrollsystems.
1995 hatten die beiden Cyclic Software gegründet welches Support 
Verträge für CVS bot, welche Sie später verkauften, wärend die
Verwendung von CVS in der täglichen Arbeit weiter geführt wurde.
Ihre Frustration mit CVS liess Jim über bessere Wege
der Versionsverwaltung nachdenken, wobei er nicht nur 
dem Namen Subversion lieferte, sondern auch mit 
dem Grundlegenden Design des Subversion Repositories.
Als CollabNet bei Karl Anfragte, stimmte Karl sofort zu im Projekt
mit zu arbeiten, womit Jim seinen Arbeitgeber, RedHat Software,
welcher die hauptsächliche Unterstützung über einen
umbestimmten Zeitraum für das Projekt darstellte, gefunden.
   </textblock>

   <textblock>
CollabNet liehen sich Karl und Ben Collins-Sussman aus und die 
Arbeiten am Detail Design begannen im Mai.
Mit einigen wohl platzierten anstößen von Brian Behlendorf und
Jason Robbins von CollabNet und Greg Stein (zu der Zeit ein unabhängiger
Entwickler aktiv im WebDAV/DeltaV Spezifikationsprozeß), 
zog Subversion schnell eine Gemeinschaft von aktiven Entwicklern
an. Es zeigte sich, dass viele Leute die gleichen frustrierenden 
Erfahrungen mit CVS hatten, und begrüßten die Chance etwas
zu ändern.
   </textblock>

   <textblock>
Das ursprüngliche Design Team setzte auf einige einfache 
Ziele. Sie wollten keine neuen Grundlagen im Bereich der
Versionskontrolle finden, sie wollten einfach die Probleme
bei CVS ablösen. Sie entschieden sich dafür, dass Subversion
die CVS Features abdeckte und das gleiche Entwicklungs Modell
bei behielt aber nicht die meist offensichtlichen Risse? übernahm.
   </textblock>

   <textblock>
Obgleich es war nicht nötig ein drop-in? Ersatz für CVS zu sein,
es an CVS angelehn sein, damit CVS Anwender den Übergang mit
geringem Aufwand durchführen konnten.
   </textblock>

   <textblock>
Nach vierziehn Monanten Entwicklung, konnte Subversion
sich am 31. August 2001 selbst Verwalten.
Damit stoppten die Subversion Entwickler die 
Verwendung von CVS und verwendeteten Subversion
ab diesem Zeitpunkt selbst zur Verwaltung.
   </textblock>

   <textblock>
Während CollabNet das Projekt initiierte, und finanziert
einen großen Teile der Arbeit (bezahlt die Gehälter von einigen
Voll-Zeit Subversion Entwicklern), Subversion schreitet
voran wie die meisten Open-Source Projekte, beherrscht durch
lockere, transparenten Satz von Regeln der die Leitstungsbereitschaft
bestärkt. CollabNet Urheberlizenz ist konform der Debian Freien Software
Richtlinien. Mit anderen Worten, jedem steht es frei, Subversion
runter zu laden, zu modifizieren und es weiter zu verbreiten
wie es einem gefällt ohne Erlaubnis von CollabNet oder
irgend jemand anderem ist Notwendig.
   </textblock>
  </section>
 </split>


<!-- ================================================================= -->
<!-- ======================== SECTION 3 ============================== -->
<!-- ================================================================= -->
 <split>
  <section>
   <heading>Die Subversion Funktionen</heading>

   <textblock>
Wenn die Diskussion über die Funktionen von Subversion
auf den Tisch kommt, ist es meist hilfreich über 
die Begriffe zu Nennen, die Sie über das CVS Design stellen???? Satz?
Wenn Sie nicht mit CVS vertraut sind, verstehen Sie eventuell
nicht alle dieser Funktionen.
Wenn Sie auch nicht mit Versionskontrolle vertraut sind, 
erstarren Ihre Augen so lange Sie nicht 
lesen, wo eine behutsame Einführung in das Themengebiet 
Versionskontrolle vorgenommen wird.
   </textblock>

   <textblock>
Subversion provides:
   </textblock>


   <textblock>
Verzeichnisversionierung
   </textblock>

   <hint>
CVS zeichnet lediglich die Geschichte von einzelnenen
Dateien auf, während Subversion ein virtuelles
versioniertes Dateisystem implementiert, das die Änderung
an ganzen Verzeichnissbäumen über die Zeit aufzeichnet. 
Dateien und Verzeichnisse werden versioniert.
   </hint>

   <textblock>
Wahre Geschichte
   </textblock>

   <hint>
Während CVS auf die Versionierung von Dateien
beschränkt ist und operationen wie kopieren und umbenennen
was manchmal mit Dateien passiert, können die Dinge die
sich tatsächlich ändern, nämlich die Verzeichnisse
nicht durch CVS versioniert werden.
   </hint>

   <hint>
Zusätzlich können Sie in CVS keine versionierte Datei 
durch eine Datei gleichen Namens aber anderen Inhaltes
ersezten ohne die aufgezeichnete Geschichte der 
alten Datei zu erben, die aber ohne Bezug zur ihrem aktuellen
Inhalt ist.<br/>
Mit Subversion können Sie sowohl Dateien als auch 
Verzeichnisse hinzufügen, löschen, kopieren, umbenennen sowohl
der Dateien als auch der Verzeichnisse und jede neu
hinzugefügte Datei begint mit einer frischen und leeren
Geschichte seiner selbst.
   </hint>

   <textblock>
Atomaree Commits... Atomic commits
   </textblock>

   <hint>
Ein Sammlung von Ändungern geht entweder vollständig
in das Repository oder aber keine. Das erlaubt Entwicklern
die Konstruktion und das Commiten von logischen Einheiten
als ganzes und verhindert Probleme, die auftreten können 
wenn nur Teile eines Änderungssatzes erfolgreich
in das Repository gesichert wurden.
   </hint>

   <textblock>
Versionierte Metadaten    Versioned metadata
   </textblock>

   <hint>
Jede Datei und Verzeichnis an einen Satz von Eigenschaften;
Schlüssel zu denen Werte assoziiert sind.
Sie können beliebig Schlüssel/Werte Kombinationen
erzeugen und speichern. Eigenschaften werden über die
Zeit versioniert wie das mit dem Inhalt von Dateien
ebenfalls gemacht wird.
   </hint>

   <textblock>
Choice of network layers
   </textblock>

   <hint>
Subversion hat eine Abstrakte Vorstellung über den Zugriff
auf das Repository um es einfach zu ermöglichen
neue Netzwerk Mechanismen zu implementieren.
Subversion kann als Apache Module in den HTTP Server
angeschlossen werden als ein Erweiterungsmodul.
Das gibt Subversion einen großen Vorteil bzgl. Stabilität
und Kompatibilität und direktem Zugriff auf vorhandene
Eigenschaften die durch den Server zur Verfügung gestellt 
werden. Authentifizierung,  Berechtigung, Datenkompression
usw. Eine eigenständiger einfacher Subversion Server
ist ebenfalls vorhanden. Dieser spricht ein maßgeschneidertes
Protokoll, dass einfach via SSH getunnelt werden kann.
   </hint>
   

   <textblock>
Konsistente Datenverarbeitung
   </textblock>

   <hint>
Subversion drückt die Unterschiede von 
Dateien unter der Verwendung eines binären
Differenzalgorithmus aus, der sowohl für Text (visuell wahrnehmbar)
als auch für binäre Daten arbeitet.
Beide arten von Dateien werden in gleicher Form
komprimiert im Repository gespeichert und die Unterschiede
werden in beiden Richtungen über das Netzwerk transportiert.
   </hint>
   
   <textblock>
Effizientes Branching und Tagging
   </textblock>

   <textblock>
Die Kosten für Brachinung und Tagging sind nicht proportional
zur Projektgröße. Subversion erzeugt Branches und Tags 
durch das einfache kopieren eines Projektes unter der Verwendung
eines Mechanismus ähnlich zu einem Hard-Link. Folglich 
benötigt die Operation nur eine kleine konstante Menge von
Zeit. 
   </textblock>

   <textblock>
Attakierbarkeit ??     Hackability
   </textblock>
   
   <hint>
Subversion schleppt keine Altlasten aus der Vergangenheit mit.
Es ist als eine Sammlung von Shared C Bibliotheken
impementiert und mit einer wohldefinierten 
Schnittstelle (API) versehen. Das macht Subversion extrem 
wartbar und Einsetzbar in anderen Applikationen
und Sprachen.
   </hint>
  </section>
 </split>


<!-- ================================================================= -->
<!-- ======================== SECTION 4 ============================== -->
<!-- ================================================================= -->

 <split>
  <section>
   <heading>Die Subversion Architektur</heading>

   <textblock>
Abbildung 1.1 illustriert was man als einen Blick
aus großer Höhe auf das Subversion Design bezeichnen würde.
   </textblock>

   <!--
Subversion Architektur
<graphic fileref="images/ch01dia1.png"/>
-->
   
   <textblock>
Auf der einen Seite ist Subversion ein Repository 
dass die Historie aller Ihrer Versionierten Daten vorhält.
Auf der anderen Seite ist Subversion ein Client Programm,
dass die Lokale Reflektion eines Teils der versionierten Daten (
working copies genannt) darstellt.
Zwischen diesen Beiden extremen sind vielfältige Wege
durch Repository Zugriffs (RA) Schichten. Einige dieser Wege
gehen durch Netzwerke und durch Netzwerk Server welche dann
dann auf das Repository zugreifen. Andere Umgehen Netzwerk 
Server gänzlich und greifen auch das Repository direkt zu.
   </textblock>
  </section>
 </split>


<!-- ================================================================= -->
<!-- ======================== SECTION 5 ============================== -->
<!-- ================================================================= -->
 <split>
  <section>
   <heading>Subversion Installation </heading>

   <textblock>
Subversion ist auf einer Portabilitäts Schicht 
APR (Apache Portable Runtime Library). Das bedeutet,
dass Subversion auf jedem Betriebssystem laufen sollte auf
dem der Apache Web Server läuft. Windows, Linux, alle Arten
von BSD, Mac OS X, Netware und andere.
   </textblock>

   <textblock>
Der einfachste Weg, um Subversion zu bekommen ist es, 
eine binär Paket für das jeweilige Betriebssystem down zu loaden.
Auf der Subversion Web Seite (http://subversion.tigris.org)
finden sich oft Pakete die durch freiwilige erzeugt wurden.
Die Seite enthält üblicherweise grafische Installations Pakete
für die Anwender des Microsoft Betriebssystems. Wenn Sie ein
Unix artiges Betriebssystem verwenden, können Sie 
   </textblock>

   <textblock>
Alternativ kann man Subversion auch direkt aus dem Source Code
übersetzen. Nach dem herunterladen der aktuellesten Release 
von der Subversion Web Seite und nachfolgendem entpacken folgen Sie bitte
den Anweisungen in der Datei INSTALL, um
Subversion zu compileren. Beachten Sie bitte, dass ein veröffentliches
Souce Code Pakete alles beinhaltet, um eine Kommandozeilen Client,
der in der Lage ist sich mit einem Remote Repository zu unterhalten
(speziell APR, APR-Util und die Neon Bibliotheken) entsprechend zu 
übersetzen. Aber andere optionale Teile von Subversion können noch
andere Abhängigkeiten besitzen, wie z.B. Berkely DB und möglichweise
Apache httpd. Wenn Sie eine vollständige Übersetzung durchführen möchten,
so versichern Sie sich, dass Sie alle benötigten Pakete, die in der Datei
INSTALL angegeben sind auch haben.
Wenn Sie die Absicht haben an Subversion selbst zu arbeiten, können
Sie eigenes Client Programm dazu verwenden, um eine Aktuelle Version
(bleeding edge?) zu erhalten. Das wird in LINK
beschrieben.
   </textblock>
  </section>
 </split>


<!-- ================================================================= -->
<!-- ======================== SECTION 6 ============================== -->
<!-- ================================================================= -->
 <split>
  <section>
   <heading>Die Subversion Komponenten</heading>

   <textblock>
Einmal installiert, besteht Subversion aus
einer Menge von unterschiedlichen Teilen. Der
nachfolgende Teile ist ein kurzer überblick über
das was dann zur Verfügung steht. Seien Sie nicht
beunruhigt, wenn Sie diese kurze Einführung
Kopf kratzend zurück läßt. Es folgenden noch eine
Menge weitere Seiten in diesem Buch,
die dazu gedacht sind diese Irritationen zu lindern.
   </textblock>

   <textblock>
svn
   </textblock>

   <hint>
Kommandozeilen Client
   </hint>

   <textblock>
svnversion
   </textblock>

   <hint>
Ein Programm, um den Zustand
   </hint>

   <textblock>
svnlook
   </textblock>

   <hint>
Ein Werkzeug, um das Subversion Repository zu 
betrachten.
   </hint>

   <textblock>
svnadmin
   </textblock>

   <hint>
Das Werkzeug um ein Subversion Repository zu erzeugen, 
tweaking? oder es zu reparieren.
   </hint>

   <textblock>
svndumpfilter
   </textblock>

   <hint>
Ein Programm zur Filterung einer Subversion Repository Dump
Datei.
   </hint>

   <textblock>
mod_dav_svn
   </textblock>

   <hint>
Ein Plug-In Modul für den Apache HTTP Server,
welches es den Zugriff für andere auf das Repository ermöglicht.
   </hint>

   <textblock>
svnserve
   </textblock>
   
   <hint>
Ein maßgeschneidertes Programm als Standalone Server Programm,
welcher als Deamon Prozeß Verwendung findet, der auch
über SSH aufgerufen werden kann. Das ist ein anderer Weg,
um ein Repository per Netzwerk verfügbar zu machen.
   </hint>
   
   <hint>
Unter der Annahme, dass Subversion einwandfrei installiert wurde,
sind wir jetzt fertig un können loslegen.
Die nächsten beiden Kapitel werden die Verwendung von svn
der Subversion Kommandozeilen Client zeigen.
   </hint>
  </section>
 </split>
</chapter>
