<?xml version="1.0" encoding="iso-8859-1"?>

<chapter>
 <title>Diskettenzugriff unter Linux</title>
 <author>
  <name>Florian Fredegar Haftmann</name>
  <mailto>florian.haftmann@stud.tum.de</mailto>
 </author>
 <layout>
  <name>Matthias Hagedorn</name>
  <mailto>matthias.hagedorn@selflinux.org</mailto>
 </layout>
 <license>
GFDL
 </license>
 <index>zugriff_auf_disketten</index>

 <split>
  <section>
<!-- * Kapitel -->
   <heading>
Ausgangslage
   </heading>
   
   <textblock>
Als PC-Benutzer möchte man hin und wieder Daten mit anderen PCs
austauschen. Falls diese Rechner nicht vernetzt sind, ist das Standardmedium
in vielen Fällen immer noch die gute alte 3,5-Zoll-Diskette - auch unter Linux.
Dieses Kapitel erklärt, wie Disketten, die unter DOS oder Windows
formatiert wurden, unter Linux gelesen und beschrieben werden
können. Es ergänzt damit das umfassendere Kapitel
<ref chapter="zugriff_auf_laufwerke">Zugriff auf Laufwerke</ref>.
Wenn Sie die grundlegenden Vorgehensweisen zum Einbinden von
Laufwerken unter Linux noch nicht kennen, sollten Sie zuerst
das Kapitel <ref chapter="zugriff_auf_laufwerke">Zugriff auf Laufwerke</ref>
lesen, bevor Sie wieder hierher zurückkehren. Dort werden die
wichtigsten Mechanismen, die beim Einbinden von Laufwerken
generell zu beachten sind, detaillierter beschrieben.
   </textblock>
  </section>

  <section>
<!-- * Kapitel -->
   <heading>
Disketten in den Dateibaum einhängen
   </heading>
   
   <textblock>
Moderne Linux-Systeme unterstützen das
FAT-Dateisystem, das auf DOS- und Windows-Disketten zum Einsatz
kommt. Es ist also einfach möglich, eine Diskette in den Linux-Dateibaum 
<ref chapter="zugriff_auf_laufwerke" iref="Kurze Zusammenfassung der wichtigsten Begriffe">einzuhängen</ref>, indem man z. B.
   </textblock>

   <shell>
    <user path="~">
mount /floppy
    </user>
   </shell>

   <textblock>
eingibt. Bemerkung: <path>/floppy</path> ist ein möglicher Mountpunkt, er kann aber auch
anders heißen. Die Gerätedatei, die dem Diskettenlaufwerk
entspricht, ist <path>/dev/fd0</path>. Im Zweifelsfall können Sie die Dateisystemtabelle mit
dem Befehl
   </textblock>

   <shell>
    <user path="~">
grep /dev/fd0 /etc/fstab
    </user>
    <output>
/dev/fd0             /floppy        auto       noauto,user,sync 0 0
    </output>
   </shell>

   <textblock>
absuchen. Wie in der obigen Ausgabe zu sehen, erhalten Sie dann in der
zweiten Spalte den auf Ihrem System verwendeten Mountpunkt.
   </textblock>

   <textblock>
Nach dem Einhängen kann man mit den gängigen Kommandos auf die Diskette
zugreifen, wie die folgende Beispiel-Sitzung zeigt:
   </textblock>

   <shell>
    <user path="~">
ls /floppy
    </user>
    <output>
mein.doc  readme.txt
    </output>
    <user path="~">
mv /floppy/* ~/eingang/
    </user>
    <user path="~">
cp ~/ausgang/* /floppy/
    </user>
    <user path="~">
cd /floppy
    </user>
    <user path="~">
ls
    </user>
    <output>
wichtig.doc
    </output>
   </shell>

   <textblock>
Wichtiger Hinweis:
Auf keinen Fall sollten Sie vor dem Auswerfen der Diskette 
das Aushängen aus dem Dateibaum vergessen!
Dies erledigt das Kommando umount:
   </textblock>

   <shell>
    <user path="~">
umount /floppy
    </user>
   </shell>
   
   <textblock>
umount führt automatisch einen Synchronisationsbefehl zur
Sicherung von im Speichercache gehaltenen Daten aus.
Deshalb sollten Sie vor dem Entnehmen der Diskette unbedingt das Erlöschen der
Laufwerks-LED abwarten.
   </textblock>
  </section>
 </split>

 <split>
  <section>
<!-- * Kapitel -->
   <heading>
Die m-Tools
   </heading>

   <textblock>
Neben dieser ersten Möglichkeit zum Umgang mit Disketten,
stellen die sogenannten <strong>m-Tools</strong> noch
eine weitere bereit. Die <strong>m-Tools</strong> wurden zu einer Zeit entwickelt, als
die <ref chapter="was_ist_unix">Unix-Systeme</ref>
das FAT-Dateisystem noch nicht unterstützten, die PCs
aber schon so weit verbreitet waren, dass es sinnvoll erschien,
PC-Disketten lesen und schreiben zu können.
   </textblock>

   <textblock>
Wie gesagt, kann Linux heutzutage PC-Disketten wie normale
Dateisysteme behandeln. Für den Fall, dass
   </textblock>

   <ul>
    <li>
man es irgendwo mit einem alten Unix zu tun hat, das FAT als Dateisystem nicht
beherrscht
    </li>
    <li>
oder man sich oft darüber geärgert hat,  die Diskette
entnommen zu haben, ohne vorher das Dateisystem per umount-Befehl
ausgehängt zu haben
    </li>
   </ul>

   <textblock>
stehen die <strong>m-Tools</strong> auch heute noch bereit.
   </textblock>

   <textblock>
Die wichtigsten Befehle lauten
   </textblock>

   <ul>
    <li>
<command>mdir</command> &lt;DOS-Pfad&gt; ...
    </li>
    <li>
<command>mcopy</command> &lt;DOS-Pfad&gt; ... &lt;Unix-Pfad&gt;
    </li>
    <li>
<command>mdel</command> &lt;DOS-Pfad&gt; ...
    </li>
   </ul>

   <textblock>
Wie man an den Namen erkennen kann, ahmen diese Befehle ihre
Vorbilder aus der DOS-Shell nach.
   </textblock>

   <textblock>
So kann man z. B. mit
   </textblock>

   <shell>
    <user path="~">
mdir a:/
    </user>
   </shell>

   <textblock>
das Verzeichnis der Diskette anzeigen.
   </textblock>

   <textblock>
Der Befehl
   </textblock>

   <shell>
    <user path="~">
mcopy "a:/*.doc" "a:/*.dok" ~/eingang/
    </user>
   </shell>

   <textblock>
kopiert alle Dateien aus dem Wurzelverzeichnis der Diskette
mit Endungen <strong>.doc</strong> und <strong>.dok</strong> in das Verzeichnis <path>eingang</path>
unterhalb des Heimatverzeichnisses des aktuellen Benutzers.
(Das Tilde-Zeichen <strong>~</strong> ist unter Unix die Kurzform für den absoluten Pfad zum
Heimatverzeichnis eines Benuters.)
   </textblock>

   <textblock>
Man beachte, dass alle <ref chapter="shellprogrammierung" iref="Mustererkennung">Muster</ref>
welche die Zeichen <strong>*</strong> oder <strong>?</strong> enthalten,
in der Shell in Anführungszeichen zu setzen sind, da sonst die Shell
versucht, eine <ref chapter="bash_basic" iref="Dateinamenexpansion">Namensexpansion</ref>
vorzunehmen. Diese kann nur fehlschlagen, da die
Shell keine DOS-Pfade kennt.
Das gilt auch für die anderen
Sonderzeichen der Shell wie <strong>$</strong>, <strong>;</strong> oder <strong>{</strong>, deren Verwendung in
Dateinamen, gleich auf welchem Betriebssystem, ohnehin nicht
empfehlenswert ist. Wem das zu kryptisch ist, der setze die Pfade
grundsätzlich immer in Anführungszeichen. Nähere Hintergründe gibt es
im Kapitel über die <ref chapter="bash_basic">Shell</ref>.
   </textblock>

   <textblock>
Im Unterschied zum DOS-Betriebssystem, wo der Befehl
   </textblock>
   
   <shell>
    <user path="~">
dir *.*
    </user>
   </shell>
   
   <textblock>
alle Dateien anzeigt, steht in einer Unix-Shell
das Muster <strong>*</strong> für alle Dateien (außer den versteckten Dateien,
deren Dateiname mit einem Punkt beginnt).
Der Ausdruck <strong>*.*</strong> dagegen steht unter Unix nur für Dateien, 
die tatsächlich einen Punkt im Dateinamen enthalten.
Der Befehl:
   </textblock>
   
   <shell>
    <user path="~">
mdel "a:/alt/*.*"
    </user>
   </shell>

   <textblock>
löscht nur Dateien mit Dateiendung und Punkt im Namen 
aus dem Verzeichnis <path>a:\alt</path>.
Dateien ohne Punkt im Namen wie <strong>ehemals_wichtig</strong> bleiben erhalten.
   </textblock>

   <textblock>
Um mit den <strong>m-Tools</strong> auf eine Diskette zugreifen zu können,
kann und darf sie nicht gemountet sein!
   </textblock>

   <textblock>
Die Manpage zu den <strong>m-Tools</strong> gibt weitere Informationen. Sie können
sie mit dem folgenden Kommando aufrufen:
   </textblock>

   <shell>
    <user path="~">
man mtools
    </user>
   </shell>

  </section>
 </split>
</chapter>
