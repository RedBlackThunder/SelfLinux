<?xml version="1.0" encoding="iso-8859-1"?>

<chapter>
 <title>Samhain</title>

 <author>
  <name>Rainer Wichman</name>
  <mailto>rwichmann@hs.uni-hamburg.de</mailto>
 </author>
 
 <layout>
  <name>Florian Frank</name>
  <mailto>florian.frank@pingos.org</mailto>
 </layout>

 <layout>
  <name>Alexander Fischer</name>
  <mailto>alexander.fischer@selflinux.org</mailto>
 </layout>

 <license>GFDL</license>

 <index>samhain</index>

 <description>
  <textblock>
Samhain ist ein Werkzeug zur Überprüfung der Integrität eines Rechners
bzw. des Betriebssystems des Rechners und/oder der darauf gespeicherten
Daten.
  </textblock>
 </description>

 <split>
  <section>
   <heading>
Einleitung
   </heading>

   <textblock>
Ist ein Computer an das Internet angeschlossen, so besteht zwangsläufig
die Gefahr, dass Fremde versuchen, über bekannte Schwachstellen in den Rechner
einzubrechen, um ihn für eigene, meist illegale Zwecke zu missbrauchen. In der
Regel wird ein solcher Einbrecher versuchen, ein so genanntes Rootkit zu
installieren, um die dauerhafte Kontrolle der Computers zu sichern und seine
Anwesenheit zu verbergen. Andererseits sind die Veränderungen, die ein
Einbrecher verursacht, eine hervorragende Möglichkeit, ihn schnellstmöglichst
zu entdecken.
   </textblock>

   <textblock>
<command>Samhain</command> ist ein Werkzeug zur Überprüfung der Integrität eines
Rechners bzw. des Betriebssystems des Rechners und/oder der darauf gespeicherten
Daten. Die Grundfunktion von Samhain besteht darin, eine Datenbank mit
Prüfsummen und anderen Eigenschaften aller zu überwachenden Dateien zu
erstellen, um anschließend regelmäßig zu überprüfen, ob eine dieser Dateien
manipuliert wurde.
   </textblock>

   <textblock>
Zusätzlich besteht die Möglichkeit, die Integrität des Kernels zu überwachen,
d. h. zu testen, ob der Kernel zur Laufzeit manipuliert wurde,
Login/Logout-Vorgänge zu melden, und/oder das gesamte Dateisystem regelmäßig
nach SUID-Programmen zu durchsuchen.
   </textblock>

    <section>
     <heading>
Unterschied zu anderen Einbruchserkennungssystemen (IDS)
     </heading>

     <textblock>
Bei Systemen zur Entdeckung von Einbrechern oder Einbruchsversuchen
(<ref chapter="ids">Intrusion Detection Systems</ref>) unterscheidet man generell
Netzwerk-basierte <name>IDS</name> (<name>NIDS</name>), die an einer
zentralen Stelle den Netzwerkverkehr überwachen, und Host-basierte
<ref chapter="ids">IDS</ref>, die den lokalen Computer überwachen.
     </textblock>

     <textblock>
Der Vorteil eines <name>NIDS</name> besteht offensichtlich darin, dass man nur
ein Überwachungssystem an einer zentralen Stelle installieren muss. Andererseits
kann ein solches System nur Angriffsversuche erkennen, deren Muster bereits
bekannt sind; und nach der Entdeckung eines Angriffsversuchesist nicht unbedingt
klar, ob er nun erfolgreich war oder nicht. Ein praktisches Problem besteht auch
darin, Fehlalarme zu reduzieren, ohne dabei echte Angriffsversuche zu übersehen.
     </textblock>

     <textblock>
Eine Host-basierte Anwendung zur Verifikation der Systemintegrität wie
<command>Samhain</command> ist natürlich aufwendiger zu installieren, wenn man
mehrere Computer überwachen möchte. Andererseits kann ein solches System auch
Angriffe mit neuartigen, bisher unbekannten Methoden erkennen. Die Problematik
von Fehlalarmen ist deutlich reduziert, da das System nur Alarm schlägt, wenn
tatsächlich Veränderungen an einem Computer stattgefunden haben.
     </textblock>
     
     <textblock>
Besonders in großen Firmennetzen besteht ein großes Problem auch in Angriffen
von innerhalb; z. B. von mitgebrachten Laptops aus, oder mit Hilfe von
Passworten, die sich ein Angreifer z. B. durch geschickt geführte
Telefongespräche verschafft hat. Auch bei solchen Angriffen kann ein
Host-basiertes System wie z. B. <command>Samhain</command> eine Manipulation des
Systems erkennen.
     </textblock>
    </section>
  </section>
 </split>

 <split>
  <section>
   <heading>
Installation, Konfiguration und Initialisierung 
   </heading>
   
   <textblock>
Samhain wird als Quellcode unter der GNU Public License frei angeboten, und die
jeweils aktuellste Version ist erhältlich unter der URL
<ref lang="de" url="http://www.la-samhna.de/samhain/samhain-current.tar.gz">http://www.la-samhna.de/samhain/samhain-current.tar.gz</ref>
   </textblock>
   
   <textblock>
Zum Übersetzen der Quellen ist ein <name>ANSI C Compiler</name> wie z. B.
<name>GNU gcc</name> erforderlich. Einige optionale Funktionen erfordern
weitere Software (siehe Abschnitte
<ref iref="Unterstützte Log-Möglichkeiten">Unterstützte Log-Möglichkeiten</ref>
und
<ref iref="Weitere Eigenschaften von Samhain">Weitere Eigenschaften von Samhain</ref>). 
Insbesondere setzt die Verwendung von signierten Konfigurations- und
Datenbank-Dateien die Installation von <name>GnuPG</name>
(<ref chapter="gpg_handbuch_vorwort">GNU Privacy Guard</ref>) voraus (siehe
Abschnitt
<ref iref="Signierte Datenbank- und Konfigurationsdateien">Signierte Datenbank- und Konfigurationsdateien</ref>).
   </textblock>

    <section>
     <heading>
Installation 
     </heading>
     
     <textblock>
Nach dem Herunterladen kann man das tar-Paket auspacken, worauf man zwei Dateien
erhält: zum einen ein weiteres tar-Paket mit dem eigentlichen Quellcode, und zum
anderen dessen PGP-Signatur.
     </textblock>
     
     <shell>
      <user path="~">
tar xzvf samhain-current.tar.gz
      </user>
      <output>
samhain-X.Y.Z.tar.gz
samhain-X.Y.Z.tar.gz.asc
      </output>
     </shell>

     <textblock>
Nun kann man (optional) die Signatur überprüfen - alle Versionen von
Samhain sind mit dem Schlüssel <name>0x0F571F6C (Rainer Wichmann)</name>
signiert:
     </textblock>
     
     <shell>
      <user path="~">
gpg --verify samhain-X.Y.Z.tar.gz.asc samhain-X.Y.Z.tar.gz
      </user>
      <output>
       <![CDATA[
gpg: WARNING: using insecure memory!
gpg: please see http://www.gnupg.org/faq.html for more information
gpg: Signature made Mon Nov  8 07:38:21 2004 CET using DSA key ID 0F571F6C
gpg: Good signature from "Rainer Wichmann <rwichmann@la-samhna.de>"
gpg:                 aka "Rainer Wichmann <rwichmann@hs.uni-hamburg.de>"
	]]>
      </output>
     </shell>

     <textblock>
Die Übersetzung der Quellen erfolgt dann nach dem <name>Standardverfahren</name>:
     </textblock>
     
     <shell>
      <user path="~">
tar xzvf samhain-X.Y.Z.tar.gz
      </user>
      <user path="~">
cd samhain-X.Y.Z/
      </user>
      <user path="~/samhain-X.Y.Z">
./configure &amp;&amp; make
      </user>
     </shell>

     <textblock>
... ebenso wie die Installation:
     </textblock>
     
     <shell>
      <user path="~/samhain-X.Y.Z">
su
      </user>
      <output>
Password:
      </output>
      <input>
geheimes_root_passwort
      </input>
      <root path="/home/user/samhain-X.Y.Z">
make install
      </root>
      <root path="/home/user/samhain-X.Y.Z">
make install-boot
      </root>
     </shell>
    </section>

    <section>
     <heading>
Vertrauenswürdige Benutzer
     </heading>
     
     <textblock>
Bei der Installation von Samhain ist zu berücksichtigen, dass Samhain
voraussetzt, dass nur vertrauenswürdige Benutzer Schreibrechte auf den Pfaden zu
Konfigurations-, Log-, und Datenbank-Dateien haben. Dies gilt auch für
Mitglieder von Gruppen, soweit Gruppen-Schreibrechte bestehen.
     </textblock>
     
     <textblock>
Standardmäßig sind nur <ref chapter="nutzer_unter_linux" iref="root">root</ref>
und der Benutzer von <command>Samhain</command> vertrauenswürdig. Zusätzliche
vertrauenswürdige Benutzer lassen sich beim Übersetzen von
<command>Samhain</command> definieren über die Option
<command>--with-trusted=0,uid1,uid2,...</command>
     </textblock>
    </section>
    
    <section>
     <heading>
Konfiguration
     </heading>

     <textblock>
Die Konfigurationsdatei heißt standardmäßig <path>/etc/samhainrc</path>. Wer sie
lieber unter <path>/usr/local/etc/</path> haben möchte, kann dies bei der
Übersetzung der Quellen mit <command>./configure --prefix=/usr/local</command>
erzwingen.
     </textblock>

     <textblock>
Bei der Installation wird eine Standard-Konfigurationsdatei installiert, die man
in der Regel zunächst an die eigenen Bedürfnisse anpassen möchte.
     </textblock>

     <textblock>
Die Syntax der Konfigurationsdatei lehnt sich an an INI-Dateien: es gibt
einzelne Sektionen, die jeweils mit einer Überschrift in eckigen Klammern
beginnen, und die "Parameter=Wert"-Zeilen enthalten. Leere Zeilen sowie Zeilen,
die mit "#" beginnen, werden ignoriert; in "Parameter=Wert"-Zuweisungen werden
Leerzeichen vor "Parameter", vor und nach dem Gleichheitszeichen, sowie am 
Zeilenende ignoriert.
     </textblock>

     <textblock>
Die wesentlichen Eigenschaften, die konfiguriert werden sollten, sind:
     </textblock>
     
     <ol>
      <li>
das Logging (siehe Abschnitt
<ref iref="Konfiguration der Logging-Eigenschaften">Konfiguration der Logging-Eigenschaften</ref>),
d. h. wie ausführlich soll <name>Samhain</name> seine Aktivität protokollieren,
und welche Methoden soll es benutzen ?, und
      </li>
      <li>
die Integritätseigenschaften innerhalb des Dateisystems (siehe Abschnitt
<ref iref="Konfiguration der Integritätseigenschaften innerhalb des Dateisystems">Konfiguration der Integritätseigenschaften innerhalb des Dateisystems</ref>),
d. h. welche Dateien sollen überwacht werden, und welche Eigenschaften dieser
Dateien sollen überprüft werden?
      </li>
     </ol>
    </section>
    
    <section>
     <heading>
Initialisierung
     </heading>
     
     <textblock>
Nach der Überprüfung und Anpassung der Konfiguration kann nun durch den Benutzer
<ref chapter="nutzer_unter_linux" iref="root">root</ref> die Datenbank
initialisiert werden:
     </textblock>

     <shell>
      <root path="~">
samhain -t init
      </root>
     </shell>

     <textblock>
Je nach Umfang der zu überwachenden Dateien kann die Initialisierung mehrere
Minuten dauern. Die erzeugte Datenbank wird standardmäßig nach
<path>/var/lib/samhain/samhain_file</path> geschrieben.
     </textblock>

     <textblock>
Zu beachten ist dabei, dass grundsätzlich an das Dateiende angehängt wird, falls
die Datei bereits vorhanden ist. Dieser Befehl ist also nicht dazu geeignet,
eine bereits vorhandene Datenbank zu aktualisieren. Für letzteres sollte
entweder der Befehl <command>samhain -t update</command> verwendet werden, oder
die Datenbank zuvor verschoben werden.
     </textblock>
    </section>
  </section>
 </split>
 
 <split>
  <section>
   <heading>
Allgemeines zur Benutzung
   </heading>
   
    <section>
     <heading>
Die Datenbank
     </heading>

     <textblock>
Standardmäßig wird die Datenbank nach <path>/var/lib/samhain/samhain_file</path>
geschrieben. Nach der Initialisierung der Datenbank ist in dieser der aktuelle
Zustand der überwachten Dateien gespeichert: Prüfsummen des Dateiinhaltes,
Dateigröße, Zugriffsrechte, Eigentümer und Gruppe, Zeiten, Anzahl von Hardlinks,
die Nummer der Inode, und (bei Geräten) die Gerätenummer.
     </textblock>

     <textblock>
<name>Samhain</name> benutzt standardmäßig den TIGER192-Prüfsummenalgorithmus.
Optional kann auch SHA-1 oder MD5 benutzt werden (MD5 wird wegen möglicher
Schwächen nicht mehr empfohlen).
     </textblock>

     <textblock>
Diese Datenbank sollte natürlich vor unabsichtlichem oder böswilligem
Überschreiben gesichert werden. Dazu bieten sich mehrere Möglichkeiten an:
     </textblock>

     <ol>
      <li>
die Datenbank kann auf einem nicht beschreibbaren Gerät gespeichert werden,
z. B. ein USB-Stick, der auf <strong>nicht beschreibbar</strong>' geschaltet ist,
      </li>
      <li>
die Datenbank kann mit <ref chapter="gpg_handbuch_vorwort">GnuPG</ref> signiert
werden, wie
<ref iref="Signierte Datenbank- und Konfigurationsdateien">weiter unten</ref>.
beschrieben wird - dies schützt zwar nicht davor, dass sie überschrieben wird,
ermöglicht aber, eine solche Manipulation zu erkennen -, oder
      </li>
      <li>
die Datenbank kann auf einem anderen Rechner gespeichert werden, und Samhain
kann so konfiguriert werden, dass die Datenbank beim Start von diesem Rechner
heruntergeladen wird (siehe Abschnitt 
<ref iref="Logging zu einem Log-Server (Yule)">Logging zu einem Log-Server (Yule)</ref>).
      </li>
     </ol>
    </section>

    <section>
     <heading>
Verifikation der System-Integrität
     </heading>

     <textblock>
Die Verifikation der System-Integrität erfolgt durch Vergleich der überwachten
Dateien mit den Angaben, die in der Datenbank gespeichert sind. Manuell (oder
per <command>cron</command>) kann dies erfolgen mit dem Kommando:
     </textblock>

     <shell> 
      <root path="~">
samhain -t check
      </root>
     </shell>

     <textblock>
Eine wesentliche Eigenschaft von Samhain besteht jedoch darin, dass es zum
Einsatz als Dämon entwickelt wurde. D. h. Samhain startet automatisch beim
Booten des Rechners, überwacht das Dateisystem, und meldet Veränderungen
entsprechen den eingestellten Logging-Eigenschaften (siehe Abschnitt 
<ref iref="Konfiguration der Logging-Eigenschaften">
Konfiguration der Logging-Eigenschaften</ref>). Bei der Installation wird
mit dem Kommando:
     </textblock>

     <shell>
      <root path="~">
make install-boot
      </root>
     </shell>

     <textblock>
dafür gesorgt, dass <name>Samhain</name> beim nächsten Booten gestartet wird.
Will man nach der Initialisierung der Datenbank den <name>Samhain-Daemon</name>
gleich starten, so kann man dies mit folgendem Befehl tun:
     </textblock>

     <shell>
      <root path="~">
samhain start
      </root>
     </shell>
    </section>

    <section>
     <heading>
Pflege der Datenbank
     </heading>

     <textblock>
Natürlich gibt es in einem Dateisystem durchaus auch gewollte Veränderungen,
z. B. infolge von mehr oder weniger regelmäßigen Sicherheits-Aktualisierungen.
Nach solchen Veränderungen muss die Datenbank von <name>Samhain</name> jeweils
auf aktuellen Stand gebracht werden. Dies erfolgt mit dem Kommando:
     </textblock>

     <shell>
      <root path="~">
samhain -t update [--interactive] [-l none] [-e none]
      </root>
     </shell>

     <textblock>
Die in Klammern gesetzten Optionen sind nicht notwendig, aber gegebenfalls
hilfreich:
     </textblock>

     <ol>
      <li>
Mit <command>--interactive</command> fragt Samhain bei jeder entdeckten
Veränderung, ob der entsprechende Eintrag in der Datenbank geändert werden soll.
      </li>

      <li>
Falls das Update der Datenbank stattfindet, während der
<name>Samhain-Daemon</name> läuft, sollte man darauf achten, Konflikte beim
Logging zu vermeiden, indem man bestimmte Log-Optionen nicht benutzt. Dies gilt
insbesondere für die lokale Log-Datei (ausschalten mit
<command>-l none</command>) sowie für Logging zu einem Log-Server (siehe
Abschnitt <ref iref="Logging zu einem Log-Server (Yule)">Logging zu einem Log-Server (Yule)</ref>;
ausschalten mit <command>-e none</command>).
      </li>
     </ol>
    </section>

    <section>
     <heading>
Inhalt der Datenbank ansehen
     </heading>
     
     <textblock>
Wenn man den Inhalt der Datenbank ansehen möchte, kann man folgenden
Befehl benutzen:
     </textblock>

     <shell>
      <root path="~">
samhain [-a] -d /pfad/zur/datenbank
      </root>
     </shell>

     <textblock>
Dies liefert eine Ausgabe, die ähnlich ist wie <command>ls -l</command>. Mit der
Option <command>-a</command> werden weitere Details angezeigt, die man bei
<command>ls -l</command> nicht erhält (z. B. die Prüfsumme einer Datei).
     </textblock>
    </section>

    <section>
     <heading>
Verifikation der Email-Nachrichten von Samhain
     </heading>
     
     <textblock>
Wird Email als Log-Option benutzt, so ist es möglich, zu überprüfen, ob die
erhaltenen Emails tatsächlich von Samhain stammen. Hierzu gibt es den das
Kommando:
     </textblock>

     <shell>
      <root path="~">
samhain -M /pfad/zur/mailbox
      </root>
     </shell>

     <textblock>
Dabei gibt es folgende Einschränkungen:
     </textblock>

     <ol>
      <li>
alle Email sollten in einer Datei sein (z.B eine Mailbox im mbox-Format),
      </li>
      <li>
die jeweils erste Email nach dem Start von Samhain kann nicht verifiziert
werden, und
      </li>
      <li>
das zur Verifikation benutzte Samhain-Programm muss den selben Schlüssel
enthalten wie das sendende Samhain-Programm (siehe Abschnitt
<ref iref="Verifikation des Samhain-Programmes">Verifikation des Samhain-Programmes</ref>). 
      </li>
     </ol>
    </section>

    <section>
     <heading>
Verifikation der lokalen Log-Datei
     </heading>

     <textblock>
Wird die lokale Log-Datei benutzt, so ist es möglich, zu überprüfen, ob die
Einträge tatsächlich von Samhain stammen, und nicht verändert wurden. Hierzu
gibt es den das Kommando:
     </textblock>

     <shell>
      <root path="~">
samhain -M /pfad/zur/logdatei
      </root>
     </shell>

     <textblock>
Dabei gibt es folgende Einschränkungen:
     </textblock>
 
     <ol>
      <li>
es ist ein Schlüssel notwendig, der nach Eröffnung der Log-Datei per Email
geschickt wird, falls (und nur falls) auch Email als Log-Option benutzt wird,
und
      </li>
      <li>
das zur Verifikation benutzte Samhain-Programm muss den selben Schlüssel
enthalten wie das sendende Samhain-Programm (siehe Abschnitt 
<ref iref="Verifikation des Samhain-Programmes">Verifikation des Samhain-Programmes</ref>). 
      </li>
     </ol>
    </section>

    <section>
     <heading>
Verifikation des Samhain-Programmes
     </heading>

     <textblock>
Beim Übersetzen der Quellen wird standardmäßig ein zufällig erzeugter Schlüssel
eingebettet. Der Wert dieses Schlüssels wird von <command>./configure</command>
am Ende angezeigt (die Zahlen sind nur Beispiele):
     </textblock>

     <shell>
      <output>
Base key: 1076404394,1083932597
      </output>
     </shell>

     <textblock>
Ein Samhain-Programm mit identischem Schlüssel lässt sich erzeugen, indem man
als Option für <command>./configure</command> angibt:
<command>--enable-base=1076404394,1083932597</command>.
     </textblock>

     <textblock>
Da sich Emails (siehe Abschnitt
<ref iref="Verifikation der Email-Nachrichten von Samhain">Verifikation der Email-Nachrichten von Samhain</ref>
- und lokale Log-Dateien (siehe Abschnitt
<ref iref="Verifikation der lokalen Log-Datei">Verifikation der lokalen Log-Datei</ref>)
- nur verifizieren lassen, wenn verifizierendes und erzeugendes Programm den
selben eingebetteten Schlüssel haben, ist es somit prinzipiell möglich, die
Integrität eines Samhain-Programmes zu überprüfen, dass auf einem entfernten
Rechner läuft, und per Email Log-Berichte schickt.
     </textblock>
    </section>
  </section>
 </split>

 <split>
  <section>
   <heading>
Konfiguration der Logging-Eigenschaften
   </heading>

   <textblock>
Samhain verfügt über viele verschiedene Log-Möglichkeiten, die teilweise erst
durch entsprechende Optionen beim Übersetzten der Quellen verfügbar werden.
   </textblock>
  
   <textblock>
Jede unterstützte Log-Option lässt sich über die Konfigurationsdatei gesondert
konfigurieren und ein- oder ausschalten.
   </textblock>
    
    <section>
     <heading>
Unterstützte Log-Möglichkeiten
     </heading>
    
     <textblock>
Samhain unterstützt standardmäßig <name>Email</name>,
<ref chapter="syslog">Syslog</ref>, eine Logdatei
(<path>/var/log/samhain_log</path>), und die Konsole (bzw. stderr, wenn Samhain
nicht als Daemon läuft). Weiterhin ist es möglich, Log-Nachrichten an ein
externes Skript oder ein Programm zu übergeben, und auf diese Weise beliebige
weitere Log-Möglichkeiten zu realisieren.
     </textblock>

     <textblock>
Weitere Möglichkeiten sind:
    </textblock>
    
    <ol>
     <li>
Logging zu einem Log-Server. Dies wird weiter unten in einem
<ref iref="Logging zu einem Log-Server (Yule)">eigenen Abschnitt</ref>
näher beschrieben.
     </li>
     <li>
Logging zu einem Prelude IDS-System. Hierzu muss die libprelude-Bibliothek
installiert sein, und die Option <command>--with-prelude</command> muss bei
<command>./configure</command> angegeben werden, wenn die Quellen übersetzt
werden. Der Sensor-Name, der beim Ausführen des Prelude-Programmes
<command>sensor-adduser</command> (zum Anmelden eines Sensors) angegeben werden
muss, lautet <strong>Samhain</strong>.
     </li>
     <li>
Logging zu einer relationalen Datenbank (MySQL, PostgreSQL, Oracle).
Hierzu muss die entsprechende Client-Bibliothek der Datenbank installiert
sein, und die Option <command>--with-database=mysql</command> (oder postgresql,
oracle) muss bei <command>./configure</command> angegeben werden, wenn die
Quellen übersetzt werden.
     </li>
    </ol>
   </section>
   
   <section>
    <heading>
Filtern von Log-Berichten
    </heading>
    
    <textblock>
Jede der unterstützten Log-Möglichkeiten lässt sich individuell einstellen.
Einerseits ist es möglich, eine Untergrenze anzugeben für die
Dringlichkeitsstufe / den Level der Nachrichten, die man erhalten möchte. Je
niedriger man diese Untergrenze angibt, desto ausführlicher ist das Logging.
Andererseits ist es möglich, das Logging auf bestimmte Klassen von Ereignissen
zu beschränken.
    </textblock>
    
    <section>
     <heading>
Levels (Dringlichkeitsstufen)
     </heading>
     
     <textblock>
Die Reihenfolge der Levels ist:
     </textblock>
     
     <table>
      <pdf-column width="100"/>
      <pdf-column/>
      <tr>
       <td>
debug
       </td>
       <td>
nur zur Fehlersuche
       </td>
      </tr>
      <tr>
       <td>
info
       </td>
       <td>
detaillierte Informationen
       </td>
      </tr>
      <tr>
       <td>
notice
       </td>
       <td>
Informationen
       </td>
      </tr>
      <tr>
       <td>
warn
       </td>
       <td>
Warnungen
       </td>
      </tr>
      <tr>
       <td>
mark
       </td>
       <td>
Zeitmarken
       </td>
      </tr>
      <tr>
       <td>
err
       </td>
       <td>
Fehler
       </td>
      </tr>
      <tr>
       <td>
crit
       </td>
       <td>
kritische Probleme
       </td>
      </tr>
      <tr>
       <td>
alert
       </td>
       <td>
Start/Stopp des Programmes; Fehler, die zum Programmabbruch führen
       </td>
      </tr>
     </table>
     
     <textblock>
Der gewünschte Level wird eingestellt in der <strong>[Log]</strong>-Sektion der
Konfigurationsdatei mit den Optionen der Form
<command>xxxSeverity = level</command>:
     </textblock>
     
     <file>
      <title>
/etc/samhainrc
      </title>
      <content>
[Log]
# E-Mail
MailSeverity = crit
# Konsole
PrintSeverity = info
# Syslog
SyslogSeverity = err
# Logdatei
LogSeverity = err
#
# Log Server (optional)
# ExportSeverity = err
#
# Datenbank
# DatabaseSeverity = err
#
# Prelude
# PreludeSeverity = crit
      </content>
     </file>
    </section>
    
    <section>
     <heading>
Konfigurierbare Levels (Dringlichkeitsstufen)
     </heading>
     
     <textblock>
Der Level einer Nachricht ist im Allgemeinen festgelegt. Die folgenden
Nachrichten haben konfigurierbare Levels: Änderungen bei überwachten Dateien,
Zugriffsfehler bei Dateien und Directories, Dateien mit ungültigen UIDs/GIDs
oder seltsamen Dateinamen (nicht-druckbare Zeichen). Diese Levels werden
konfiguriert in der <strong>[EventSeverity]</strong>-Sektion der
Konfigurationsdatei:
     </textblock>
     
     <file>
      <title>
/etc/samhainrc
      </title>
      <content>
[EventSeverity]
#
# Überwachte Dateien (für die Bedeutung von 'ReadOnly',
# 'LogFiles', usw. siehe Abschnitt Konfiguration der Integritätseigenschaften
# innerhalb des Dateisystems).
#
SeverityReadOnly=crit
SeverityLogFiles=crit
SeverityGrowingLogs=warn
SeverityIgnoreNone=crit
SeverityIgnoreAll=info
#
# Zugriffsfehler für Dateien (Files) und Directories (Dirs)
#
SeverityFiles=err
SeverityDirs=err
#
# Dateinamen, ungültige UIDS/GIDs
#
SeverityNames=info
      </content>
     </file>
    </section>
    
    <section>
     <heading>
Ereignisklassen
     </heading>
     
     <textblock>
Die folgenden Ereignisklassen sind definiert:
     </textblock>
     
     <table>
      <pdf-column width="100"/>
      <pdf-column/>
      <tr>
       <td>
EVENT
       </td>
       <td>
Überwachte Ereignisse (z.B. Änderungen einer Datei)
       </td>
      </tr>
      <tr>
       <td>
START
       </td>
       <td>
Start/Stopp-Meldungen
       </td>
      </tr>
      <tr>
       <td>
STAMP
       </td>
       <td>
Zeitmarken
       </td>
      </tr>
      <tr>
       <td>
LOGKEY
       </td>
       <td>
Der Schlüssel zur Verifikation der Log-Datei (siehe Abschnitt
<ref iref="Verifikation der lokalen Log-Datei">Verifikation der lokalen Log-Datei</ref>)
       </td>
      </tr>
      <tr>
       <td>
ERROR
       </td>
       <td>
Fehlermeldungen
       </td>
      </tr>
      <tr>
       <td>
OTHER
       </td>
       <td>
Alles andere (z.B. detaillierte Informationen)
       </td>
      </tr>
      <tr>
       <td>
AUD
       </td>
       <td>
System-Aufrufe (für Fehlersuche)
       </td>
      </tr>
     </table>

     <textblock>
Standardmäßig sind alle Ereignisklassen für alle Log-Möglichkeiten zugelassen.
Will man dies ändern, so geschieht dies in der <strong>[Log]</strong>-Sektion der
Konfigurationsdatei mit Optionen der Form <command>xxxClass = Liste</command>
der zugelassen Ereignisklassen, wobei in der Liste Leerzeichen zur Separation
benutzt werden sollten, z. B.:
     </textblock>
     
     <file>
      <title>
/etc/samhainrc
      </title>
      <content>
[Log]
# E-Mail
MailClass = EVENTS ERROR LOGKEY
# Konsole
PrintClass = EVENTS ERROR STAMP
# Syslog
SyslogClass = START
# Logdatei
LogClass = EVENTS START STAMP ERROR OTHER
      </content>
     </file>
    </section>
   </section>
   
   <section>
    <heading>
Ausschalten von Log-Möglichkeiten
    </heading>
    
    <textblock>
Möchte man eine unterstützte Log-Möglichkeit nicht benutzen, so kann man sie
ausschalten, indem man den Level auf den speziellen Wert <command>none</command>
(nichts) setzt, z. B. <command>MailSeverity = none</command>.
    </textblock>
   </section>
   
   <section>
    <heading>
Spezielle Optionen
    </heading>
    
    <textblock>
Einige Log-Möglichkeiten erfordern spezielle Optionen, die im Folgenden
beschrieben werden.
    </textblock>
    
    <section>
     <heading>
Email
     </heading>
     
     <textblock>
Spezielle Optionen für Email werden in der <strong>[Misc]</strong>-Sektion der
Konfigurationsdatei gesetzt:
     </textblock>
     
     <file>
      <title>
/etc/samhainrc
      </title>
      <content>
[Misc]
#
# Für Email ist die Angabe der Empfängeradresse notwendig mit:
SetMailAddress = xyz@example.com 
#
# Ferner kann es notwendig sein, ein Relay anzugeben:
SetMailRelay = relay.example.com
#
# Nachrichten werden i.A. zunächst in eine Warteschlange gestellt, und
# dann in einer Email versendet. Die maximale Anzahl von Nachrichten
# in der Warteschlage ist konfigurierbar (Obergrenze: 128):
SetMailNum = 10
#
# Auch die maximale Zeitspanne (in Sekunden) bis zum Versenden der
# Nachrichten in der Warteschlange ist konfigurierbar:
SetMailTime = 86400
#
# Schließlich ist es möglich, die Subjekt-Zeile der Email zu bestimmen:
MailSubject = xyz
      </content>
     </file>
    </section>
    
    <section>
     <heading>
Datenbank
     </heading>
     
     <textblock>
Für den Zugriff auf eine Datenbank ist es notwendig, die relevanten
Informationen anzugeben. Dies geschieht in der
<strong>[Database]</strong>-Sektion der Konfigurationsdatei:
     </textblock>
     
     <file>
      <title>
/etc/samhainrc
      </title>
      <content>
[Database]
#
# Zunächst wird der Name der Datenbank benötigt (standardmäßig 'samhain')
SetDBName = samhain
#
# Außerdem ist der Name der Log-Tabelle anzugeben:
SetDBTable = log
#
# Auf welchem Rechner läuft der Datenbank-Server ?
SetDBHost = localhost
#
# Für den Zugriff auf die Datenbank sind Benutzername und Passwort notwendig:
#
# Benutzername
SetDBUser = samhain
#
# Passwort (kein voreingestellter Standardwert)
SetDBPassword = ...
#
# Soll der Log-Server eigene Zeitstempel für erhaltene Nachrichten loggen ?
SetDBServerTstamp = True
#
# Soll eine ständige Verbindung zur Datenbank aufrecht erhalten werden ?
UsePersistent = True
      </content>
     </file>
    </section>
   </section>
  </section>
 </split>
 
 <split>
  <section>
   <heading>
Konfiguration der Integritätseigenschaften innerhalb des Dateisystems
   </heading>
   
   <textblock>
In Abschnitt 4 wurde besprochen, wie Samhain berichten soll. Natürlich muss man
auch festlegen, worüber Samhain berichten soll. D. h., es muss angegeben werden,
über welche Dateien-Änderungen man informiert werden möchte.
   </textblock>
   
   <textblock>
Samhain speichert die Prüfsumme des Dateiinhaltes (bei regulären Dateien),
die Dateigröße, Zugriffsrechte, Besitzer und Gruppe, Zeiten, Anzahl von Hardlinks,
die Nummer der Inode, und (bei Geräten) die Gerätenummer.
   </textblock>
   
   <textblock>
Nicht immer ist es sinnvoll, alle diese Eigenschaften zu prüfen. Z.B. ändern
sich Größe, Prüfsumme und Zeitstempel von Logdateien fortwährend. Auch Größe und
Zeitstempel einer Verzeichnis-Inode ändern sich, wenn Dateien
in diesem Verzeichnis erzeugt und/oder gelöscht werden. Man beachte dabei den
Unterschied zwischen den Dateien in einem Verzeichnis, und der Verzeichnis-Inode
selbst, d. h. der speziellen Datei, die eine Liste der ersteren Dateien enthält.  
In der Regel ist es sinnvoll, manche Dateien nach anderen Policys (Grundsätzen)
zu behandeln als andere.
   </textblock>
   
   <textblock>
Samhain bietet mehrere vordefinierte Policys, sowie die Möglichkeit, diese
Policys nach eigenem Ermessen zu ändern. Eine Policy ist dabei ein Grundsatz,
der besagt, welche Dateieigenschaften sich ändern dürfen, und welche nicht.
   </textblock>
   
   <section>
    <heading>
Vordefinierte Policys
    </heading>
    
    <textblock>
Die folgenden Policys sind vordefiniert:
    </textblock>
    
    <table>
     <pdf-column width="100"/>
     <pdf-column/>
     <tr>
      <td>
ReadOnly
      </td>
      <td>
Nur die Zeit des letzten Zugriffs (access time) darf sich ändern.
      </td>
     </tr>
     <tr>
      <td>
Prelink
      </td>
      <td>
Wie ReadOnly, aber für Programme und Bibliotheken, die mit Hilfe von
<command>prelink</command> verändert wurden, um einen schnelleren Programmstart
zu ermöglichen.
      </td>
     </tr>
     <tr>
      <td>
LogFiles
      </td>
      <td>
Alle Zeitstempel, sowie Prüfsumme und Dateigröße dürfen sich ändern.
      </td>
     </tr>
     <tr>
      <td>
GrowingLogFiles
      </td>
      <td>
Sowohl Zeitstempel als auch Prüfsumme dürfen sich ändern. Die Dateigröße darf
sich nicht verringern, aber erhöhen.
      </td>
     </tr>
     <tr>
      <td>
Attributes
      </td>
      <td>
Nur Veränderungen von Eigentümer/Gruppe oder Zugriffsrechten werden berichtet.
      </td>
     </tr>
     <tr>
      <td>
IgnoreAll
      </td>
      <td>
Alle Veränderungen werden ignoriert, aber die Existenz einer Datei wird geprüft.
      </td>
     </tr>
     <tr>
      <td>
IgnoreNone
      </td>
      <td>
Alle Veränderungen einschließlich der Zugriffszeit werden berichtet. Praktisch
bedeutet dies allerdings, dass nun die Zeit der letzten Inode-Änderung anstelle
der Zeit des letzten Zugriffs ignoriert wird.
      </td>
     </tr>
     <tr>
      <td>
User0, User1
      </td>
      <td>
Diese Policys sind standardmäßig auf <strong>nichts darf sich ändern</strong>
gesetzt und für benutzerdefinierte Policys gedacht.
      </td>
     </tr>
    </table>
   </section>
   
   <section>
    <heading>
Wahl einer Policy
    </heading>
    
    <textblock>
Jede Policy entspricht einer Sektion in der Konfigurationsdatei, deren Titel der
Name der Policy ist. Ein Verzeichnis oder eine einzelne Datei wird unter diese
Policy gestellt, indem man in der entsprechenden Sektion einen Eintrag der Form
<command>dir=/directory</command> bzw. <command>file=/file</command> macht. Dabei
sind immer absolute Pfade anzugeben;
<ref chapter="dateien_unter_linux" iref="Jokerzeichen">Jokerzeichen</ref>
im Shell-Stil werden unterstützt:
    </textblock>
    
    <file>
     <title>
/etc/samhainrc
     </title>
     <content>
[ReadOnly]
#
dir=/bin
dir=/usr/bin
dir=/sbin
dir=/usr/sbin
#
file=/etc/passwd*
file=/etc/shadow*
     </content>
    </file>
   </section>
   
   <section>
    <heading>
Rekursionstiefe
    </heading>
    
    <textblock>
Standardmäßig werden Verzeichnisse nicht rekursiv geprüft. Dies kann global
geändert werden mit dem Eintrag <command>SetRecursionLevel = zahl</command>
in der <strong>[Misc]</strong>-Sektion, wobei <strong>zahl</strong> die Anzahl
der Rekursionsebenen angibt (maximal 99).
    </textblock>

    <textblock>
Weiterhin ist es möglich, die Rekursionstiefe für ein Verzeichnis individuell
zu konfigurieren, indem man die gewünschte Anzahl Rekursionsebenen dem
Verzeichnis voranstellt:
    </textblock>
    
    <file>
     <title>
/etc/samhainrc
     </title>
     <content>
[ReadOnly]
#
dir=5/var
     </content>
    </file>
   </section>
   
   <section>
    <heading>
Unterverzeichnisse ignorieren
    </heading>
    
    <textblock>
Will man einen Verzeichnisbaum rekursiv prüfen, aber bestimmte
Unterverzeichnisse (Teilbäume) komplett auslassen, so müssen diese
Unterverzeichnisse mit einer Rekursionstiefe von <strong>-1</strong> unter die
Policy <strong>[IgnoreAll]</strong> gestellt werden:
    </textblock>
    
    <file>
     <title>
/etc/samhainrc
     </title>
     <content>
[IgnoreAll]
#
dir=-1/var/nicht/zuhause
     </content>
    </file>
   </section>
   
   <section>
    <heading>
Keine Benachrichtigung über neue/gelöschte Dateien
    </heading>
    
    <textblock>
Gelegentlich möchte man es vermeiden, über bestimmte Dateien informiert zu
werden, die ständig neu erzeugt und/oder gelöscht werden. Hierzu dienen die 
Optionen <command>IgnoreAdded = regexp</command> (neu erzeugt ignorieren)
und/oder <command>IgnoreMissing = regexp</command> (gelöscht ignorieren) in der 
<strong>[Misc]</strong>-Sektion der Konfigurationsdatei. Das Argument ist
jeweils ein <ref chapter="regex">regulärer Ausdruck</ref> für den absoluten Pfad.
    </textblock>
   </section>
   
   <section>
    <heading>
Hardlink Test
    </heading>
    
    <textblock>
Unter UNIX oder Linux hat eine Directory üblicherweise ebensoviele Hardlinks
wie sie Unterverzeichnisse hat (einschließlich <strong>.</strong> und
<strong>..</strong>). Samhain testet dies - die Idee dabei ist, dass ein Rootkit
ein Unterverzeichnis verbergen kann, aber in der Regel nicht die Zahl der
Hardlinks des darüberliegenden Verzeichnisses korrigiert. Dieser Test lässt sich
ausschalten mit der Option <command>UseHardlinkCheck = no</command> in der
<strong>[Misc]</strong>-Sektion.
    </textblock>

    <textblock>
Das Wurzelverzeichnis einer ReiserFS-Partition hat zwei zusätzliche Hardlinks.
Für solche Fälle ist es möglich, mit der Option
<command>HardlinkOffset = N:/directory</command> in der
<strong>[Misc]</strong>-Sektion eine Korrektur anzugeben. Dabei ist N gleich
(tatsächliche - erwartete) Hardlinks.
    </textblock>
   </section>
   
   <section>
    <heading>
Test auf seltsame Dateinamen
    </heading>
    
    <textblock>
Samhain prüft Dateinamen auf unübliche Zeichen, z. B. Zeilenvorschub,
Tabulator o. ä. Mit der Option <command>AddOKChars = N1, N2, ..</command> in
der <strong>[Misc]</strong>-Sektion lässt sich die Menge der
<strong>guten</strong> Zeichen erweitern; dabei ist N1 ... der vorzeichenlose
Byte-Wert des Zeichen in hexadezimaler (0xNN), oktaler (0NNN) oder dezimaler
Notation.
    </textblock>

    <textblock>
Mit <command>AddOKChars = all</command> lässt sich dieser Test komplett
ausschalten.
    </textblock>
   </section>
   
   <section>
    <heading>
Änderung einer Policy
    </heading>
    
    <textblock>
Möchte man eine Policy ändern, so geschieht dies in der
<strong>[Misc]</strong>-Sektion mit Anweisungen der Form:
<command>RedefPOLICYNAME = +XXX -YYY ...</command>, wobei die Liste der +/-XXX
die Tests sind, die man hinzufügen oder streichen möchte. Mögliche Tests sind:
CHK (Prüfsumme), LNK (Name eines Links), HLN (Anzahl Hardlinks),
INO (Inode-Nummer), USR (Besitzer), GRP (Gruppe), MTM
(Zeit der letzten Änderung), ATM (Zeit des letzten Zugriffs), CTM (Zeit der
letzten Inode-Änderung), SIZ (Dateigröße), RDEV (Gerätenummer) und/oder MOD
(Zugriffsrechte und Dateityp).
    </textblock>

    <textblock>
Dabei ist zu beachten, dass eine Policy in der Konfigurationsdatei geändert
werden muss, bevor sie benutzt wird, d.h. im nachfolgenden Beispiel wäre es
falsch, die <strong>[Misc]</strong>-Sektion hinten anzustellen:
    </textblock>
    
    <file>
     <title>
/etc/samhainrc
     </title>
     <content>
[Misc]
#
# ReadOnly Policy ändern: Inode-Nummer, Besitzer und Gruppe nicht prüfen
#
RedefReadOnly = -INO -USR -GRP
#
# ... und geänderte Policy benutzen:
#
[ReadOnly]
#
# nicht ganz sinnvoll, aber ist ja nur ein Beispiel
#
dir = /usr/bin
     </content>
    </file>
   </section>
   
   <section>
    <heading>
Zeiten der Integritätsprüfung
    </heading>
    
    <textblock>
Wenn Samhain als Dämon läuft, so gibt es zwei verschiedene Möglichkeiten,
in der <strong>[Misc]</strong>-Sektion die Zeiten der Integritätsprüfung
festzulegen:
    </textblock>
    
    <ul>
     <li>
erste Möglichkeit: mit <command>SetFilecheckTime = Sekunden</command> ein
Intervall festlegen
     </li>
     <li>
zweite Möglichkeit: mit <command>FileCheckScheduleOne = Zeitplan</command> einen
Zeitplan im <ref chapter="cron" iref="cron Konfiguration">crontab</ref>-Stil
festlegen. Dabei sind folgende Abweichungen zu crontab zu beachten: (a) Listen
sind nicht erlaubt, und (b) Bereiche mit Namen (z. B. Mon-Fri) sind erlaubt. Es
ist möglich, die Option <command>FileCheckScheduleOne = Zeitplan</command>
mehrmals zu verwenden, um dadurch eine Liste zu konstruieren.
     </li>
    </ul>
    
    <textblock>
Wenn die zweite Möglichkeit genutzt wird, so gibt es zusätzlich die Möglichkeit,
mit <command>FileCheckScheduleTwo = Zeitplan</command> einen weiteren Zeitplan
zu definieren für Verzeichnisse (keine einzelnen Dateien), die seltener geprüft
werden sollen. Die entsprechenden Verzeichnisse müssen mit
%SCHEDULE_TWO ... !%SCHEDULE_TWO geklammert werden:
    </textblock>
    
    <file>
     <title>
/etc/samhainrc
     </title>
     <content>
[Misc]
#
# Alle 5 Minuten
#
FileCheckScheduleOne = */5 * * * *
#
# Einmal täglich
#
FileCheckScheduleTwo = 37 0 * * *
#
[ReadOnly]
#
dir = /Pfad/oft/prüfen
#
%SCHEDULE_TWO
dir = /Pfad/seltener/prüfen
!%SCHEDULE_TWO
#
     </content>
    </file>
   </section>
  </section>
 </split>
 
 <split>
  <section>
   <heading>
Logging zu einem Log-Server (Yule)
   </heading>
   
   <textblock>
Die meisten Programme zur Überwachung der Systemintegrität sind nur für einen
einzelnen Rechner gedacht, und bieten von sich aus keine Unterstützung für die
zentralisierte Überwachung  mehrerer Rechner.
   </textblock>

   <textblock>
Samhain hingegen unterstützt (optional) sowohl zentralisiertes Logging als auch
die zentrale Verwaltung. Konkret bedeutet dies:
   </textblock>
   
   <ul>
    <li>
Samhain kann so konfiguriert werden, dass Log-Nachrichten an einen Log-Server
geschickt werden. Der Log-Server wird <name>Yule</name> genannt. Dabei werden
Log-Nachrichten in verschlüsselter und signierter Form über
<ref chapter="tcpip" iref="TCP - Transmission Control Protocol">TCP</ref>
übertragen. Alle Log-Möglichkeiten von Samhain (mit Ausnahme des Weiterschickens
an einen weiteren Log-Server) stehen auch für den Log-Server zur Verfügung.
    </li>
    <li>
Die Konfigurationsdatei von Samhain kann auf dem Log-Rechner liegen, und Samhain
kann diese beim Start herunterladen.
    </li>
    <li>
Die Datenbank mit den gespeicherten Eigenschaften von Dateien kann auf dem
Log-Rechner liegen, und Samhain kann diese beim Start herunterladen.
    </li>
   </ul>
   
   <textblock>
Da die Log-Nachrichten von Samhain alle nötigen Informationen enthalten,
um die Samhain-Datenbank zu aktualisieren, ist es möglich, die Pflege der
Datenbank auf dem Server durchzuführen. Hierzu gibt es eine separate Anwendung
namens <command>Beltane</command>.
   </textblock>
   
   <section>
    <heading>
Übersetzen des Log-Servers (Yule)
    </heading>
    
    <textblock>
Yule wird aus den gleichen Quellen übersetzt wie Samhain. Das
<command>configure</command>-Skript muss hierbei jedoch mit der Option
<command>--enable-network=server</command> aufgerufen werden; ansonsten erfolgt
das Übersetzen und Installieren analog zu Samhain. Als Name des installierten
Programmes wird standardmäßig <command>Yule</command> gesetzt.
    </textblock>

    <textblock>
Um Missverständnissen vorzubeugen: auch wenn Yule aus den gleichen Quellen
übersetzt wird, ist es dennoch ein von Samhain verschiedenes Programm.
Genausowenig wie Samhain als Log-Server dienen kann, kann Yule die Integrität
des Systems überprüfen.
    </textblock>

    <textblock>
Alle Konfigurations-Optionen, die die Überprüfung des Systems betreffen, sind
also irrelevant für Yule; Konfigurations-Optionen bezüglich des Loggings sind
dagegen auch für Yule gültig (siehe aber auch den Abschnitt 
<ref iref="Besonderheiten beim Logging">Besonderheiten beim Logging</ref>).
    </textblock>
   </section>
   
   <section>
    <heading>
Übersetzen von Samhain
    </heading>
    
    <textblock>
Samhain kann nur Log-Nachrichten an Yule schicken, wenn es mit der hierfür
nötigen Unterstützung übersetzt wurde. Dazu ist es notwendig, das
<command>configure</command>-Skript mit der Option
<command>--enable-network=client</command> aufzurufen.
    </textblock>

    <textblock>
Möchte man außerdem auch die Konfigurationsdatei und die Samhain-Datenbank vom
Log-Server herunterladen, so sind die folgenden weiteren Optionen für
<command>configure</command> notwendig:
    </textblock>
    
    <ul>
     <li>
<command>--with-logserver=a.b.c.d</command> (wobei a.b.c.d die Adresse oder der
Name des Log-Rechners ist),
     </li>
     <li>
<command>--with-config-file=REQ_FROM_SERVER/etc/samhainrc</command> (das
<strong>REQ_FROM_SERVER</strong> sagt Samhain, dass die Datei vom Server geholt 
werden soll), und
     </li>
     <li>
<command>--with-data-file=REQ_FROM_SERVER/var/lib/samhain/samhain_file</command>.
     </li>
    </ul>

    <textblock>
Dabei ist folgendes zu beachten:
    </textblock>
    
    <ul>
     <li>
Wird ein Pfad nach <command>REQ_FROM_SERVER</command> angegeben, so spielt
dieser nur lokal eine Rolle. Samhain kann Yule nicht sagen, unter welchem Pfad
die betreffende Datei auf dem Log-Server liegt.
     </li>
     <li>
Bei <command>--with-config-file</command> ist der lokale Pfad optional. Er wird
nur beim Initialisieren der Samhain-Datenbank genutzt, und auch dann nur, wenn
das Herunterladen vom Server fehlschlägt (d. h. man kann die Datenbank
initialisieren, auch wenn Yule noch nicht bereit ist).
     </li>
     <li>
Bei <command>--with-data-file</command> ist der lokale Pfad zwingend notwendig,
da beim Initialisieren der Datenbank diese in eine lokale Datei geschrieben
wird. Es obliegt dem Benutzer, sie dann auf den Log-Rechner zu kopieren.
     </li>
    </ul>
   </section>
   
   <section>
    <heading>
Authentifizierung gegenüber Yule
    </heading>
    
    <textblock>
Yule nimmt keine beliebigen Anfragen zum Herunterladen von Konfigurationsdateien
oder Datenbanken entgegen. Ebenso nimmt Yule keine beliebigen Log-Nachrichten
entgegen. Samhain muss sich zunächst authentifizieren, woraufhin Yule und
Samhain einen Schlüssel vereinbaren, der für die weitere Kommunikation benutzt
wird. Die Authentifizierung erfolgt über das
<ref lang="en" url="http://srp.stanford.edu/">Secure Remote Password (SRP)</ref> 
Protokoll.
    </textblock>

    <textblock>
Hierzu sind zwei Zutaten notwendig: Samhain muss ein gültiges Passwort kennen,
und Yule muss das Passwort  (das für jeden Rechner verschieden sein kann)
verifizieren können.
    </textblock>

    <textblock>
Ein zufälliges Passwort lässt sich erzeugen mit:
    </textblock>
    
    <shell>
     <root>
yule -G
     </root>
     <output>
5B5CDF18CE8D66A3
     </output>
    </shell>
    
    <textblock>
Dieses Passwort kann man nun in Samhain einbetten mit:
    </textblock>
    
    <shell>
     <root>
./samhain_setpwd samhain new 5B5CDF18CE8D66A3
     </root>
     <output>
INFO   old password found
INFO   replaced:  f7c312aaaa12c3f7  by:  5b5cdf18ce8d66a3
INFO   finished
     </output>
    </shell>
    
    <textblock>
Das Hilfsprogramm samhain_setpwd wird erzeugt, wenn man Yule übersetzt. Es liest
ein ausführbares Samhain-Programm (erstes Argument, also
<command>samhain</command>), und schreibt eine Kopie mit dem gewünschten Suffix
(zweites Argument, also <command>new</command>), in die das Passwort
(drittes Argument) eingebettet ist.
    </textblock>

    <textblock>
Um das Passwort verifizieren zu können, braucht Yule in seiner
Konfigurationsdatei (standardmäßig <path>/etc/yulerc</path>) einen
entsprechenden Eintrag in der <strong>[Clients]</strong>-Sektion. Falls diese
Sektion die letzte in der Konfigurationsdatei ist, kann dies einfach
folgendermaßen geschehen:
    </textblock>
    
    <shell>
     <root>
yule -P 5B5CDF18CE8D66A3 | sed s%HOSTNAME%client.example.com% >> /etc/yulerc
tail -2 /etc/yulerc
     </root>
     <output>
[Clients]
Client=client.example.com@8A542F99C3514499@744C3A3EE8323470D9DAD42E2485BD0
B138F6B4116E964A9991A0B0D221E1AADE5800968804B99B494C39E7B9DD5710D18F1E6703
D1DB6D6393295E05DF6A6AA8D10BB4A21D7D9DC4901D444500D4EA358C1B44A3E3D44ACEC6
45F938F790A11AB0D03586143977E2BCE3A2D689445AC89134B409E68F34B0DE8BD8242ADD
7C0
     </output>
    </shell>
    
    <textblock>
Der Befehl <command>yule -P passwort</command> erzeugt eine einzige, sehr lange
Zeile mit der notwendigen Verifikations-Information. Diese Zeile enthält die
Zeichenkette <strong>HOSTNAME</strong>, die ersetzt werden muss durch den Namen
des Rechners, auf dem Samhain läuft (dies geschieht hier mit dem
<command>sed</command>-Befehl). Schließlich muss diese Zeile in die
<strong>[Clients]</strong>-Sektion der Konfigurationsdatei von Yule eingetragen
werden.
    </textblock>

    <textblock>
Für jeden Rechner, auf dem Samhain laufen soll, muss eine solcher Eintrag
gemacht werden. Das jeweilige Passwort kann, muss aber nicht
verschieden sein.
    </textblock>

    <textblock>
Ist Yule bereits gestartet, so muss mit
<ref chapter="prozessverwaltung" iref="kill">kill</ref> das Signal SIGHUP an
Yule geschickt werden, damit Änderungen der Konfigurationsdatei wirksam werden.
    </textblock>
   </section>
   
   <section>
    <heading>
Datenbank- und Konfigurationsdatei auf dem Log-Server
    </heading>
    
    <textblock>
Wenn Samhain beim Start eine Anfrage an Yule macht, um die Datenbank- oder
Konfigurationsdatei herunterzuladen, so sucht Yule die entsprechende Datei in
seinem Datenverzeichnis (standardmäßig <path>/var/lib/yule/</path>). Wenn
client.example.com der Name des Rechners ist, auf dem Samhain läuft, so muss
    </textblock>
    
    <ul>
     <li>
die Konfigurationsdatei rc.client.example.com heißen, und
     </li>
     <li>
die Datenbank file.client.example.com.
     </li>
    </ul>
   </section>
   
   <section>
    <heading>
Besonderheiten beim Logging
    </heading>
    
    <textblock>
Standardmäßig loggt Yule alle Nachrichten von Samhain nur zu Log-Möglichkeiten,
die für große Mengen von Daten geeignet sind (Konsole, Logdatei, aber nicht
Email oder Syslog), wobei die gewählten
<ref iref="Filtern von Log-Berichten">Filter-Einstellungen</ref>
ignoriert werden (d. h. wenn Samhain konfiguriert ist, eine bestimmte Nachricht
an Yule zu schicken, wird Yule diese Nachricht auch tatsächlich loggen).
    </textblock>

    <textblock>
Um Nachrichten von Samhain durch Yule (nochmals) zu filtern und/oder
Log-Möglichkeiten zu benutzen, die für große Datenmengen eher wenig geeignet
sind, muss Yule so eingestellt werden, dass auch Nachrichten von Samhain den
Filter-Einstellungen von Yule unterliegen.
    </textblock>

    <textblock>
Hierzu muss man in der <strong>[Misc]</strong>-Sektion die Optionen
<command>UseClientSeverity = yes</command> und
<command>UseClientClass = yes</command> setzen.
    </textblock>
   </section>
  </section>
 </split>
 
 <split>
  <section>
   <heading>
Weitere Eigenschaften von Samhain
   </heading>
   
   <section>
    <heading>
Signierte Datenbank- und Konfigurationsdateien
    </heading>
    
    <textblock>
Samhain unterstützt  <ref chapter="gpg_handbuch_vorwort">GnuPG</ref>-signierte
Datenbank- und Konfigurationsdateien. Dabei ist folgendes zu beachten:
    </textblock>
    
    <ul>
     <li>
Separate Signaturen werden nicht unterstützt.
     </li>
     <li>
Die Signatur muss so erfolgen, dass die Datei nicht verändert wird. Das Ende der
Konfigurationsdatei sollte mit <strong>[EOF]</strong> markiert werden, damit
Samhain nicht versucht, die Signatur als Option zu interpretieren. Die
empfohlenen GnuPG-Optionen zum Signieren sind:
<command>gpg -a --clearsign --not-dash-escaped DATEI</command>
     </li>
     <li>
Der öffentliche Schlüssel des Schlüsselpaares muss im Schlüsselring
(<path>HOME/.gnupg/pubkey.gpg</path>) des Benutzers sein, mit dessen Rechten
Samhain läuft - in der Regel also
<ref chapter="nutzer_unter_linux" iref="root">root</ref>.
     </li>
     <li>
Zur Überprüfung kann man als Benutzer
<ref chapter="nutzer_unter_linux" iref="root">root</ref> mit dem Befehl
<command>/pfad/zu/gpg --status-fd 1 --verify DATEI</command> die Signatur
überprüfen. Wenn das nicht klappt, wird Samhain auch keinen Erfolg haben ...
     </li>
    </ul>
   
    <textblock>
Zur Verifikation der Signatur muss Samhain mit der entsprechenden Option
übersetzt sein: <command>./configure --with-gpg=/PFAD_ZU_GPG</command>.
    </textblock>

    <textblock>
Es empfiehlt sich, den Fingerabdruck des verwendeten GnuPG-Schlüssels mit
anzugeben, damit Samhain auch überprüfen kann, ob der korrekte Schlüssel
zum Signieren verwendet wurde.
    </textblock>

    <textblock>
Weiterhin ist es möglich, die TIGER192-Prüfsumme des GnuPG-Programmes mit
anzugeben. Dies schließt die Lücke, dass ein Einbrecher die Samhain-Datenbank
modifizieren könnte, und außerdem das GnuPG-Programmes austauschen könnte, um zu
verbergen, dass die Signatur nicht mehr gültig ist. Der Nachteil dabei ist, dass
Samhain neu übersetzt werden muss, wenn GnuPG aktualisiert wird. Die
TIGER192-Prüfsumme lässt sich berechnen mit
<command>gpg --load-extension tiger --print-md TIGER192 /usr/bin/gpg</command>
oder mit <command>samhain -H /usr/bin/gpg</command>; die komplette Ausgabe
sollte angegeben werden:
    </textblock>
   
    <shell>
     <root>
./configure --with-gpg=/usr/bin/gpg \
--with-checksum="/usr/bin/gpg: 1C739B6A F768C949 FABEF313 5F0B37F5 22ED4A27 60D59664" \
--with-fp="EF6C EF54 701A 0AFD B86A F4C3 1AAD 26C8 0F57 1F6C"
     </root>
    </shell>
   </section>
   
   <section>
    <heading>
Stealth (versteckter Modus)
    </heading>
    
    <textblock>
Samhain unterstützt die Möglichkeit, auf versteckte Weise zu arbeiten. Dabei
gibt es beim Übersetzen der Quellen die folgenden Optionen:
    </textblock>
    
    <ul>
     <li>
Mit <command>--enable-install-name=NAME</command> wird nicht nur der Name des
Programmes geändert; auch alle Verzeichnisse und Dateien, die diesen Namen
enthalten (<path>/var/lib/samhain/</path>, <path>/etc/samhainrc</path>, ...)
werden bei der Installation unter geändertem Namen angelegt.
     </li>
     <li>
Mit <command>--enable-nocl[=XYZ]</command> wird die Interpretation von Optionen
auf der Kommandozeile verhindert. Das optionale Argument XYZ ist ein
<strong>magisches Wort</strong>, das es ermöglicht, Kommandozeilen-Argumente von
stdin zu lesen, z. B.: <command>echo -- --help | samhain XYZ</command>
     </li>
     <li>
Mit <command>--enable-micro-stealth=ZAHL</command> (ZAHL muss ganzzahlig und im
Bereich 127 bis 255 sein) werden alle Zeichenketten in den Quellen so verändert,
dass sie nicht mehr mit dem Befehl <command>strings</command> sichtbar werden.
Dies soll verhindern, dass ein Einbrecher nach Samhain suchen kann mit z. B. dem
Befehl: <command>strings /usr/local/sbin/* | grep samhain</command>.
     </li>
     <li>
Mit <command>--enable-stealth=ZAHL</command> (ZAHL muss ganzzahlig und im
Bereich 127 bis 255 sein) anstelle von
<command>--enable-micro-stealth=ZAHL</command> werden auch Zeichenketten in der
Logdatei und in der Samhain-Datenbank entsprechend verändert. Weiterhin erwartet
Samhain nun, dass die Konfigurationsdatei steganographisch in einem Bild
versteckt ist. Das Bild muss in unkomprimiertem Postskript-Format vorliegen;
dieses Format kann z. B.
mit <command>convert +compress bild.jpg bild.ps</command> erzeugt werden. Ein
Hilfsprogramm <command>samhain_stealth</command> steht zur Verfügung, um die
Konfigurationsdatei zu verstecken:
<command>samhain_stealth -s bild.ps konfigurationsdatei</command> zum Verstecken,
<command>samhain_stealth -g bild.ps</command>, um die versteckte Datei wieder zu
sehen.
     </li>
     <li>
Mit <command>--enable-khide=/boot/System.map-$(uname -r)</command> (das Argument
ist also die System.map-Datei, die zum Kernel gehört) wird ein Kernel-Modul
erzeugt, das beim Laden alle Prozesse und Dateien versteckt, die die
Zeichenkette <command>samhain</command> enthalten, bzw. die Zeichenkette 
<command>NAME</command>, wenn die Option
<command>--enable-install-name=NAME</command> benutzt wurde, um Samhain unter
einem anderen Namen zu installieren.
     </li>
    </ul>
    
    <textblock>
Offensichtlich ist es nicht möglich, die Logdatei einfach mit
<command>more</command> oder <command>less</command> anzusehen, wenn die Option
<command>--enable-stealth=ZAHL</command> benutzt wird. Stattdessen kann man die
Datei mit <command>samhain -jL /pfad/zur/logdatei | less</command> ansehen.
    </textblock>
   </section>
   
   <section>
    <heading>
Überwachung des Kernels
    </heading>
    
    <textblock>
Samhain kann die Integrität des Kernels überwachen, also prüfen, ob der Kernel
zur Laufzeit z. B. durch Laden eines Rootkit-Moduls verändert wurde. Hierzu ist
es notwendig, beim Übersetzen der Quellen die Option
<command>--with-kcheck=/boot/System.map-$(uname -r)</command> anzugeben (d. h.
das Argument ist die zum Kernel passende System.map-Datei).
    </textblock>

    <textblock>
Mit dem Standard-Kernel neuerer Fedora Core-Systeme ist diese Option nicht
verfügbar, da durch einen Kernel-Patch die Datei  /dev/kmem nicht mehr lesbar
(oder beschreibbar) ist.
    </textblock>
   </section>
   
   <section>
    <heading>
Überwachung von Login/Logout-Vorgängen
    </heading>
    
    <textblock>
Wird Samhain mit der Option <command>--enable-login-watch</command> übersetzt,
so ist es möglich, Login/Logout-Vorgänge zu überwachen. D. h. es wird eine
Nachricht geschickt, wenn ein solcher Vorgang stattfindet.
    </textblock>

    <textblock>
Diese Funktion beruht auf der Überwachung der 
<ref chapter="grundlagen_sicherheit" iref="Überwachung der Verbindungen (Login / Connection Accounting)">wtmp</ref>-Datei
in regelmäßigen Abständen (standardmäßig 300 Sekunden).
    </textblock>
   </section>
   
   <section>
    <heading>
Suche nach SUID/SGID-Dateien
    </heading>
    
    <textblock>
Wenn Samhain mit der Option <command>--enable-suidcheck</command> übersetzt ist,
so ist es möglich, das gesamte Dateisystem regelmäßig nach Dateien zu
durchsuchen, bei denen das SUID- oder SGID-Bit gesetzt ist, und neu entdeckte
Dateien dieser Art zu melden.
    </textblock>
   </section>
  </section>
 </split>
 
 <split>
  <section>
   <heading>
Optionen in der Konfigurationsdatei
   </heading>
   
   <textblock>
Standardmäßig heißt die Konfigurationsdatei <path>/etc/samhainrc</path>
(Samhain) bzw. <path>/etc/yulerc</path> (Yule).
   </textblock>
   
   <textblock>
Die Konfigurationsdatei besteht aus einzelnen Sektionen, die jeweils mit einer
Überschrift in der Form <strong>[Sektionsname]</strong> eingeleitet werden.
Zeilen, die mit <strong>#</strong> beginnen, sind Kommentare und werden
ignoriert.
   </textblock>
   
   <textblock>
Optionen haben die Form <command>Optionsname = Wert</command>; dabei sind
Leerzeichen vor und nach dem Gleichheitszeichen optional.
   </textblock>
   
   <textblock>
Alles, was vor der ersten Sektion und nach einem <strong>[EOF]</strong> steht,
wird ignoriert. Es ist nicht generell notwendig, die Datei mit
<strong>[EOF]</strong> abzuschließen, aber empfehlenswert, wenn am Ende der
Datei Dinge stehen, die nicht als Optionen interpretiert werden sollen (z. B.
eine GnuPG-Signatur, siehe Abschnitt
<ref iref="Signierte Datenbank- und Konfigurationsdateien">Signierte Datenbank- und Konfigurationsdateien</ref>).
   </textblock>
   
   <textblock>
Manche Optionen sind nur relevant, wenn Samhain bzw. Yule mit Unterstützung für
entsprechende Möglichkeiten übersetzt wurde. Falls eine solche Option dennoch
benutzt wird, erfolgt eine Warnung beim Lesen der Konfigurationsdatei.
   </textblock>
   
   <section>
    <heading>
Bedingte Anweisungen
    </heading>
    
    <textblock>
Bedingte Anweisungen ermöglichen es, in die Konfigurationsdatei Optionen zu
schreiben, die nur auf bestimmten Rechnern interpretiert (und sonst ignoriert)
werden.
    </textblock>

    <textblock>
Die Bedingung kann entweder der Name des Rechners sein, oder das Tripel
<strong>Betriebssystem:Version:Hardware</strong>, das man mit
<command>uname -srm</command> erhält. Durch Voranstellen eines Ausrufezeichens
kann die Bedingung invertiert werden.
    </textblock>
   
    <file>
     <title>
/etc/samhainrc
     </title>
     <content>
@abc.example.com                                   
# Wird nur gelesen wenn 'abc.example.com' der Name dieses Rechners ist
@end                                              

!@abc.example.com
# Wird nicht gelesen wenn 'abc.example.com' der Name dieses Rechners ist
@end                                              
 
$Linux:2.4.26:i686                                   
# Wird nur auf Rechnern gelesen, auf denen 
# 'uname -srm' "Linux 2.4.26 i686" ausgibt
$end 

!$Linux:2.4.26:i686
# Wird nicht auf Rechnern gelesen, auf denen
# 'uname -srm' "Linux 2.4.26 i686" ausgibt
$end
     </content>
    </file>
   </section>
  
   <section>
    <heading>
Überwachte Dateien
    </heading>
    
    <textblock>
Die möglichen Sektionsnamen sind hier: [Attributes], [LogFiles],
[GrowingLogFiles], [IgnoreAll], [IgnoreNone], [ReadOnly], [User0], [User1],
und [Prelink].
    </textblock>

    <textblock>
Jede dieser Sektionen entspricht einer gleichnamigen
<ref iref="Vordefinierte Policys">Policy</ref> zur Überwachung der Dateien in
der betreffenden Sektion.
    </textblock>

    <textblock>
Jede dieser Sektionen kann beliebig viele Einträge der Form
<command>file = /absoluter/pfad/zur/datei</command> und
<command>dir = optionale_rekursionstiefe/absoluter/pfad/zum/verzeichnis</command>
haben; dabei ist <strong>optionale_rekursionstiefe</strong> die
<ref iref="Rekursionstiefe">Rekursionstiefe</ref>
für das betreffende Verzeichnis (maximal 99).
    </textblock>
    
    <file>
     <title>
/etc/samhainrc
     </title>
     <content>
[ReadOnly]
dir = /bin
dir = /sbin
dir = /usr/bin
dir = /usr/sbin
dir = 2/boot

file = /etc/motd

[GrowingLogFiles]
file = /var/log/messages
file = /var/log/mail
     </content>
    </file>
   </section>
   
   <section>
    <heading>
Dringlichkeitsstufe von Ereignissen
    </heading>
    
    <textblock>
In einer Sektion, die mit <strong>[EventSeverity]</strong> eingeleitet wird, ist
es möglich, die Dringlichkeitsstufe mancher Ereignisse anzupassen. Mögliche
Dringlichkeitsstufen sind: none (nichts loggen), debug (niedrigste Stufe),
info, notice, warn, mark, err, crit, alert (höchste Stufe).
    </textblock>

    <textblock>
Mögliche Ereignisse sind hier:
    </textblock>
    
    <ul>
     <li>
Veränderungen von überwachten Dateien unter den verschiedenen Policys
(Optionen SeverityReadOnly, SeverityLogFiles, SeverityGrowingLogs,
SeverityIgnoreNone, SeverityIgnoreAll, SeverityUser0, SeverityUser1,
SeverityPrelink)
     </li>
     <li>
Zugriffsfehler bei Dateien (Option SeverityFiles)
     </li>
     <li>
Zugriffsfehler bei Verzeichnissen (Option SeverityDirs)
     </li>
     <li>
Seltsame Dateinamen, verwaiste Dateien (Option SeverityNames)
     </li>
    </ul>
    
    <file>
     <title>
/etc/samhainrc>
     </title>
     <content>
[EventSeverity]
# 
# Überwachte Dateien (für die Bedeutung von 'ReadOnly',
# 'LogFiles', usw. siehe Abschnitt Konfiguration der Integritätseigenschaften innerhalb des Dateisystems).
#
SeverityReadOnly=crit
SeverityLogFiles=crit
SeverityGrowingLogs=warn
SeverityIgnoreNone=crit
SeverityIgnoreAll=info
#
# Zugriffsfehler für Dateien (Files) und Directories (Dirs)
#
SeverityFiles=err
SeverityDirs=err
#
# Dateinamen, ungültige UIDS/GIDs
#
SeverityNames=info
     </content>
    </file>
   </section>
   
   <section>
    <heading>
Filter für Log-Möglichkeiten
    </heading>
    
    <textblock>
In einer Sektion, die mit <strong>[Log]</strong> eingeleitet wird, wird
definiert, was zu welcher Log-Möglichkeiten geloggt werden soll. D. h., es
werden die gewünschten 
<ref iref="Levels (Dringlichkeitsstufen)">Dringlichkeitsstufen</ref> 
und eventuell <ref iref="Ereignisklassen">Ereignisklassen</ref> eingestellt.
    </textblock>

    <textblock>
Mögliche Optionen für Dringlichkeitsstufen sind: MailSeverity (Email),
PrintSeverity (Konsole), LogSeverity (Logdatei), SyslogSeverity (Syslog),
PreludeSeverity (Prelude), ExportSeverity (logging zu Yule), ExternalSeverity
(externe Skripte), DatabaseSeverity (logging zu relationaler Datenbank).
    </textblock>

    <textblock>
Die zuweisbaren Dringlichkeitsstufen sind: none (kein Logging),  debug
(niedrigste Stufe), info, notice, warn, mark, err, crit, alert (höchste Stufe).
    </textblock>

    <textblock>
Mögliche Optionen für Ereignisklassen (Standard ist alle) sind: MailClass
(Email), PrintClass (Konsole), LogClass (Logdatei), SyslogClass (Syslog),
PreludeClass (Prelude), ExportClass (logging zu Yule), ExternalClass
(externe Skripte), DatabaseClass (logging zu relationaler Datenbank).
    </textblock>

    <textblock>
Das Argument ist eine Liste (mit Komma oder Leerzeichen getrennt) von
zugelassenen Ereignisklassen:
    </textblock>
    
    <table>
     <pdf-column width="100"/>
     <pdf-column/>
     <tr>
      <td>
EVENT
      </td>
      <td>
Überwachte Ereignisse (z.B. Änderungen einer Datei)
      </td>
     </tr>
     <tr>
      <td>
START
      </td>
      <td>
Start/Stopp-Meldungen
      </td>
     </tr>
     <tr>
      <td>
STAMP
      </td>
      <td>
Zeitmarken
      </td>
     </tr>
     <tr>
      <td>
LOGKEY
      </td>
      <td>
Der Schlüssel zur Verifikation der Log-Datei (siehe Abschnitt
<ref iref="Verifikation der lokalen Log-Datei">Verifikation der lokalen Log-Datei</ref>)
      </td>
     </tr>
     <tr>
      <td>
ERROR
      </td>
      <td>
Fehlermeldungen
      </td>
     </tr>
     <tr>
      <td>
OTHER
      </td>
      <td>
Alles andere (z.B. detaillierte Informationen)
      </td>
     </tr>
     <tr>
      <td>
AUD
      </td>
      <td>
System-Aufrufe (für Fehlersuche)
      </td>
     </tr>
    </table>
    
    <file>
     <title>
/etc/samhainrc
     </title>
      <content>
[Log]

MailSeverity = alert
PrintSeverity = mark
LogSeverity = notice
LogClass = EVENT, START, STAMP, ERROR
SyslogSeverity = err
     </content>
    </file>
   </section>
   
   <section>
    <heading>
Überwachung von Login/Logout-Ereignissen
    </heading>
    
    <textblock>
In der Sektion <strong>[Utmp]</strong> werden Optionen für die Überwachung von
Login/Logout-Ereignissen gesetzt.
    </textblock>
    
    <table>
     <pdf-column width="200"/>
     <pdf-column/>
     <tr>
      <td>
LoginCheckActive = yes|no
      </td>
      <td>
<strong>yes</strong> zum Einschalten, <strong>no</strong> zum Ausschalten
      </td>
     </tr>
     <tr>
      <td>
LoginCheckInterval = Sekunden
      </td>
      <td>
Intervall zwischen Überprüfungen
      </td>
     </tr>
     <tr>
      <td>
SeverityLogin = Level
      </td>
      <td>
Level/Dringlichkeitsstufe für Login-Ereignis
      </td>
     </tr>
     <tr>
      <td>
SeverityLoginMulti = Level
      </td>
      <td>
Level/Dringlichkeitsstufe für  mehrfaches Login
      </td>
     </tr>
     <tr>
      <td>
SeverityLogout = Level
      </td>
      <td>
Level/Dringlichkeitsstufe für Logout-Ereignis
      </td>
     </tr>
    </table>
    
    <file>
     <title>
/etc/samhainrc
     </title>
     <content>
[Utmp]
#
LoginCheckActive = yes
LoginCheckInterval = 10
SeverityLogin = crit
SeverityLoginMulti = crit
SeverityLogout = notice
     </content>
    </file>
   </section>
   
   <section>
    <heading>
Überprüfung des Kernels
    </heading>
    
    <textblock>
In der Sektion <strong>[Kernel]</strong> werden Optionen zur Überprüfung des
Kernels gesetzt. Die folgenden Optionen stehen zur Verfügung:
    </textblock>
    
    <table>
     <pdf-column width="200"/>
     <pdf-column/>
     <tr>
      <td>
KernelCheckActive = yes|no
      </td>
      <td>
<strong>yes</strong> zum Einschalten, <strong>no</strong> zum Ausschalten
      </td>
     </tr>
     <tr>
      <td>
KernelCheckInterval = Sekunden
      </td>
      <td>
Intervall zwischen Überprüfungen
      </td>
     </tr>
     <tr>
      <td>
KernelCheckIDT = yes|no
      </td>
      <td>
Auch Kernel Interrupt Descriptor Table prüfen ? Standard ist ja (yes).
      </td>
     </tr>
     <tr>
      <td>
SeverityKernel = Level
      </td>
      <td>
Level/Dringlichkeitsstufe für Ereignis
      </td>
     </tr>
    </table>
    
    <textblock>
Die folgenden Optionen sind nur notwendig, wenn der Kernel neu übersetzt wurde
(auch wenn die Version gleich geblieben ist !). Das Argument
<strong>Adresse</strong> ist eine hexadezimale Zahl, mit der die Zeile beginnt,
die der jeweils angegebene <command>grep</command>-Befehl ausgibt. Die Zahl
sollte mit dem Präfix <strong>0x</strong> versehen werden.
    </textblock>
    
    <table>
     <pdf-column width="200"/>
     <pdf-column/>
     <tr>
      <td>
KernelSystemCall = Adresse
      </td>
      <td>
Adresse der system_call Funktion (<command>grep system_call System.map</command>)
      </td>
     </tr>
     <tr>
      <td>
KernelSyscallTable = Adresse
      </td>
      <td>
Adresse der sys_call_table Tabelle (<command>grep sys_call_table System.map</command>)
      </td>
     </tr>
     <tr>
      <td>
KernelProcRoot = Adresse
      </td>
      <td>
Adresse der proc_root Funktion (<command>grep proc_root$ System.map</command>)
      </td>
     </tr>
     <tr>
      <td>
KernelProcRootIops = Adresse
      </td>
      <td>
Adresse der proc_root_inode_operations Funktion (<command>grep proc_root_inode_operations System.map</command>)
      </td>
     </tr>
     <tr>
      <td>
KernelProcRootLookup = Adresse
      </td>
      <td>
Adresse der proc_root_lookup Funktion (<command>grep proc_root_lookup System.map</command>)
      </td>
     </tr>
    </table>
    
    <file>
     <title>
/etc/samhainrc
     </title>
     <content>
[Kernel]
KernelCheckActive=yes
KernelCheckInterval=20
KernelCheckIDT=yes
SeverityKernel=crit
#
KernelSystemCall = 0xc0106cf8
KernelSyscallTable = 0xc01efb98
KernelProcRoot = 0xc01efb98
KernelProcRootIops = 0xc01efb98
KernelProcRootLookup = 0xc01efb98
     </content>
    </file>
   </section>
   
   <section>
    <heading>
Suchen nach SUID/SGID-Dateien
    </heading>
    
    <textblock>
Die Suche nach SUID/SGID-Dateien wird konfiguriert in einer Sektion, die mit
<strong>[SuidCheck]</strong> eingeleitet wird. Die Optionen sind:
    </textblock>
    
    <table>
     <pdf-column width="200"/>
     <pdf-column/>
     <tr>
      <td>
SuidCheckActive = yes|no
      </td>
      <td>
<strong>yes</strong> zum Einschalten, <strong>no</strong> zum Ausschalten
      </td>
     </tr>
     <tr>
      <td>
SeveritySuidCheck= Level
      </td>
      <td>
Level/Dringlichkeitsstufe für Ereignis
      </td>
     </tr>
     <tr>
      <td>
SuidCheckInterval = Sekunden
      </td>
      <td>
Intervall zwischen Überprüfungen
      </td>
     </tr>
     <tr>
      <td>
SuidCheckSchedule = Zeitplan
      </td>
      <td>
Zeitplan im <ref chapter="cron" iref="cron Konfiguration">crontab</ref>-Stil
      </td>
     </tr>
     <tr>
      <td>
SuidCheckExclude = /path
      </td>
      <td>
Optional ein Verzeichnis, das ausgelassen werden soll
      </td>
     </tr>
     <tr>
      <td>
SuidCheckFps = Anzahl
      </td>
      <td>
Optional die maximale Anzahl Dateien/Sekunde, die überprüft werden sollen
      </td>
     </tr>
    </table>

    <textblock>
Es kann entweder SuidCheckInterval oder SuidCheckSchedule angegeben werden, aber
beides gleichzeitig ist sinnlos.
    </textblock>
    
    <file>
     <title>
/etc/samhainrc
     </title>
     <content>
[SuidCheck]
SuidCheckActive = yes
SuidCheckSchedule=0 * * * *
SeveritySuidCheck=crit
     </content>
    </file>
   </section>
   
   <section>
    <heading>
Logging zu einer relationalen Datenbank
    </heading>
    
    <textblock>
Sofern man zu einer Datenbank loggen möchte, z.B. zu einer
MySQL- oder
<ref chapter="postgresql">PostgreSQL-</ref> - Datenbank, muss der Zugriff auf
die Datenbank konfiguriert werden. Dies erfolgt in der
<strong>[Database]</strong>-Sektion. Die Optionen sind:
    </textblock>
    
    <table>
     <pdf-column width="200"/>
     <pdf-column/>
     <tr>
      <td>
SetDBHost = Rechner-Name
      </td>
      <td>
Name des Datenbank-Servers. Für PostgreSQL muss dies die numerische IP-Adresse sein.
      </td>
     </tr>
     <tr>
      <td>
SetDBName = Datenbank
      </td>
      <td>
Name der Datenbank (Standard: samhain)
      </td>
     </tr>
     <tr>
      <td>
SetDBTable = Tabelle
      </td>
      <td>
Name der Tabelle (Standard: log)
      </td>
     </tr>
     <tr>
      <td>
SetDBUser = Benutzer
      </td>
      <td>
Als <strong>Benutzer</strong> anmelden (Standard: samhain)
      </td>
     </tr>
     <tr>
      <td>
SetDBPassword = Passwort
      </td>
      <td>
Beim Anmelden <strong>Passwort</strong> benutzen
      </td>
     </tr>
     <tr>
      <td>
UsePersistent = yes|no
      </td>
      <td>
<strong>yes</strong> für dauerhafte Verbindung zur Datenbank
      </td>
     </tr>
     <tr>
      <td>
SetDBServerTstamp = yes|no
      </td>
      <td>
(nur Yule) Diese Option sagt dem Server, ob er eigene Zeitstempel für
Nachrichten von Samhain loggen soll (yes) oder nicht (no)
      </td>
     </tr>
    </table>
    
    <file>
     <title>
/etc/samhainrc
     </title>
     <content>
[Database]
SetDBHost = mysql.example.com
SetDBName = samhain
SetDBTable = log
SetDBUser = samhain
SetDBPassword = jsabfkej
UsePersistent = no
     </content>
    </file>
   </section>
   
   <section>
    <heading>
Verschiedenes
    </heading>
    
    <textblock>
In der Sektion <strong>[Misc]</strong> finden sich verschiedene weitere Optionen:
    </textblock>
    
    <table>
     <pdf-column width="200"/>
     <pdf-column/>
     <tr>
      <td>
Daemon = yes|no
      </td>
      <td>
Als Dämon laufen (yes = ja)
      </td>
     </tr>
     <tr>
      <td>
ChecksumTest = none|init|update|check
      </td>
      <td>
Die Standard-Handlung, wenn nicht auf der Kommandozeile angegeben
(keine|Datenbank initialisieren|Datenbank aktualisieren|mit Datenbank vergleichen).
Standard ist <strong>none</strong>
      </td>
     </tr>
     <tr>
      <td>
VersionString = Zeichenkette
      </td>
      <td>
In der Datenbank <strong>Zeichenkette</strong> zum Markieren der Version
einsetzen (zusammen mit Rechner-Name und Zeitstempel)
      </td>
     </tr>
     <tr>
      <td>
SetNiceLevel = -19..19
      </td>
      <td>
Priorität des Prozesses für Dateiprüfung setzen (-19 = höchste, 19 = niedrigste)
      </td>
     </tr>
     <tr>
      <td>
SetIOLimit = kbps
      </td>
      <td>
Datenrate (Kilobytes pro Sekunde) begrenzen.
      </td>
     </tr>
     <tr>
      <td>
SetLoopTime = Sekunden
      </td>
      <td>
Intervall zwischen geloggten Zeitstempeln
      </td>
     </tr>
     <tr>
      <td>
SetFilecheckTime = Sekunden
      </td>
      <td>
Intervall zwischen Dateiprüfungen (Standard: 600)
      </td>
     </tr>
     <tr>
      <td>
FileCheckScheduleOne = Plan
      </td>
      <td>
Zeitplan im crontab-Stil für Dateiprüfungen (alternativ zu SetFilecheckTime)
      </td>
     </tr>
     <tr>
      <td>
UseHardlinkCheck = yes|no
      </td>
      <td>
Anzahl Hardlinks für Verzeichnisse prüfen (yes = ja, no = nein)
      </td>
     </tr>
     <tr>
      <td>
HardlinkOffset=N:/Pfad
      </td>
      <td>
Ausnahme für Hardlink-Prüfung. N ist der Unterschied (tatsächliche - erwartet)
für /Pfad.
      </td>
     </tr>
     <tr>
      <td>
AddOKChars = N1, N2, ..
      </td>
      <td>
Liste der akzeptablen Zeichen (Byte-Werte) für den Test auf seltsame Dateinamen.
Nn muß entweder hexadezimal (führendes <strong>0x</strong>: 0xNN), oktal
(führende Null: 0NNN), oder dezimal sein. Mit <strong>all</strong> als Argument
wird der Test ausgeschaltet.
      </td>
     </tr>
     <tr>
      <td>
IgnoreAdded = /regex
      </td>
      <td>
Ignorieren, wenn die Datei <path>/regex</path> neu erzeugt wird.
<path>/regex</path> kann ein regulärer Ausdruck sein, und muss einen absoluten
Pfad bezeichnen.
      </td>
     </tr>
     <tr>
      <td>
IgnoreMissing = /regex
      </td>
      <td>
Ignorieren, wenn die Datei <path>/regex</path> gelöscht wird.
<path>/regex</path> kann ein regulärer Ausdruck sein, und muss einen absoluten
Pfad bezeichnen.
      </td>
     </tr>
     <tr>
      <td>
ReportOnlyOnce = yes|no
      </td>
      <td>
Jede Dateiveränderung nur einmal berichten (Standard: yes = ja)
      </td>
     </tr>
     <tr>
      <td>
ReportFullDetail = yes|no
      </td>
      <td>
Alle Details zu einer veränderten Datei berichten (Standard: no = nein)
      </td>
     </tr>
     <tr>
      <td>
UseLocalTime = yes|no
      </td>
      <td>
Zeitstempel für Dateien in lokaler Zeit statt GMT berichten. Diese Option sollte
nicht benutzt werden, wenn Beltane eingesetzt wird.
      </td>
     </tr>
     <tr>
      <td>
SetConsole = Gerät
      </td>
      <td>
Das Konsolen-Gerät bestimmen (Standard: /dev/console).
      </td>
     </tr>
     <tr>
      <td>
MessageQueueActive = yes|no
      </td>
      <td>
Die System V IPC message queue benutzen (Standard: no = nein).
      </td>
     </tr>
     <tr>
      <td>
SetMailTime = Sekunden
      </td>
      <td>
Maximale Zeitspanne zwischen Email-Nachrichten (Standard: 86400).
      </td>
     </tr>
     <tr>
      <td>
SetMailNum = 0..127
      </td>
      <td>
Maximale Anzahl wartender Emails in interner Warteschlange.
      </td>
     </tr>
     <tr>
      <td>
SetMailAddress = Empfänger
      </td>
      <td>
Einen Email-Empfänger hinzufügen (maximal 8).
      </td>
     </tr>
     <tr>
      <td>
SetMailRelay = IP-Adresse
      </td>
      <td>
Einen Relay-Rechner für Email festlegen.
      </td>
     </tr>
     <tr>
      <td>
MailSubject = Zeichenkette
      </td>
      <td>
Eigenes Format für die Betreff-Zeile definieren.
      </td>
     </tr>
     <tr>
      <td>
SamhainPath = /Pfad
      </td>
      <td>
Pfad des Programmes. Falls diese Option benutzt wird, wird die Prüfsumme beim
Programmende mit derjenigen zum Programmstart verglichen.
      </td>
     </tr>
     <tr>
      <td>
SetBindAddress = IP-Adresse
      </td>
      <td>
IP-Adresse (Netzwerk-Karte) für ausgehende Verbindungen (auf Maschinen mit
mehreren IP-Adressen).
      </td>
     </tr>
     <tr>
      <td>
SetTimeServer = IP-Adresse
      </td>
      <td>
Optionaler Zeitdienst. Es wird das einfache <strong>time</strong>-Protokoll
(37/tcp) benutzt.
      </td>
     </tr>
     <tr>
      <td>
MessageHeader="\%S \%T \%F \%L \%C"
      </td>
      <td>
Benutzerdefiniertes Format für den Mail-Header
      </td>
     </tr>
     <tr>
      <td>
SyslogFacility = LOG_xxx
      </td>
      <td>
Welche syslog-Facility soll benutzt werden (Standard: LOG_AUTHPRIV)
      </td>
     </tr>
     <tr>
      <td>
HideSetup = yes|no
      </td>
      <td>
Beim Start keine Namen von Datenbank und Konfigurations-Dateien loggen
      </td>
     </tr>
     <tr>
      <td>
TrustedUser = user1, ...
      </td>
      <td>
Liste zusätzlicher vertrauenswürdiger Benutzer
      </td>
     </tr>
     <tr>
      <td>
SetDatabasePath = AUTO|/Pfad
      </td>
      <td>
Pfad zur Datenbank (AUTO um Rechner-Namen an Standard-Pfad anzuhängen)
      </td>
     </tr>
     <tr>
      <td>
SetLogfilePath = AUTO|/Pfad
      </td>
      <td>
Pfad zur Log-Datei (AUTO um Rechner-Namen an Standard-Pfad anzuhängen)
      </td>
     </tr>
     <tr>
      <td>
SetLockfilePath = AUTO|/Pfad
      </td>
      <td>
Pfad zur Lock-Datei, die den Zugriff zur Log-Datei blockiert (AUTO um
Rechner-Namen an Standard-Pfad anzuhängen)
      </td>
     </tr>
     <tr>
      <td>
DigestAlgo = SHA1|MD5
      </td>
      <td>
SHA1 oder MD5 anstelle von TIGER192 als Prüfsummenalgorithmus benutzen
(Standard: TIGER192)
      </td>
     </tr>
     <tr>
      <td>
RedefReadOnly = +XXX|-XXX
      </td>
      <td>
Den Test XXX zur Policy <strong>ReadOnly</strong> hinzufügen bzw. von dieser
wegnehmen (Liste möglich).
      </td>
     </tr>
     <tr>
      <td>
RedefAttributes= +XXX|-XXX
      </td>
      <td>
Den Test XXX zur Policy <strong>Attributes</strong> hinzufügen bzw. von dieser
wegnehmen (Liste möglich).
      </td>
     </tr>
     <tr>
      <td>
RedefLogFiles= +XXX|-XXX
      </td>
      <td>
Den Test XXX zur Policy <strong>LogFiles</strong> hinzufügen bzw. von dieser
wegnehmen (Liste möglich).
      </td>
     </tr>
     <tr>
      <td>
RedefGrowingLogFiles = +XXX|-XXX
      </td>
      <td>
Den Test XXX zur Policy <strong>GrowingLogFiles</strong> hinzufügen bzw. von
dieser wegnehmen (Liste möglich).
      </td>
     </tr>
     <tr>
      <td>
RedefIgnoreAll = +XXX|-XXX
      </td>
      <td>
Den Test XXX zur Policy <strong>IgnoreAll</strong> hinzufügen bzw. von dieser
wegnehmen (Liste möglich).
      </td>
     </tr>
     <tr>
      <td>
RedefIgnoreNone= +XXX|-XXX
      </td>
      <td>
Den Test XXX zur Policy <strong>IgnoreNone</strong> hinzufügen bzw. von dieser
wegnehmen (Liste möglich).
      </td>
     </tr>
     <tr>
      <td>
RedefUser0 = +XXX|-XXX
      </td>
      <td>
Den Test XXX zur Policy <strong>User0</strong> hinzufügen bzw. von dieser
wegnehmen (Liste möglich).
      </td>
     </tr>
     <tr>
      <td>
RedefUser1 = +XXX|-XXX
      </td>
      <td>
Den Test XXX zur Policy <strong>User1</strong> hinzufügen bzw. von dieser
wegnehmen (Liste möglich).
      </td>
     </tr>
     <tr>
      <td>
SetLogServer = IP-Adresse
      </td>
      <td>
Adresse des Log-Servers
      </td>
     </tr>
     <tr>
      <td>
MACType=HASH-TIGER|HMAC-TIGER
      </td>
      <td>
Die Art der Authentifizierungs-Codes wählen. Falls diese Option benutzt wird,
muss für Yule und Samhain derselbe Wert gesetzt sein. Standard ist HMAC-TIGER.
      </td>
     </tr>
     <tr>
      <td>
SetReverseLookup = yes|no
      </td>
      <td>
Wenn nein (no), dann keinen reverse DNS-Lookup durchführen, wenn Verbindung zu
einem Rechner hergestellt wird, der mit Namen statt IP-Adresse angegeben ist.
      </td>
     </tr>
    </table>
    
    <textblock>
Die folgenden Optionen sind nur relevant für den Log-Server (Yule).
    </textblock>
    
    <table>
     <pdf-column width="200"/>
     <pdf-column/>
     <tr>
      <td>
SetClientFromAccept = yes|no
      </td>
      <td>
Wenn ja (yes), dann die Adresse des Clients benutzen, wie sie dem Kernel bekannt
ist (kann falsch sein, wenn z. B. NAT-Router en route). Sonst (Standard) den
Namen benutzen, den der Client bekanntgibt, gegen die IP-Adresse prüfen, und
immer akzeptieren (mit einer Warnung, wenn die Prüfung fehlschlägt).
      </td>
     </tr>
     <tr>
      <td>
SeverityLookup = Level
      </td>
      <td>
Level/Dringlichkeitsstufe für Meldung, wenn die oen erwähnte Prüfung fehlschlägt.
      </td>
     </tr>
     <tr>
      <td>
UseClientSeverity = yes|no
      </td>
      <td>
Wenn ja (yes), Nachrichten von Samhain nicht mit spezieller Dringlichkeitsstufe
loggen.
      </td>
     </tr>
     <tr>
      <td>
UseClientClass = yes|no
      </td>
      <td>
Wenn ja (yes), Nachrichten von Samhain nicht mit spezieller Ereignisklasse loggen.
      </td>
     </tr>
     <tr>
      <td>
UseSeparateLogs = yes|no
      </td>
      <td>
Wenn ja (yes), Nachrichten von unterschiedlichen Clients nach unterschiedlichen
Log-Dateien loggen (Name des Clients wird an Standard-Pfad angehängt).
      </td>
     </tr>
     <tr>
      <td>
SetClientTimeLimit = Sekunden
      </td>
      <td>
Maximale Zeit bis zur nächsten Meldung eines Clients (bei Überschreitung Alarm).
      </td>
     </tr>
     <tr>
      <td>
SetUseSocket = yes|no
      </td>
      <td>
Wenn ja (yes), ein Unix Domain Socket öffnen, um Yule Kommandos zu übergeben,
die an Clients weitergeleitet werden sollen (wenn diese Kontakt zu Yule
aufnehmen).
      </td>
     </tr>
     <tr>
      <td>
SetSocketAllowUid = UID
      </td>
      <td>
Der Benutzer, der Kommandos über o. g. Socket absetzen kann (Standard: 0 = root)
      </td>
     </tr>
     <tr>
      <td>
SetChrootDir = /Pfad
      </td>
      <td>
Falls diese Option gesetzt ist, macht der Server nach dem Start ein
<command>chroot /Pfad</command>
      </td>
     </tr>
     <tr>
      <td>
SetStripDomain = yes|no
      </td>
      <td>
Wenn ja (yes), wird der Name des Clients ohne die Domäne geloggt (Standard: ja)
      </td>
     </tr>
     <tr>
      <td>
SetUDPActive = yes|no
      </td>
      <td>
Auch auf 514/udp (syslog port) auf Nachrichten von syslog-Dämonen warten
      </td>
     </tr>
    </table>
   </section>
   
   <section>
    <heading>
Externe Skripte
    </heading>
    
    <textblock>
In der Sektion <strong>[External]</strong> ist es möglich, externe Skripte oder
Programme zu definieren, die zum Loggen benutzt werden können. Das
Skript/Programm erhält jeweils eine Zeile mit Informationen, gefolgt von einer
weiteren Zeile mit <strong>[EOF]</strong>. Die Optionen sind:
    </textblock>
    
    <table>
     <pdf-column width="200"/>
     <pdf-column/>
     <tr>
      <td>
OpenCommand=/Pfad/zum/Skript
      </td>
      <td>
Beginnt einen Definitions-Block
      </td>
     </tr>
     <tr>
      <td>
SetType = log|srv
      </td>
      <td>
Mit <strong>log</strong> wird das Programm als Log-Möglichkeit definiert; mit
<strong>srv</strong> (nur Yule) wird es aufgerufen, wenn sich der Status eines
Clients ändert.
      </td>
     </tr>
     <tr>
      <td>
SetCommandline = Liste
      </td>
      <td>
Die Kommandozeile (also Argumente für das Skript)
      </td>
     </tr>
     <tr>
      <td>
SetEnviron = Variable=Wert
      </td>
      <td>
Umgebungsvariable (kann mehrfach benutzt werden)
      </td>
     </tr>
     <tr>
      <td>
SetChecksum = TIGER Prüfsumme
      </td>
      <td>
Tiger/192-Prüfsumme des Skripts (optional)
      </td>
     </tr>
     <tr>
      <td>
SetCredentials = Benutzer
      </td>
      <td>
Der Benutzer, als der das Skript ausgeführt werden soll.
      </td>
     </tr>
     <tr>
      <td>
SetFilterNot = Liste
      </td>
      <td>
Worte, die in der geloggten Nachricht nicht vorkommen sollen
      </td>
     </tr>
     <tr>
      <td>
SetFilterAnd = Liste
      </td>
      <td>
Worte, die alle in der geloggten Nachricht vorkommen müssen
      </td>
     </tr>
     <tr>
      <td>
SetFilterOr = Liste
      </td>
      <td>
Worte, von denen mindestens eines in der geloggten Nachricht vorkommen muss
      </td>
     </tr>
     <tr>
      <td>
SetDeadtime = Sekunden
      </td>
      <td>
Minimale Zeit zwischen zwei Aufrufen des Skripts
      </td>
     </tr>
     <tr>
      <td>
SetDefault = yes|no
      </td>
      <td>
Standard-Umgebung setzen (yes = ja) Die Standard-Umgebung ist: HOME aus
<path>/etc/passwd</path>, SHELL=/bin/sh, PATH=/sbin:/usr/sbin:/bin:/usr/bin
      </td>
     </tr>
    </table>
   </section>
   
   <section>
    <heading>
Clients
    </heading>
    
    <textblock>
In der <strong>[Clients]</strong>-Sektion, die nur für den Server (Yule)
relevant ist, hat jeder Samhain-Client einen Eintrag der Form:
    </textblock>
    
    <file>
     <content>
Client = Rechnername@abc@xyz
     </content>
    </file>
    
    <textblock>
<strong>Rechnername</strong> ist dabei der volle Name (üblicherweise keine
IP-Adresse), unter dem Yule den Client kennt. Falls <strong>Rechnername</strong>
falsch ist, wird Yule folgende Fehlermeldung ausgeben: <strong>Invalid
connection attempt: Not in client list</strong>, und wird in dieser
Fehlermeldung auch sagen, welchen Namen es für den Client ermittelt hat:
<strong>client="client.example.com"</strong>.
    </textblock>
   </section>
  </section>
 </split>
</chapter>
