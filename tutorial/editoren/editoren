<?xml version="1.0" encoding="iso-8859-1"?>

<chapter>

 <title>Editoren</title>

 <author>
  <name>Johnny Graber</name>
  <mailto>linux@jgraber.ch</mailto>
 </author>

 <layout>
  <name>Johnny Graber</name>
  <mailto>linux@jgraber.ch</mailto>
 </layout>

 <license>
GFDL
 </license>

 <index>editoren</index>

 <description>

  <textblock>
Editoren, genauer Texteditoren, gibt es unter Linux wie Sand am Meer. Da 
Editoren für das Arbeiten mit Computern unerlässlich sind, haben sich viele
Leute ihren eigenen geschrieben und verteilen diesen über das Web. Zudem ist
das Erstellen eines einfachen Editors eine beliebte Aufgabe zum Lernen einer 
Programmiersprache.
  </textblock>

  <textblock>
Dieses Kapitel soll es dem Leser ermöglichen, mit dem Texteditor seiner Wahl zu 
arbeiten. Da wir nicht alle Editoren beschreiben können, beschränken wir uns 
hier auf diese 5.
  </textblock>

<!--
  <ul>
   <li>
gedit
   </li>
   <li>
kwrite
   </li>
   <li>
emacs
   </li>
   <li>
vi
   </li>
   </ul>
-->

  <textblock>
Mit dieser Auswahl sind fast alle Editoren abgedeckt, da alle anderen dem einen oder
anderen davon sehr nahe kommen. Hier gibt es nun zu jedem dieser Editoren eine
Übersicht. Für kwrite, emacs und den vi folgt zusätzlich noch eine
ausführlichere Erklärung.
  </textblock>
 </description>

 <split>
  <section>
<!-- *. Kapitel-->
   <heading>	
gedit
   </heading>	
 
 
<image height="200">
  <title>gedit: Klein aber Fein</title>
  <filename>gedit.png</filename>
</image>


  <textblock>
<command>gedit</command> ist ein kleiner und schneller Editor. Wie es das G 
vermuten lässt, gehört
er zum <name>GNOME Desktop</name>. Er bietet eine einfache Möglichkeit, kürzere 
Texte zu
schreiben. Die grossen Icons bieten die wichtigsten Befehle gut erreichbar an.
Damit kann ohne langes Suchen eine Datei geöffnet, gedruckt oder gespeichert
werden. Auch die Möglichkeit, Änderungen rückgängig zu machen oder wieder
herzustellen, liegt bereit und ermöglicht einem so ein zielgerichtetes Arbeiten.
  </textblock>

  <textblock>
Da einem <command>gedit</command> nur das Auswählen einer Schriftdarstellung 
erlaubt, bemerkt man
sein  hauptsächliches Einsatzgebiet. <command>gedit</command> ist gut, um 
ASCII-Text zu bearbeiten,
er soll aber keinesfalls die Aufgaben einer Textverarbeitung übernehmen.
  </textblock>

  <textblock>
Alle Einstellungen laufen über das gleichnamige Menü. Neben der erwähnten
Einstellung für die Schrift kann man auch das Aussehen von gedit festlegen sowie
grundlegende Angaben fürs Drucken machen.
  </textblock>
  </section>
 </split>


 <split>
  <section>
<!-- *. Kapitel-->
    <heading>	
kwrite
    </heading>	
 

    <image height="200">
     <title>Der vielfältige kwrite in Aktion</title>
     <filename>kwrite.png</filename>
    </image>

    <textblock>
Nachdem ein Editor für GNOME vorgestellt wurde, folgt nun mit 
<command>kwrite</command> einer von
KDE. kwrite ist vom Funktionsumfang her gedit weit überlegen. Obwohl
oberflächlich betrachtet kein grosser Unterschied auszumachen ist, bietet
<command>kwrite</command>
zahlreiche kleine Features, wie das Hervorheben von Code und die Verwendung von
Lesezeichen.
   </textblock>

   <textblock>
Dennoch ist auch <command>kwrite</command> keine Textverarbeitung und hat, was  
das Auswählen der
Schrift betrifft, die gleichen Limits wie <command>gedit</command>. Da auch 
deutlich mehr
Einstellungen gemacht werden können, gibt es für <command>kwrite</command> bei 
Selflinux einen
zusätzlichen Text, der einen tieferen Einblick ermöglicht.
   </textblock>
  <ul>
   <li>
<ref chapter="kwrite">Das KWrite-Handbuch</ref>
   </li>
   </ul>

  </section>
 </split>


 <split>
  <section>
<!-- *. Kapitel-->
    <heading>	 
joe
    </heading>	
 

    <image height="200">
     <title>joe - nicht nur für Notfälle geeinget</title>
     <filename>joe.png</filename>
    </image>

    <textblock>
<command>joe</command> ist ein einfacher Editor für die Konsole. Er eignet sich insbesondere
für User, die sich partout nicht den <command>vi</command> aneignen wollen, aber dennoch
eine Möglichkeit suchen, von der Konsole aus einfache Bearbeitungen
an Textdateien vorzunehmen, z. B. Konfigurationsdateien zu ändern.
Mit <command>vi</command> gemeinsam hat <command>joe</command> den Vorteil, auch dann zu laufen, wenn sonst
nichts mehr geht, und die genügsamen Ansprüche an die Hardware.
Im Gegensatz zum <command>vi</command>, dessen Bedienungskonzept manchem Neuling als
recht kryptisch erscheint, ist <command>joe</command> aber etwas konventioneller.
Wieso der Name joe? joe ist ein rekursives Akronym für "Joe's Own Editor".
   </textblock>


    <textblock>
<command>joe</command> wird einfach von der Konsole aus gestartet mit 
<command>joe &lt;Dateiname&gt;</command> 
Dann erscheint der Dateiinhalt in Editierbereich.
Zum Eingeben einfach die Tastatur verwenden, der Cursor
kann mit den Cursortasten bewegt werden.
   </textblock>

    <textblock>
Mit der Tastenkombination 
 <command><keycomb mode="hold"><key>Strg</key><key>k</key></keycomb>, h</command> 
 (hintereinander betätigen)
Lässt sich ein kleiner Hilfebildschirm anzeigen,
der alle Tastenkommandos beinhaltet; sie sind selbsterklärend.
Mit <command><keycomb mode="hold"><key>ESC</key></keycomb></command> 
 und anschließendem <command>,</command> oder <command>.</command> kann durch die Hilfeseiten
vor- und zurückgeblättert werden.
   </textblock>

   <textblock>
<command>joe</command> legt von jeder geänderten Datei eine Sicherungskopie an, die aus dem
Dateinamen mit angehängtem <command>~</command> (Tilde) besteht - für alle Fälle.
   </textblock>
  </section>
 </split>



 <split>
  <section>
<!-- *. Kapitel-->
   <heading>	
emacs
   </heading>	
 

   <image height="200">
    <title>Gibt es etwas, das Emacs nicht kann?</title>
    <filename>emacs.png</filename>
   </image>

   <textblock>
Auch wenn <command>emacs</command> auf den ersten Blick nicht den Eindruck 
macht, gibt es nichts,
was er nicht kann (ausser vielleicht Kaffee kochen...). Sei es nun das Schreiben
von Texten, das Lesen von News oder der tägliche Emailbeantwortung - mit 
<command>emacs</command>
ist dies alles möglich. Wären alle diese Funktionen direkt in emacs integriert,
wäre dieser ein riesiges und schwerfälliges Monster. Daher sind die meisten
Funktionen in Plugins ausgelagert und werden nur bei Gebrauch geladen.
  </textblock>

  <textblock>
<command>emacs</command> hat eine lange Entwicklungsgeschichte. 1976 war <command>emacs</command> 
nur eine Sammlung
von Makros, daher auch der Name (Editor MACroS). <name>Richard Stallman</name> 
ist nicht nur
der Gründer von GNU, sondern auch der Vater von <command>emacs</command>. Nach 
dem Start von <name>GNU</name>
war der Verkauf von emacs, der schon damals unter der <name>GPL</name> stand, 
lange Zeit die
einzige Einnahmequelle der <name>FSF</name>.
  </textblock>

  <textblock>
Mit dem Ur-emacs hat der heutige aber kaum mehr etwas gemeinsam. Die stetige
Weiterentwicklung brachte so viel Neues, dass die momentan aktuelle Version die
Nummer 21.3 trägt. Die Entwicklung ist damit aber noch nicht abgeschlossen, und
so wird es wohl nicht bei dieser Version bleiben.
  </textblock>

  <textblock>
Wer sich gerne eingehender mit <command>emacs</command> beschäftigen möchte, dem 

sei der folgende
Text von Selflinux wärmstens empfohlen:
   </textblock>
   
  <ul>
   <li>
<ref chapter="emacs">HOWTO für den Emacs Einsteiger</ref>
   </li>
   </ul>
   
  </section>
 </split>


 <split>
  <section>
<!-- *. Kapitel-->
   <heading>		
vi
   </heading>	
 
  <image height="200">
    <title>gvim bietet den Komfort eines grafischen Editors mit der
		    Vielfältigkeit von vi.</title>
    <filename>gvim.png</filename>
   </image>

   <textblock>
<command>vi</command> ist wie emacs, ein Editor, der einem sehr viele 
Möglichkeiten bietet. Er ist
sehr schnell, aber man muss etliche Stunden aufwenden, um mit ihm angenehm
arbeiten zu können. Für diesen Aufwand wird man jedoch dann mit der 
Arbeitsgeschwindigkeit mehr als nur entschädigt.
  </textblock>


  <textblock>
Bis es soweit ist, ist es aber ein steiniger Weg. Vieles, was man bisher von
Editoren wusste, gilt bei <command>vi</command> nicht mehr. Alles wird mit Hilfe 
der Tastatur
gemacht, die Maus verliert in <command>vi</command> ihre Bedeutung als zentrales 

Hilfsmittel.
Diesem Effekt ist es zu verdanken, dass <command>vi</command> immer zur Verfügung 

steht. Wenn nichts
mehr geht, geht immer noch ein <command>vi</command>. Daher ist er Teil der 
meisten
Rettungssysteme. Da man in einem Notfall nicht noch Zeit hat, sich in 
<command>vi</command>
einzuarbeiten, sollte man dies schon vorher einmal machen.
  </textblock>

  <textblock>
Damit der Umstieg zu <command>vi</command> nicht zu schmerzhaft ist, gibt es 
eine Vielzahl von
<name>vi-Clonen</name>. Der auf dem Screenshot gezeigte <command>gvim</command> 
ist eine angenehme Mischung aus
der Stärke des <command>vi</command> mit der Einfachheit von 
<command>gedit</command>. <command>gvim</command> kann entweder wie 
<command>vi</command> über
die Tastatur bedient werden oder auch mit Hilfe der Maus.
  </textblock>

  <textblock>
Wer einmal das Prinzip von <command>vi</command> und all seinen abgeleiteten 
Brüdern begriffen hat,
will es nicht mehr missen. Damit auch die Leser von Selflinux einen tieferen
Einblick bekommen, haben wir auch zu <command>vi</command> einen weiterführenden 
Text:
   </textblock>
   
  <ul>
   <li>
<ref chapter="vim">Praxisorientiertes vim-Tutorial</ref>
   </li>
   </ul>
   

  </section>
 </split>
</chapter>

